//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace VdO2013LicenseProviderUtil.WSActivation {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="VdOLicenseProviderSoap", Namespace="http://localhost:20141")]
    public partial class VdOLicenseProvider : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback KeyDataValidateByEncrypedTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataAddByTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataAddByEncrypedTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFingerPrintEncryptedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFingerPrintDecryptedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerGetCodeMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerExistsMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemoMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemoMethodCaptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemoMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSuiteActivationsGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerProductActivationsGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivilegeGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyDataBuildMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyDefaultValueKindNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyForeingKeyReferenceNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOptionalParameterPrefixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldActivationPrivilegeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback CredentialGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataSetTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDataTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetByProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCodeByProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCodeByProductITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsByProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsByProductITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignUpForDemoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignUpForDemoITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerDeactivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerActivationsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSuiteActivationsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSuiteActivationsGetITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerProductActivationsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerProductActivationsGetITOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetIDByCustomerProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationExistsByCustomerProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataBuildOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataBuildITOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataExistsByTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataExistsByEncrypedTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataValidateByTextOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public VdOLicenseProvider() {
            this.Url = global::VdO2013LicenseProviderUtil.Properties.Settings.Default.WSActivation;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event KeyDataValidateByEncrypedTextCompletedEventHandler KeyDataValidateByEncrypedTextCompleted;
        
        /// <remarks/>
        public event KeyDataAddCompletedEventHandler KeyDataAddCompleted;
        
        /// <remarks/>
        public event KeyDataAddByTextCompletedEventHandler KeyDataAddByTextCompleted;
        
        /// <remarks/>
        public event KeyDataAddByEncrypedTextCompletedEventHandler KeyDataAddByEncrypedTextCompleted;
        
        /// <remarks/>
        public event GetFingerPrintEncryptedCompletedEventHandler GetFingerPrintEncryptedCompleted;
        
        /// <remarks/>
        public event GetFingerPrintDecryptedCompletedEventHandler GetFingerPrintDecryptedCompleted;
        
        /// <remarks/>
        public event GetCustomerGetCodeMethodNameCompletedEventHandler GetCustomerGetCodeMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerExistsMethodNameCompletedEventHandler GetCustomerExistsMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemoMethodNameCompletedEventHandler GetCustomerSignupForDemoMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemoMethodCaptionCompletedEventHandler GetCustomerSignupForDemoMethodCaptionCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemoMethodDescriptionCompletedEventHandler GetCustomerSignupForDemoMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerSuiteActivationsGetMethodNameCompletedEventHandler GetCustomerSuiteActivationsGetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerProductActivationsGetMethodNameCompletedEventHandler GetCustomerProductActivationsGetMethodNameCompleted;
        
        /// <remarks/>
        public event GetPrivilegeGetMethodNameCompletedEventHandler GetPrivilegeGetMethodNameCompleted;
        
        /// <remarks/>
        public event GetKeyDataBuildMethodNameCompletedEventHandler GetKeyDataBuildMethodNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyDefaultValueKindNameCompletedEventHandler GetExtendedPropertyDefaultValueKindNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyPrimaryKeyIndexNameCompletedEventHandler GetExtendedPropertyPrimaryKeyIndexNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyForeingKeyReferenceNameCompletedEventHandler GetExtendedPropertyForeingKeyReferenceNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventHandler GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventHandler GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompleted;
        
        /// <remarks/>
        public event GetOptionalParameterPrefixCompletedEventHandler GetOptionalParameterPrefixCompleted;
        
        /// <remarks/>
        public event GetFieldNameIDCompletedEventHandler GetFieldNameIDCompleted;
        
        /// <remarks/>
        public event GetFieldNameCodeCompletedEventHandler GetFieldNameCodeCompleted;
        
        /// <remarks/>
        public event GetFieldNameKeyCompletedEventHandler GetFieldNameKeyCompleted;
        
        /// <remarks/>
        public event GetFieldActivationPrivilegeIDCompletedEventHandler GetFieldActivationPrivilegeIDCompleted;
        
        /// <remarks/>
        public event DoLoginCompletedEventHandler DoLoginCompleted;
        
        /// <remarks/>
        public event CredentialGetCompletedEventHandler CredentialGetCompleted;
        
        /// <remarks/>
        public event getDataSetCompletedEventHandler getDataSetCompleted;
        
        /// <remarks/>
        public event setDataSetCompletedEventHandler setDataSetCompleted;
        
        /// <remarks/>
        public event getDataSetTablesCompletedEventHandler getDataSetTablesCompleted;
        
        /// <remarks/>
        public event getDataTableCompletedEventHandler getDataTableCompleted;
        
        /// <remarks/>
        public event setDataTableCompletedEventHandler setDataTableCompleted;
        
        /// <remarks/>
        public event getDataTableCountCompletedEventHandler getDataTableCountCompleted;
        
        /// <remarks/>
        public event getDataTableValueCompletedEventHandler getDataTableValueCompleted;
        
        /// <remarks/>
        public event ContextTableNameCompletedEventHandler ContextTableNameCompleted;
        
        /// <remarks/>
        public event ContextListCompletedEventHandler ContextListCompleted;
        
        /// <remarks/>
        public event ContextGetIDCompletedEventHandler ContextGetIDCompleted;
        
        /// <remarks/>
        public event ContextGetCodeCompletedEventHandler ContextGetCodeCompleted;
        
        /// <remarks/>
        public event ContextGetUniqueNameCompletedEventHandler ContextGetUniqueNameCompleted;
        
        /// <remarks/>
        public event ContextExistsCompletedEventHandler ContextExistsCompleted;
        
        /// <remarks/>
        public event UserTableNameCompletedEventHandler UserTableNameCompleted;
        
        /// <remarks/>
        public event UserListCompletedEventHandler UserListCompleted;
        
        /// <remarks/>
        public event UserGetIDCompletedEventHandler UserGetIDCompleted;
        
        /// <remarks/>
        public event UserGetCodeCompletedEventHandler UserGetCodeCompleted;
        
        /// <remarks/>
        public event UserGetUniqueNameCompletedEventHandler UserGetUniqueNameCompleted;
        
        /// <remarks/>
        public event UserExistsCompletedEventHandler UserExistsCompleted;
        
        /// <remarks/>
        public event PrivilegeTableNameCompletedEventHandler PrivilegeTableNameCompleted;
        
        /// <remarks/>
        public event PrivilegeListCompletedEventHandler PrivilegeListCompleted;
        
        /// <remarks/>
        public event PrivilegeGetIDCompletedEventHandler PrivilegeGetIDCompleted;
        
        /// <remarks/>
        public event PrivilegeGetCodeCompletedEventHandler PrivilegeGetCodeCompleted;
        
        /// <remarks/>
        public event PrivilegeGetUniqueNameCompletedEventHandler PrivilegeGetUniqueNameCompleted;
        
        /// <remarks/>
        public event PrivilegeExistsCompletedEventHandler PrivilegeExistsCompleted;
        
        /// <remarks/>
        public event PrivilegeGetCompletedEventHandler PrivilegeGetCompleted;
        
        /// <remarks/>
        public event PrivilegeGetByProductCompletedEventHandler PrivilegeGetByProductCompleted;
        
        /// <remarks/>
        public event SuiteTableNameCompletedEventHandler SuiteTableNameCompleted;
        
        /// <remarks/>
        public event SuiteListCompletedEventHandler SuiteListCompleted;
        
        /// <remarks/>
        public event SuiteGetIDCompletedEventHandler SuiteGetIDCompleted;
        
        /// <remarks/>
        public event SuiteGetCodeCompletedEventHandler SuiteGetCodeCompleted;
        
        /// <remarks/>
        public event SuiteGetUniqueNameCompletedEventHandler SuiteGetUniqueNameCompleted;
        
        /// <remarks/>
        public event SuiteExistsCompletedEventHandler SuiteExistsCompleted;
        
        /// <remarks/>
        public event ProductTableNameCompletedEventHandler ProductTableNameCompleted;
        
        /// <remarks/>
        public event ProductListCompletedEventHandler ProductListCompleted;
        
        /// <remarks/>
        public event ProductGetIDCompletedEventHandler ProductGetIDCompleted;
        
        /// <remarks/>
        public event ProductGetCodeCompletedEventHandler ProductGetCodeCompleted;
        
        /// <remarks/>
        public event ProductGetUniqueNameCompletedEventHandler ProductGetUniqueNameCompleted;
        
        /// <remarks/>
        public event ProductExistsCompletedEventHandler ProductExistsCompleted;
        
        /// <remarks/>
        public event CustomerTableNameCompletedEventHandler CustomerTableNameCompleted;
        
        /// <remarks/>
        public event CustomerListCompletedEventHandler CustomerListCompleted;
        
        /// <remarks/>
        public event CustomerGetIDCompletedEventHandler CustomerGetIDCompleted;
        
        /// <remarks/>
        public event CustomerGetCodeCompletedEventHandler CustomerGetCodeCompleted;
        
        /// <remarks/>
        public event CustomerGetCodeByProductCompletedEventHandler CustomerGetCodeByProductCompleted;
        
        /// <remarks/>
        public event CustomerGetCodeByProductITCompletedEventHandler CustomerGetCodeByProductITCompleted;
        
        /// <remarks/>
        public event CustomerGetUniqueNameCompletedEventHandler CustomerGetUniqueNameCompleted;
        
        /// <remarks/>
        public event CustomerExistsCompletedEventHandler CustomerExistsCompleted;
        
        /// <remarks/>
        public event CustomerExistsByProductCompletedEventHandler CustomerExistsByProductCompleted;
        
        /// <remarks/>
        public event CustomerExistsByProductITCompletedEventHandler CustomerExistsByProductITCompleted;
        
        /// <remarks/>
        public event CustomerAddCompletedEventHandler CustomerAddCompleted;
        
        /// <remarks/>
        public event CustomerRemoveCompletedEventHandler CustomerRemoveCompleted;
        
        /// <remarks/>
        public event CustomerSignUpForDemoCompletedEventHandler CustomerSignUpForDemoCompleted;
        
        /// <remarks/>
        public event CustomerSignUpForDemoITCompletedEventHandler CustomerSignUpForDemoITCompleted;
        
        /// <remarks/>
        public event CustomerActivateCompletedEventHandler CustomerActivateCompleted;
        
        /// <remarks/>
        public event CustomerDeactivateCompletedEventHandler CustomerDeactivateCompleted;
        
        /// <remarks/>
        public event CustomerActivationsGetCompletedEventHandler CustomerActivationsGetCompleted;
        
        /// <remarks/>
        public event CustomerSuiteActivationsGetCompletedEventHandler CustomerSuiteActivationsGetCompleted;
        
        /// <remarks/>
        public event CustomerSuiteActivationsGetITCompletedEventHandler CustomerSuiteActivationsGetITCompleted;
        
        /// <remarks/>
        public event CustomerProductActivationsGetCompletedEventHandler CustomerProductActivationsGetCompleted;
        
        /// <remarks/>
        public event CustomerProductActivationsGetITCompletedEventHandler CustomerProductActivationsGetITCompleted;
        
        /// <remarks/>
        public event ActivationTableNameCompletedEventHandler ActivationTableNameCompleted;
        
        /// <remarks/>
        public event ActivationListCompletedEventHandler ActivationListCompleted;
        
        /// <remarks/>
        public event ActivationGetIDCompletedEventHandler ActivationGetIDCompleted;
        
        /// <remarks/>
        public event ActivationGetIDByCustomerProductCompletedEventHandler ActivationGetIDByCustomerProductCompleted;
        
        /// <remarks/>
        public event ActivationGetCodeCompletedEventHandler ActivationGetCodeCompleted;
        
        /// <remarks/>
        public event ActivationGetUniqueNameCompletedEventHandler ActivationGetUniqueNameCompleted;
        
        /// <remarks/>
        public event ActivationExistsCompletedEventHandler ActivationExistsCompleted;
        
        /// <remarks/>
        public event ActivationExistsByCustomerProductCompletedEventHandler ActivationExistsByCustomerProductCompleted;
        
        /// <remarks/>
        public event KeyTableNameCompletedEventHandler KeyTableNameCompleted;
        
        /// <remarks/>
        public event KeyListCompletedEventHandler KeyListCompleted;
        
        /// <remarks/>
        public event KeyGetIDCompletedEventHandler KeyGetIDCompleted;
        
        /// <remarks/>
        public event KeyGetCodeCompletedEventHandler KeyGetCodeCompleted;
        
        /// <remarks/>
        public event KeyGetUniqueNameCompletedEventHandler KeyGetUniqueNameCompleted;
        
        /// <remarks/>
        public event KeyExistsCompletedEventHandler KeyExistsCompleted;
        
        /// <remarks/>
        public event KeyDataBuildCompletedEventHandler KeyDataBuildCompleted;
        
        /// <remarks/>
        public event KeyDataBuildITCompletedEventHandler KeyDataBuildITCompleted;
        
        /// <remarks/>
        public event KeyDataExistsCompletedEventHandler KeyDataExistsCompleted;
        
        /// <remarks/>
        public event KeyDataExistsByTextCompletedEventHandler KeyDataExistsByTextCompleted;
        
        /// <remarks/>
        public event KeyDataExistsByEncrypedTextCompletedEventHandler KeyDataExistsByEncrypedTextCompleted;
        
        /// <remarks/>
        public event KeyDataValidateCompletedEventHandler KeyDataValidateCompleted;
        
        /// <remarks/>
        public event KeyDataValidateByTextCompletedEventHandler KeyDataValidateByTextCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataValidateByEncrypedText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataValidateByEncrypedText(string encryptedDataText) {
            object[] results = this.Invoke("KeyDataValidateByEncrypedText", new object[] {
                        encryptedDataText});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataValidateByEncrypedTextAsync(string encryptedDataText) {
            this.KeyDataValidateByEncrypedTextAsync(encryptedDataText, null);
        }
        
        /// <remarks/>
        public void KeyDataValidateByEncrypedTextAsync(string encryptedDataText, object userState) {
            if ((this.KeyDataValidateByEncrypedTextOperationCompleted == null)) {
                this.KeyDataValidateByEncrypedTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataValidateByEncrypedTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataValidateByEncrypedText", new object[] {
                        encryptedDataText}, this.KeyDataValidateByEncrypedTextOperationCompleted, userState);
        }
        
        private void OnKeyDataValidateByEncrypedTextOperationCompleted(object arg) {
            if ((this.KeyDataValidateByEncrypedTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataValidateByEncrypedTextCompleted(this, new KeyDataValidateByEncrypedTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataAdd", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataAdd(LPCredential credential, KeyData data) {
            object[] results = this.Invoke("KeyDataAdd", new object[] {
                        credential,
                        data});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataAddAsync(LPCredential credential, KeyData data) {
            this.KeyDataAddAsync(credential, data, null);
        }
        
        /// <remarks/>
        public void KeyDataAddAsync(LPCredential credential, KeyData data, object userState) {
            if ((this.KeyDataAddOperationCompleted == null)) {
                this.KeyDataAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataAddOperationCompleted);
            }
            this.InvokeAsync("KeyDataAdd", new object[] {
                        credential,
                        data}, this.KeyDataAddOperationCompleted, userState);
        }
        
        private void OnKeyDataAddOperationCompleted(object arg) {
            if ((this.KeyDataAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataAddCompleted(this, new KeyDataAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataAddByText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataAddByText(LPCredential credential, string keyDataText, bool encrypted) {
            object[] results = this.Invoke("KeyDataAddByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataAddByTextAsync(LPCredential credential, string keyDataText, bool encrypted) {
            this.KeyDataAddByTextAsync(credential, keyDataText, encrypted, null);
        }
        
        /// <remarks/>
        public void KeyDataAddByTextAsync(LPCredential credential, string keyDataText, bool encrypted, object userState) {
            if ((this.KeyDataAddByTextOperationCompleted == null)) {
                this.KeyDataAddByTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataAddByTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataAddByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted}, this.KeyDataAddByTextOperationCompleted, userState);
        }
        
        private void OnKeyDataAddByTextOperationCompleted(object arg) {
            if ((this.KeyDataAddByTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataAddByTextCompleted(this, new KeyDataAddByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataAddByEncrypedText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataAddByEncrypedText(string encryptedDataText) {
            object[] results = this.Invoke("KeyDataAddByEncrypedText", new object[] {
                        encryptedDataText});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataAddByEncrypedTextAsync(string encryptedDataText) {
            this.KeyDataAddByEncrypedTextAsync(encryptedDataText, null);
        }
        
        /// <remarks/>
        public void KeyDataAddByEncrypedTextAsync(string encryptedDataText, object userState) {
            if ((this.KeyDataAddByEncrypedTextOperationCompleted == null)) {
                this.KeyDataAddByEncrypedTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataAddByEncrypedTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataAddByEncrypedText", new object[] {
                        encryptedDataText}, this.KeyDataAddByEncrypedTextOperationCompleted, userState);
        }
        
        private void OnKeyDataAddByEncrypedTextOperationCompleted(object arg) {
            if ((this.KeyDataAddByEncrypedTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataAddByEncrypedTextCompleted(this, new KeyDataAddByEncrypedTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFingerPrintEncrypted", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage GetFingerPrintEncrypted(string decryptedFingerPrint) {
            object[] results = this.Invoke("GetFingerPrintEncrypted", new object[] {
                        decryptedFingerPrint});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetFingerPrintEncryptedAsync(string decryptedFingerPrint) {
            this.GetFingerPrintEncryptedAsync(decryptedFingerPrint, null);
        }
        
        /// <remarks/>
        public void GetFingerPrintEncryptedAsync(string decryptedFingerPrint, object userState) {
            if ((this.GetFingerPrintEncryptedOperationCompleted == null)) {
                this.GetFingerPrintEncryptedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFingerPrintEncryptedOperationCompleted);
            }
            this.InvokeAsync("GetFingerPrintEncrypted", new object[] {
                        decryptedFingerPrint}, this.GetFingerPrintEncryptedOperationCompleted, userState);
        }
        
        private void OnGetFingerPrintEncryptedOperationCompleted(object arg) {
            if ((this.GetFingerPrintEncryptedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFingerPrintEncryptedCompleted(this, new GetFingerPrintEncryptedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFingerPrintDecrypted", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage GetFingerPrintDecrypted(string encryptedFingerPrint) {
            object[] results = this.Invoke("GetFingerPrintDecrypted", new object[] {
                        encryptedFingerPrint});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetFingerPrintDecryptedAsync(string encryptedFingerPrint) {
            this.GetFingerPrintDecryptedAsync(encryptedFingerPrint, null);
        }
        
        /// <remarks/>
        public void GetFingerPrintDecryptedAsync(string encryptedFingerPrint, object userState) {
            if ((this.GetFingerPrintDecryptedOperationCompleted == null)) {
                this.GetFingerPrintDecryptedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFingerPrintDecryptedOperationCompleted);
            }
            this.InvokeAsync("GetFingerPrintDecrypted", new object[] {
                        encryptedFingerPrint}, this.GetFingerPrintDecryptedOperationCompleted, userState);
        }
        
        private void OnGetFingerPrintDecryptedOperationCompleted(object arg) {
            if ((this.GetFingerPrintDecryptedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFingerPrintDecryptedCompleted(this, new GetFingerPrintDecryptedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerGetCodeMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerGetCodeMethodName() {
            object[] results = this.Invoke("GetCustomerGetCodeMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeMethodNameAsync() {
            this.GetCustomerGetCodeMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeMethodNameAsync(object userState) {
            if ((this.GetCustomerGetCodeMethodNameOperationCompleted == null)) {
                this.GetCustomerGetCodeMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerGetCodeMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerGetCodeMethodName", new object[0], this.GetCustomerGetCodeMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerGetCodeMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerGetCodeMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerGetCodeMethodNameCompleted(this, new GetCustomerGetCodeMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerExistsMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerExistsMethodName() {
            object[] results = this.Invoke("GetCustomerExistsMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerExistsMethodNameAsync() {
            this.GetCustomerExistsMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerExistsMethodNameAsync(object userState) {
            if ((this.GetCustomerExistsMethodNameOperationCompleted == null)) {
                this.GetCustomerExistsMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerExistsMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerExistsMethodName", new object[0], this.GetCustomerExistsMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerExistsMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerExistsMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerExistsMethodNameCompleted(this, new GetCustomerExistsMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemoMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemoMethodName() {
            object[] results = this.Invoke("GetCustomerSignupForDemoMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodNameAsync() {
            this.GetCustomerSignupForDemoMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodNameAsync(object userState) {
            if ((this.GetCustomerSignupForDemoMethodNameOperationCompleted == null)) {
                this.GetCustomerSignupForDemoMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemoMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemoMethodName", new object[0], this.GetCustomerSignupForDemoMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemoMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemoMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemoMethodNameCompleted(this, new GetCustomerSignupForDemoMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemoMethodCaption", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemoMethodCaption() {
            object[] results = this.Invoke("GetCustomerSignupForDemoMethodCaption", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodCaptionAsync() {
            this.GetCustomerSignupForDemoMethodCaptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodCaptionAsync(object userState) {
            if ((this.GetCustomerSignupForDemoMethodCaptionOperationCompleted == null)) {
                this.GetCustomerSignupForDemoMethodCaptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemoMethodCaptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemoMethodCaption", new object[0], this.GetCustomerSignupForDemoMethodCaptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemoMethodCaptionOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemoMethodCaptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemoMethodCaptionCompleted(this, new GetCustomerSignupForDemoMethodCaptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemoMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemoMethodDescription() {
            object[] results = this.Invoke("GetCustomerSignupForDemoMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodDescriptionAsync() {
            this.GetCustomerSignupForDemoMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerSignupForDemoMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerSignupForDemoMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemoMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemoMethodDescription", new object[0], this.GetCustomerSignupForDemoMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemoMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemoMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemoMethodDescriptionCompleted(this, new GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSuiteActivationsGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSuiteActivationsGetMethodName() {
            object[] results = this.Invoke("GetCustomerSuiteActivationsGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsGetMethodNameAsync() {
            this.GetCustomerSuiteActivationsGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsGetMethodNameAsync(object userState) {
            if ((this.GetCustomerSuiteActivationsGetMethodNameOperationCompleted == null)) {
                this.GetCustomerSuiteActivationsGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSuiteActivationsGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSuiteActivationsGetMethodName", new object[0], this.GetCustomerSuiteActivationsGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerSuiteActivationsGetMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerSuiteActivationsGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSuiteActivationsGetMethodNameCompleted(this, new GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerProductActivationsGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerProductActivationsGetMethodName() {
            object[] results = this.Invoke("GetCustomerProductActivationsGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsGetMethodNameAsync() {
            this.GetCustomerProductActivationsGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsGetMethodNameAsync(object userState) {
            if ((this.GetCustomerProductActivationsGetMethodNameOperationCompleted == null)) {
                this.GetCustomerProductActivationsGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerProductActivationsGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerProductActivationsGetMethodName", new object[0], this.GetCustomerProductActivationsGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerProductActivationsGetMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerProductActivationsGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerProductActivationsGetMethodNameCompleted(this, new GetCustomerProductActivationsGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetPrivilegeGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrivilegeGetMethodName() {
            object[] results = this.Invoke("GetPrivilegeGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivilegeGetMethodNameAsync() {
            this.GetPrivilegeGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetPrivilegeGetMethodNameAsync(object userState) {
            if ((this.GetPrivilegeGetMethodNameOperationCompleted == null)) {
                this.GetPrivilegeGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivilegeGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetPrivilegeGetMethodName", new object[0], this.GetPrivilegeGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetPrivilegeGetMethodNameOperationCompleted(object arg) {
            if ((this.GetPrivilegeGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivilegeGetMethodNameCompleted(this, new GetPrivilegeGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetKeyDataBuildMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyDataBuildMethodName() {
            object[] results = this.Invoke("GetKeyDataBuildMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyDataBuildMethodNameAsync() {
            this.GetKeyDataBuildMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetKeyDataBuildMethodNameAsync(object userState) {
            if ((this.GetKeyDataBuildMethodNameOperationCompleted == null)) {
                this.GetKeyDataBuildMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyDataBuildMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetKeyDataBuildMethodName", new object[0], this.GetKeyDataBuildMethodNameOperationCompleted, userState);
        }
        
        private void OnGetKeyDataBuildMethodNameOperationCompleted(object arg) {
            if ((this.GetKeyDataBuildMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyDataBuildMethodNameCompleted(this, new GetKeyDataBuildMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyDefaultValueKindName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyDefaultValueKindName() {
            object[] results = this.Invoke("GetExtendedPropertyDefaultValueKindName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyDefaultValueKindNameAsync() {
            this.GetExtendedPropertyDefaultValueKindNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyDefaultValueKindNameAsync(object userState) {
            if ((this.GetExtendedPropertyDefaultValueKindNameOperationCompleted == null)) {
                this.GetExtendedPropertyDefaultValueKindNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyDefaultValueKindNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyDefaultValueKindName", new object[0], this.GetExtendedPropertyDefaultValueKindNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyDefaultValueKindNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyDefaultValueKindNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyDefaultValueKindNameCompleted(this, new GetExtendedPropertyDefaultValueKindNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyPrimaryKeyIndexName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyPrimaryKeyIndexName() {
            object[] results = this.Invoke("GetExtendedPropertyPrimaryKeyIndexName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyPrimaryKeyIndexNameAsync() {
            this.GetExtendedPropertyPrimaryKeyIndexNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyPrimaryKeyIndexNameAsync(object userState) {
            if ((this.GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted == null)) {
                this.GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyPrimaryKeyIndexNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyPrimaryKeyIndexName", new object[0], this.GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyPrimaryKeyIndexNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyPrimaryKeyIndexNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyPrimaryKeyIndexNameCompleted(this, new GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyForeingKeyReferenceName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyForeingKeyReferenceName() {
            object[] results = this.Invoke("GetExtendedPropertyForeingKeyReferenceName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeingKeyReferenceNameAsync() {
            this.GetExtendedPropertyForeingKeyReferenceNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeingKeyReferenceNameAsync(object userState) {
            if ((this.GetExtendedPropertyForeingKeyReferenceNameOperationCompleted == null)) {
                this.GetExtendedPropertyForeingKeyReferenceNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyForeingKeyReferenceNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyForeingKeyReferenceName", new object[0], this.GetExtendedPropertyForeingKeyReferenceNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyForeingKeyReferenceNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyForeingKeyReferenceNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyForeingKeyReferenceNameCompleted(this, new GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyForeignKeyReferenceDisplayMemberName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyForeignKeyReferenceDisplayMemberName() {
            object[] results = this.Invoke("GetExtendedPropertyForeignKeyReferenceDisplayMemberName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberNameAsync() {
            this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberNameAsync(object userState) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted == null)) {
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyForeignKeyReferenceDisplayMemberName", new object[0], this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompleted(this, new GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparat" +
            "or", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparator() {
            object[] results = this.Invoke("GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparator", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorAsync() {
            this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorAsync(object userState) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted == null)) {
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparator", new object[0], this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompleted(this, new GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetOptionalParameterPrefix", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOptionalParameterPrefix() {
            object[] results = this.Invoke("GetOptionalParameterPrefix", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOptionalParameterPrefixAsync() {
            this.GetOptionalParameterPrefixAsync(null);
        }
        
        /// <remarks/>
        public void GetOptionalParameterPrefixAsync(object userState) {
            if ((this.GetOptionalParameterPrefixOperationCompleted == null)) {
                this.GetOptionalParameterPrefixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOptionalParameterPrefixOperationCompleted);
            }
            this.InvokeAsync("GetOptionalParameterPrefix", new object[0], this.GetOptionalParameterPrefixOperationCompleted, userState);
        }
        
        private void OnGetOptionalParameterPrefixOperationCompleted(object arg) {
            if ((this.GetOptionalParameterPrefixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOptionalParameterPrefixCompleted(this, new GetOptionalParameterPrefixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameID() {
            object[] results = this.Invoke("GetFieldNameID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameIDAsync() {
            this.GetFieldNameIDAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameIDAsync(object userState) {
            if ((this.GetFieldNameIDOperationCompleted == null)) {
                this.GetFieldNameIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameIDOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameID", new object[0], this.GetFieldNameIDOperationCompleted, userState);
        }
        
        private void OnGetFieldNameIDOperationCompleted(object arg) {
            if ((this.GetFieldNameIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameIDCompleted(this, new GetFieldNameIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameCode() {
            object[] results = this.Invoke("GetFieldNameCode", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameCodeAsync() {
            this.GetFieldNameCodeAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameCodeAsync(object userState) {
            if ((this.GetFieldNameCodeOperationCompleted == null)) {
                this.GetFieldNameCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameCodeOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameCode", new object[0], this.GetFieldNameCodeOperationCompleted, userState);
        }
        
        private void OnGetFieldNameCodeOperationCompleted(object arg) {
            if ((this.GetFieldNameCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameCodeCompleted(this, new GetFieldNameCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameKey", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameKey() {
            object[] results = this.Invoke("GetFieldNameKey", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameKeyAsync() {
            this.GetFieldNameKeyAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameKeyAsync(object userState) {
            if ((this.GetFieldNameKeyOperationCompleted == null)) {
                this.GetFieldNameKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameKeyOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameKey", new object[0], this.GetFieldNameKeyOperationCompleted, userState);
        }
        
        private void OnGetFieldNameKeyOperationCompleted(object arg) {
            if ((this.GetFieldNameKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameKeyCompleted(this, new GetFieldNameKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldActivationPrivilegeID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldActivationPrivilegeID() {
            object[] results = this.Invoke("GetFieldActivationPrivilegeID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldActivationPrivilegeIDAsync() {
            this.GetFieldActivationPrivilegeIDAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldActivationPrivilegeIDAsync(object userState) {
            if ((this.GetFieldActivationPrivilegeIDOperationCompleted == null)) {
                this.GetFieldActivationPrivilegeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldActivationPrivilegeIDOperationCompleted);
            }
            this.InvokeAsync("GetFieldActivationPrivilegeID", new object[0], this.GetFieldActivationPrivilegeIDOperationCompleted, userState);
        }
        
        private void OnGetFieldActivationPrivilegeIDOperationCompleted(object arg) {
            if ((this.GetFieldActivationPrivilegeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldActivationPrivilegeIDCompleted(this, new GetFieldActivationPrivilegeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/DoLogin", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage DoLogin(LPCredential credential) {
            object[] results = this.Invoke("DoLogin", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void DoLoginAsync(LPCredential credential) {
            this.DoLoginAsync(credential, null);
        }
        
        /// <remarks/>
        public void DoLoginAsync(LPCredential credential, object userState) {
            if ((this.DoLoginOperationCompleted == null)) {
                this.DoLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoLoginOperationCompleted);
            }
            this.InvokeAsync("DoLogin", new object[] {
                        credential}, this.DoLoginOperationCompleted, userState);
        }
        
        private void OnDoLoginOperationCompleted(object arg) {
            if ((this.DoLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoLoginCompleted(this, new DoLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CredentialGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPCredential CredentialGet(string login, string password, string context) {
            object[] results = this.Invoke("CredentialGet", new object[] {
                        login,
                        password,
                        context});
            return ((LPCredential)(results[0]));
        }
        
        /// <remarks/>
        public void CredentialGetAsync(string login, string password, string context) {
            this.CredentialGetAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void CredentialGetAsync(string login, string password, string context, object userState) {
            if ((this.CredentialGetOperationCompleted == null)) {
                this.CredentialGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCredentialGetOperationCompleted);
            }
            this.InvokeAsync("CredentialGet", new object[] {
                        login,
                        password,
                        context}, this.CredentialGetOperationCompleted, userState);
        }
        
        private void OnCredentialGetOperationCompleted(object arg) {
            if ((this.CredentialGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CredentialGetCompleted(this, new CredentialGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataSet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataSet(LPCredential credential) {
            object[] results = this.Invoke("getDataSet", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataSetAsync(LPCredential credential) {
            this.getDataSetAsync(credential, null);
        }
        
        /// <remarks/>
        public void getDataSetAsync(LPCredential credential, object userState) {
            if ((this.getDataSetOperationCompleted == null)) {
                this.getDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataSetOperationCompleted);
            }
            this.InvokeAsync("getDataSet", new object[] {
                        credential}, this.getDataSetOperationCompleted, userState);
        }
        
        private void OngetDataSetOperationCompleted(object arg) {
            if ((this.getDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataSetCompleted(this, new getDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/setDataSet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage setDataSet(LPCredential credential, System.Data.DataSet dataSet) {
            object[] results = this.Invoke("setDataSet", new object[] {
                        credential,
                        dataSet});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void setDataSetAsync(LPCredential credential, System.Data.DataSet dataSet) {
            this.setDataSetAsync(credential, dataSet, null);
        }
        
        /// <remarks/>
        public void setDataSetAsync(LPCredential credential, System.Data.DataSet dataSet, object userState) {
            if ((this.setDataSetOperationCompleted == null)) {
                this.setDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDataSetOperationCompleted);
            }
            this.InvokeAsync("setDataSet", new object[] {
                        credential,
                        dataSet}, this.setDataSetOperationCompleted, userState);
        }
        
        private void OnsetDataSetOperationCompleted(object arg) {
            if ((this.setDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDataSetCompleted(this, new setDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataSetTables", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataSetTables(LPCredential credential) {
            object[] results = this.Invoke("getDataSetTables", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataSetTablesAsync(LPCredential credential) {
            this.getDataSetTablesAsync(credential, null);
        }
        
        /// <remarks/>
        public void getDataSetTablesAsync(LPCredential credential, object userState) {
            if ((this.getDataSetTablesOperationCompleted == null)) {
                this.getDataSetTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataSetTablesOperationCompleted);
            }
            this.InvokeAsync("getDataSetTables", new object[] {
                        credential}, this.getDataSetTablesOperationCompleted, userState);
        }
        
        private void OngetDataSetTablesOperationCompleted(object arg) {
            if ((this.getDataSetTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataSetTablesCompleted(this, new getDataSetTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataTable", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataTable(LPCredential credential, string dataTableName) {
            object[] results = this.Invoke("getDataTable", new object[] {
                        credential,
                        dataTableName});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableAsync(LPCredential credential, string dataTableName) {
            this.getDataTableAsync(credential, dataTableName, null);
        }
        
        /// <remarks/>
        public void getDataTableAsync(LPCredential credential, string dataTableName, object userState) {
            if ((this.getDataTableOperationCompleted == null)) {
                this.getDataTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableOperationCompleted);
            }
            this.InvokeAsync("getDataTable", new object[] {
                        credential,
                        dataTableName}, this.getDataTableOperationCompleted, userState);
        }
        
        private void OngetDataTableOperationCompleted(object arg) {
            if ((this.getDataTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableCompleted(this, new getDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/setDataTable", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage setDataTable(LPCredential credential, System.Data.DataTable dataTable) {
            object[] results = this.Invoke("setDataTable", new object[] {
                        credential,
                        dataTable});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void setDataTableAsync(LPCredential credential, System.Data.DataTable dataTable) {
            this.setDataTableAsync(credential, dataTable, null);
        }
        
        /// <remarks/>
        public void setDataTableAsync(LPCredential credential, System.Data.DataTable dataTable, object userState) {
            if ((this.setDataTableOperationCompleted == null)) {
                this.setDataTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDataTableOperationCompleted);
            }
            this.InvokeAsync("setDataTable", new object[] {
                        credential,
                        dataTable}, this.setDataTableOperationCompleted, userState);
        }
        
        private void OnsetDataTableOperationCompleted(object arg) {
            if ((this.setDataTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDataTableCompleted(this, new setDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataTableCount", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataTableCount(LPCredential credential, string dataTableName, string rowFilter) {
            object[] results = this.Invoke("getDataTableCount", new object[] {
                        credential,
                        dataTableName,
                        rowFilter});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableCountAsync(LPCredential credential, string dataTableName, string rowFilter) {
            this.getDataTableCountAsync(credential, dataTableName, rowFilter, null);
        }
        
        /// <remarks/>
        public void getDataTableCountAsync(LPCredential credential, string dataTableName, string rowFilter, object userState) {
            if ((this.getDataTableCountOperationCompleted == null)) {
                this.getDataTableCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableCountOperationCompleted);
            }
            this.InvokeAsync("getDataTableCount", new object[] {
                        credential,
                        dataTableName,
                        rowFilter}, this.getDataTableCountOperationCompleted, userState);
        }
        
        private void OngetDataTableCountOperationCompleted(object arg) {
            if ((this.getDataTableCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableCountCompleted(this, new getDataTableCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataTableValue", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataTableValue(LPCredential credential, string dataTableName, string columnName, string rowFilter, string rowSort, int rowIndex, object isNullValue) {
            object[] results = this.Invoke("getDataTableValue", new object[] {
                        credential,
                        dataTableName,
                        columnName,
                        rowFilter,
                        rowSort,
                        rowIndex,
                        isNullValue});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableValueAsync(LPCredential credential, string dataTableName, string columnName, string rowFilter, string rowSort, int rowIndex, object isNullValue) {
            this.getDataTableValueAsync(credential, dataTableName, columnName, rowFilter, rowSort, rowIndex, isNullValue, null);
        }
        
        /// <remarks/>
        public void getDataTableValueAsync(LPCredential credential, string dataTableName, string columnName, string rowFilter, string rowSort, int rowIndex, object isNullValue, object userState) {
            if ((this.getDataTableValueOperationCompleted == null)) {
                this.getDataTableValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableValueOperationCompleted);
            }
            this.InvokeAsync("getDataTableValue", new object[] {
                        credential,
                        dataTableName,
                        columnName,
                        rowFilter,
                        rowSort,
                        rowIndex,
                        isNullValue}, this.getDataTableValueOperationCompleted, userState);
        }
        
        private void OngetDataTableValueOperationCompleted(object arg) {
            if ((this.getDataTableValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableValueCompleted(this, new getDataTableValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextTableName(LPCredential credential) {
            object[] results = this.Invoke("ContextTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextTableNameAsync(LPCredential credential) {
            this.ContextTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void ContextTableNameAsync(LPCredential credential, object userState) {
            if ((this.ContextTableNameOperationCompleted == null)) {
                this.ContextTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextTableNameOperationCompleted);
            }
            this.InvokeAsync("ContextTableName", new object[] {
                        credential}, this.ContextTableNameOperationCompleted, userState);
        }
        
        private void OnContextTableNameOperationCompleted(object arg) {
            if ((this.ContextTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextTableNameCompleted(this, new ContextTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextList(LPCredential credential) {
            object[] results = this.Invoke("ContextList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextListAsync(LPCredential credential) {
            this.ContextListAsync(credential, null);
        }
        
        /// <remarks/>
        public void ContextListAsync(LPCredential credential, object userState) {
            if ((this.ContextListOperationCompleted == null)) {
                this.ContextListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextListOperationCompleted);
            }
            this.InvokeAsync("ContextList", new object[] {
                        credential}, this.ContextListOperationCompleted, userState);
        }
        
        private void OnContextListOperationCompleted(object arg) {
            if ((this.ContextListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextListCompleted(this, new ContextListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetID(LPCredential credential, string byCode, string orDescription) {
            object[] results = this.Invoke("ContextGetID", new object[] {
                        credential,
                        byCode,
                        orDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetIDAsync(LPCredential credential, string byCode, string orDescription) {
            this.ContextGetIDAsync(credential, byCode, orDescription, null);
        }
        
        /// <remarks/>
        public void ContextGetIDAsync(LPCredential credential, string byCode, string orDescription, object userState) {
            if ((this.ContextGetIDOperationCompleted == null)) {
                this.ContextGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetIDOperationCompleted);
            }
            this.InvokeAsync("ContextGetID", new object[] {
                        credential,
                        byCode,
                        orDescription}, this.ContextGetIDOperationCompleted, userState);
        }
        
        private void OnContextGetIDOperationCompleted(object arg) {
            if ((this.ContextGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetIDCompleted(this, new ContextGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetCode(LPCredential credential, string byDescription) {
            object[] results = this.Invoke("ContextGetCode", new object[] {
                        credential,
                        byDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetCodeAsync(LPCredential credential, string byDescription) {
            this.ContextGetCodeAsync(credential, byDescription, null);
        }
        
        /// <remarks/>
        public void ContextGetCodeAsync(LPCredential credential, string byDescription, object userState) {
            if ((this.ContextGetCodeOperationCompleted == null)) {
                this.ContextGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetCodeOperationCompleted);
            }
            this.InvokeAsync("ContextGetCode", new object[] {
                        credential,
                        byDescription}, this.ContextGetCodeOperationCompleted, userState);
        }
        
        private void OnContextGetCodeOperationCompleted(object arg) {
            if ((this.ContextGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetCodeCompleted(this, new ContextGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ContextGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.ContextGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ContextGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ContextGetUniqueNameOperationCompleted == null)) {
                this.ContextGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("ContextGetUniqueName", new object[] {
                        credential,
                        byCode}, this.ContextGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnContextGetUniqueNameOperationCompleted(object arg) {
            if ((this.ContextGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetUniqueNameCompleted(this, new ContextGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ContextExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextExistsAsync(LPCredential credential, string byCode) {
            this.ContextExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ContextExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ContextExistsOperationCompleted == null)) {
                this.ContextExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextExistsOperationCompleted);
            }
            this.InvokeAsync("ContextExists", new object[] {
                        credential,
                        byCode}, this.ContextExistsOperationCompleted, userState);
        }
        
        private void OnContextExistsOperationCompleted(object arg) {
            if ((this.ContextExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextExistsCompleted(this, new ContextExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserTableName(LPCredential credential) {
            object[] results = this.Invoke("UserTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserTableNameAsync(LPCredential credential) {
            this.UserTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void UserTableNameAsync(LPCredential credential, object userState) {
            if ((this.UserTableNameOperationCompleted == null)) {
                this.UserTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserTableNameOperationCompleted);
            }
            this.InvokeAsync("UserTableName", new object[] {
                        credential}, this.UserTableNameOperationCompleted, userState);
        }
        
        private void OnUserTableNameOperationCompleted(object arg) {
            if ((this.UserTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserTableNameCompleted(this, new UserTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserList(LPCredential credential) {
            object[] results = this.Invoke("UserList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserListAsync(LPCredential credential) {
            this.UserListAsync(credential, null);
        }
        
        /// <remarks/>
        public void UserListAsync(LPCredential credential, object userState) {
            if ((this.UserListOperationCompleted == null)) {
                this.UserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserListOperationCompleted);
            }
            this.InvokeAsync("UserList", new object[] {
                        credential}, this.UserListOperationCompleted, userState);
        }
        
        private void OnUserListOperationCompleted(object arg) {
            if ((this.UserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserListCompleted(this, new UserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetID(LPCredential credential, string byCode, string orLogin, string orEmail) {
            object[] results = this.Invoke("UserGetID", new object[] {
                        credential,
                        byCode,
                        orLogin,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetIDAsync(LPCredential credential, string byCode, string orLogin, string orEmail) {
            this.UserGetIDAsync(credential, byCode, orLogin, orEmail, null);
        }
        
        /// <remarks/>
        public void UserGetIDAsync(LPCredential credential, string byCode, string orLogin, string orEmail, object userState) {
            if ((this.UserGetIDOperationCompleted == null)) {
                this.UserGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetIDOperationCompleted);
            }
            this.InvokeAsync("UserGetID", new object[] {
                        credential,
                        byCode,
                        orLogin,
                        orEmail}, this.UserGetIDOperationCompleted, userState);
        }
        
        private void OnUserGetIDOperationCompleted(object arg) {
            if ((this.UserGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetIDCompleted(this, new UserGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetCode(LPCredential credential, string byLogin, string orEmail) {
            object[] results = this.Invoke("UserGetCode", new object[] {
                        credential,
                        byLogin,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetCodeAsync(LPCredential credential, string byLogin, string orEmail) {
            this.UserGetCodeAsync(credential, byLogin, orEmail, null);
        }
        
        /// <remarks/>
        public void UserGetCodeAsync(LPCredential credential, string byLogin, string orEmail, object userState) {
            if ((this.UserGetCodeOperationCompleted == null)) {
                this.UserGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetCodeOperationCompleted);
            }
            this.InvokeAsync("UserGetCode", new object[] {
                        credential,
                        byLogin,
                        orEmail}, this.UserGetCodeOperationCompleted, userState);
        }
        
        private void OnUserGetCodeOperationCompleted(object arg) {
            if ((this.UserGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetCodeCompleted(this, new UserGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("UserGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.UserGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void UserGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.UserGetUniqueNameOperationCompleted == null)) {
                this.UserGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("UserGetUniqueName", new object[] {
                        credential,
                        byCode}, this.UserGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnUserGetUniqueNameOperationCompleted(object arg) {
            if ((this.UserGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetUniqueNameCompleted(this, new UserGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("UserExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserExistsAsync(LPCredential credential, string byCode) {
            this.UserExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void UserExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.UserExistsOperationCompleted == null)) {
                this.UserExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserExistsOperationCompleted);
            }
            this.InvokeAsync("UserExists", new object[] {
                        credential,
                        byCode}, this.UserExistsOperationCompleted, userState);
        }
        
        private void OnUserExistsOperationCompleted(object arg) {
            if ((this.UserExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeTableName(LPCredential credential) {
            object[] results = this.Invoke("PrivilegeTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeTableNameAsync(LPCredential credential) {
            this.PrivilegeTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void PrivilegeTableNameAsync(LPCredential credential, object userState) {
            if ((this.PrivilegeTableNameOperationCompleted == null)) {
                this.PrivilegeTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeTableNameOperationCompleted);
            }
            this.InvokeAsync("PrivilegeTableName", new object[] {
                        credential}, this.PrivilegeTableNameOperationCompleted, userState);
        }
        
        private void OnPrivilegeTableNameOperationCompleted(object arg) {
            if ((this.PrivilegeTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeTableNameCompleted(this, new PrivilegeTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeList(LPCredential credential) {
            object[] results = this.Invoke("PrivilegeList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeListAsync(LPCredential credential) {
            this.PrivilegeListAsync(credential, null);
        }
        
        /// <remarks/>
        public void PrivilegeListAsync(LPCredential credential, object userState) {
            if ((this.PrivilegeListOperationCompleted == null)) {
                this.PrivilegeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeListOperationCompleted);
            }
            this.InvokeAsync("PrivilegeList", new object[] {
                        credential}, this.PrivilegeListOperationCompleted, userState);
        }
        
        private void OnPrivilegeListOperationCompleted(object arg) {
            if ((this.PrivilegeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeListCompleted(this, new PrivilegeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetID(LPCredential credential, string byCode, string orDescription) {
            object[] results = this.Invoke("PrivilegeGetID", new object[] {
                        credential,
                        byCode,
                        orDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetIDAsync(LPCredential credential, string byCode, string orDescription) {
            this.PrivilegeGetIDAsync(credential, byCode, orDescription, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetIDAsync(LPCredential credential, string byCode, string orDescription, object userState) {
            if ((this.PrivilegeGetIDOperationCompleted == null)) {
                this.PrivilegeGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetIDOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetID", new object[] {
                        credential,
                        byCode,
                        orDescription}, this.PrivilegeGetIDOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetIDOperationCompleted(object arg) {
            if ((this.PrivilegeGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetIDCompleted(this, new PrivilegeGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetCode(LPCredential credential, string byDescription) {
            object[] results = this.Invoke("PrivilegeGetCode", new object[] {
                        credential,
                        byDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetCodeAsync(LPCredential credential, string byDescription) {
            this.PrivilegeGetCodeAsync(credential, byDescription, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetCodeAsync(LPCredential credential, string byDescription, object userState) {
            if ((this.PrivilegeGetCodeOperationCompleted == null)) {
                this.PrivilegeGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetCodeOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetCode", new object[] {
                        credential,
                        byDescription}, this.PrivilegeGetCodeOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetCodeOperationCompleted(object arg) {
            if ((this.PrivilegeGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetCodeCompleted(this, new PrivilegeGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("PrivilegeGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.PrivilegeGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.PrivilegeGetUniqueNameOperationCompleted == null)) {
                this.PrivilegeGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetUniqueName", new object[] {
                        credential,
                        byCode}, this.PrivilegeGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetUniqueNameOperationCompleted(object arg) {
            if ((this.PrivilegeGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetUniqueNameCompleted(this, new PrivilegeGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("PrivilegeExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeExistsAsync(LPCredential credential, string byCode) {
            this.PrivilegeExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.PrivilegeExistsOperationCompleted == null)) {
                this.PrivilegeExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeExistsOperationCompleted);
            }
            this.InvokeAsync("PrivilegeExists", new object[] {
                        credential,
                        byCode}, this.PrivilegeExistsOperationCompleted, userState);
        }
        
        private void OnPrivilegeExistsOperationCompleted(object arg) {
            if ((this.PrivilegeExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeExistsCompleted(this, new PrivilegeExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductPrivilege PrivilegeGet(LPCredential credential, string byCode) {
            object[] results = this.Invoke("PrivilegeGet", new object[] {
                        credential,
                        byCode});
            return ((ProductPrivilege)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetAsync(LPCredential credential, string byCode) {
            this.PrivilegeGetAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetAsync(LPCredential credential, string byCode, object userState) {
            if ((this.PrivilegeGetOperationCompleted == null)) {
                this.PrivilegeGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGet", new object[] {
                        credential,
                        byCode}, this.PrivilegeGetOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetOperationCompleted(object arg) {
            if ((this.PrivilegeGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetCompleted(this, new PrivilegeGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetByProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductPrivilege PrivilegeGetByProduct(string suiteCode, string productCode, string privilegeCode) {
            object[] results = this.Invoke("PrivilegeGetByProduct", new object[] {
                        suiteCode,
                        productCode,
                        privilegeCode});
            return ((ProductPrivilege)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetByProductAsync(string suiteCode, string productCode, string privilegeCode) {
            this.PrivilegeGetByProductAsync(suiteCode, productCode, privilegeCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetByProductAsync(string suiteCode, string productCode, string privilegeCode, object userState) {
            if ((this.PrivilegeGetByProductOperationCompleted == null)) {
                this.PrivilegeGetByProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetByProductOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetByProduct", new object[] {
                        suiteCode,
                        productCode,
                        privilegeCode}, this.PrivilegeGetByProductOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetByProductOperationCompleted(object arg) {
            if ((this.PrivilegeGetByProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetByProductCompleted(this, new PrivilegeGetByProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteTableName(LPCredential credential) {
            object[] results = this.Invoke("SuiteTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteTableNameAsync(LPCredential credential) {
            this.SuiteTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void SuiteTableNameAsync(LPCredential credential, object userState) {
            if ((this.SuiteTableNameOperationCompleted == null)) {
                this.SuiteTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteTableNameOperationCompleted);
            }
            this.InvokeAsync("SuiteTableName", new object[] {
                        credential}, this.SuiteTableNameOperationCompleted, userState);
        }
        
        private void OnSuiteTableNameOperationCompleted(object arg) {
            if ((this.SuiteTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteTableNameCompleted(this, new SuiteTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteList(LPCredential credential) {
            object[] results = this.Invoke("SuiteList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteListAsync(LPCredential credential) {
            this.SuiteListAsync(credential, null);
        }
        
        /// <remarks/>
        public void SuiteListAsync(LPCredential credential, object userState) {
            if ((this.SuiteListOperationCompleted == null)) {
                this.SuiteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteListOperationCompleted);
            }
            this.InvokeAsync("SuiteList", new object[] {
                        credential}, this.SuiteListOperationCompleted, userState);
        }
        
        private void OnSuiteListOperationCompleted(object arg) {
            if ((this.SuiteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteListCompleted(this, new SuiteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetID(LPCredential credential, string byCode) {
            object[] results = this.Invoke("SuiteGetID", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetIDAsync(LPCredential credential, string byCode) {
            this.SuiteGetIDAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteGetIDAsync(LPCredential credential, string byCode, object userState) {
            if ((this.SuiteGetIDOperationCompleted == null)) {
                this.SuiteGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetIDOperationCompleted);
            }
            this.InvokeAsync("SuiteGetID", new object[] {
                        credential,
                        byCode}, this.SuiteGetIDOperationCompleted, userState);
        }
        
        private void OnSuiteGetIDOperationCompleted(object arg) {
            if ((this.SuiteGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetIDCompleted(this, new SuiteGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetCode(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            object[] results = this.Invoke("SuiteGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            this.SuiteGetCodeAsync(credential, byDescription, andVersion, andBuild, null);
        }
        
        /// <remarks/>
        public void SuiteGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild, object userState) {
            if ((this.SuiteGetCodeOperationCompleted == null)) {
                this.SuiteGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetCodeOperationCompleted);
            }
            this.InvokeAsync("SuiteGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild}, this.SuiteGetCodeOperationCompleted, userState);
        }
        
        private void OnSuiteGetCodeOperationCompleted(object arg) {
            if ((this.SuiteGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetCodeCompleted(this, new SuiteGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("SuiteGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.SuiteGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.SuiteGetUniqueNameOperationCompleted == null)) {
                this.SuiteGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("SuiteGetUniqueName", new object[] {
                        credential,
                        byCode}, this.SuiteGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnSuiteGetUniqueNameOperationCompleted(object arg) {
            if ((this.SuiteGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetUniqueNameCompleted(this, new SuiteGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("SuiteExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteExistsAsync(LPCredential credential, string byCode) {
            this.SuiteExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.SuiteExistsOperationCompleted == null)) {
                this.SuiteExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteExistsOperationCompleted);
            }
            this.InvokeAsync("SuiteExists", new object[] {
                        credential,
                        byCode}, this.SuiteExistsOperationCompleted, userState);
        }
        
        private void OnSuiteExistsOperationCompleted(object arg) {
            if ((this.SuiteExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteExistsCompleted(this, new SuiteExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductTableName(LPCredential credential) {
            object[] results = this.Invoke("ProductTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductTableNameAsync(LPCredential credential) {
            this.ProductTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void ProductTableNameAsync(LPCredential credential, object userState) {
            if ((this.ProductTableNameOperationCompleted == null)) {
                this.ProductTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductTableNameOperationCompleted);
            }
            this.InvokeAsync("ProductTableName", new object[] {
                        credential}, this.ProductTableNameOperationCompleted, userState);
        }
        
        private void OnProductTableNameOperationCompleted(object arg) {
            if ((this.ProductTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductTableNameCompleted(this, new ProductTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductList(LPCredential credential) {
            object[] results = this.Invoke("ProductList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductListAsync(LPCredential credential) {
            this.ProductListAsync(credential, null);
        }
        
        /// <remarks/>
        public void ProductListAsync(LPCredential credential, object userState) {
            if ((this.ProductListOperationCompleted == null)) {
                this.ProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductListOperationCompleted);
            }
            this.InvokeAsync("ProductList", new object[] {
                        credential}, this.ProductListOperationCompleted, userState);
        }
        
        private void OnProductListOperationCompleted(object arg) {
            if ((this.ProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductListCompleted(this, new ProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetID(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ProductGetID", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetIDAsync(LPCredential credential, string byCode) {
            this.ProductGetIDAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ProductGetIDAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ProductGetIDOperationCompleted == null)) {
                this.ProductGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetIDOperationCompleted);
            }
            this.InvokeAsync("ProductGetID", new object[] {
                        credential,
                        byCode}, this.ProductGetIDOperationCompleted, userState);
        }
        
        private void OnProductGetIDOperationCompleted(object arg) {
            if ((this.ProductGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetIDCompleted(this, new ProductGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetCode(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            object[] results = this.Invoke("ProductGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            this.ProductGetCodeAsync(credential, byDescription, andVersion, andBuild, null);
        }
        
        /// <remarks/>
        public void ProductGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild, object userState) {
            if ((this.ProductGetCodeOperationCompleted == null)) {
                this.ProductGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetCodeOperationCompleted);
            }
            this.InvokeAsync("ProductGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild}, this.ProductGetCodeOperationCompleted, userState);
        }
        
        private void OnProductGetCodeOperationCompleted(object arg) {
            if ((this.ProductGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetCodeCompleted(this, new ProductGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ProductGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.ProductGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ProductGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ProductGetUniqueNameOperationCompleted == null)) {
                this.ProductGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("ProductGetUniqueName", new object[] {
                        credential,
                        byCode}, this.ProductGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnProductGetUniqueNameOperationCompleted(object arg) {
            if ((this.ProductGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetUniqueNameCompleted(this, new ProductGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ProductExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductExistsAsync(LPCredential credential, string byCode) {
            this.ProductExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ProductExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ProductExistsOperationCompleted == null)) {
                this.ProductExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductExistsOperationCompleted);
            }
            this.InvokeAsync("ProductExists", new object[] {
                        credential,
                        byCode}, this.ProductExistsOperationCompleted, userState);
        }
        
        private void OnProductExistsOperationCompleted(object arg) {
            if ((this.ProductExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductExistsCompleted(this, new ProductExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerTableName(LPCredential credential) {
            object[] results = this.Invoke("CustomerTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerTableNameAsync(LPCredential credential) {
            this.CustomerTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void CustomerTableNameAsync(LPCredential credential, object userState) {
            if ((this.CustomerTableNameOperationCompleted == null)) {
                this.CustomerTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerTableNameOperationCompleted);
            }
            this.InvokeAsync("CustomerTableName", new object[] {
                        credential}, this.CustomerTableNameOperationCompleted, userState);
        }
        
        private void OnCustomerTableNameOperationCompleted(object arg) {
            if ((this.CustomerTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerTableNameCompleted(this, new CustomerTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerList(LPCredential credential) {
            object[] results = this.Invoke("CustomerList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerListAsync(LPCredential credential) {
            this.CustomerListAsync(credential, null);
        }
        
        /// <remarks/>
        public void CustomerListAsync(LPCredential credential, object userState) {
            if ((this.CustomerListOperationCompleted == null)) {
                this.CustomerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerListOperationCompleted);
            }
            this.InvokeAsync("CustomerList", new object[] {
                        credential}, this.CustomerListOperationCompleted, userState);
        }
        
        private void OnCustomerListOperationCompleted(object arg) {
            if ((this.CustomerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerListCompleted(this, new CustomerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetID(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetID", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetIDAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            this.CustomerGetIDAsync(credential, byCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetIDAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetIDOperationCompleted == null)) {
                this.CustomerGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetIDOperationCompleted);
            }
            this.InvokeAsync("CustomerGetID", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerGetIDOperationCompleted, userState);
        }
        
        private void OnCustomerGetIDOperationCompleted(object arg) {
            if ((this.CustomerGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetIDCompleted(this, new CustomerGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetCode(LPCredential credential, string byTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetCode", new object[] {
                        credential,
                        byTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCodeAsync(LPCredential credential, string byTaxIdentifier, string orEmail) {
            this.CustomerGetCodeAsync(credential, byTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetCodeAsync(LPCredential credential, string byTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetCodeOperationCompleted == null)) {
                this.CustomerGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCodeOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCode", new object[] {
                        credential,
                        byTaxIdentifier,
                        orEmail}, this.CustomerGetCodeOperationCompleted, userState);
        }
        
        private void OnCustomerGetCodeOperationCompleted(object arg) {
            if ((this.CustomerGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCodeCompleted(this, new CustomerGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCodeByProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetCodeByProduct(string suiteCode, string productCode, string byTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetCodeByProduct", new object[] {
                        suiteCode,
                        productCode,
                        byTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductAsync(string suiteCode, string productCode, string byTaxIdentifier, string orEmail) {
            this.CustomerGetCodeByProductAsync(suiteCode, productCode, byTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductAsync(string suiteCode, string productCode, string byTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetCodeByProductOperationCompleted == null)) {
                this.CustomerGetCodeByProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCodeByProductOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCodeByProduct", new object[] {
                        suiteCode,
                        productCode,
                        byTaxIdentifier,
                        orEmail}, this.CustomerGetCodeByProductOperationCompleted, userState);
        }
        
        private void OnCustomerGetCodeByProductOperationCompleted(object arg) {
            if ((this.CustomerGetCodeByProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCodeByProductCompleted(this, new CustomerGetCodeByProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCodeByProductIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetCodeByProductIT(string suiteCode, string productCode, string PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerGetCodeByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductITAsync(string suiteCode, string productCode, string PartitaIVA, string _Email) {
            this.CustomerGetCodeByProductITAsync(suiteCode, productCode, PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductITAsync(string suiteCode, string productCode, string PartitaIVA, string _Email, object userState) {
            if ((this.CustomerGetCodeByProductITOperationCompleted == null)) {
                this.CustomerGetCodeByProductITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCodeByProductITOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCodeByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        PartitaIVA,
                        _Email}, this.CustomerGetCodeByProductITOperationCompleted, userState);
        }
        
        private void OnCustomerGetCodeByProductITOperationCompleted(object arg) {
            if ((this.CustomerGetCodeByProductITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCodeByProductITCompleted(this, new CustomerGetCodeByProductITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("CustomerGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.CustomerGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void CustomerGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.CustomerGetUniqueNameOperationCompleted == null)) {
                this.CustomerGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("CustomerGetUniqueName", new object[] {
                        credential,
                        byCode}, this.CustomerGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnCustomerGetUniqueNameOperationCompleted(object arg) {
            if ((this.CustomerGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetUniqueNameCompleted(this, new CustomerGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerExists(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerExists", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            this.CustomerExistsAsync(credential, byCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerExistsAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerExistsOperationCompleted == null)) {
                this.CustomerExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsOperationCompleted);
            }
            this.InvokeAsync("CustomerExists", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerExistsOperationCompleted, userState);
        }
        
        private void OnCustomerExistsOperationCompleted(object arg) {
            if ((this.CustomerExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsCompleted(this, new CustomerExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExistsByProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerExistsByProduct(string suiteCode, string productCode, string customerCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerExistsByProduct", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsByProductAsync(string suiteCode, string productCode, string customerCode, string orTaxIdentifier, string orEmail) {
            this.CustomerExistsByProductAsync(suiteCode, productCode, customerCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerExistsByProductAsync(string suiteCode, string productCode, string customerCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerExistsByProductOperationCompleted == null)) {
                this.CustomerExistsByProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsByProductOperationCompleted);
            }
            this.InvokeAsync("CustomerExistsByProduct", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerExistsByProductOperationCompleted, userState);
        }
        
        private void OnCustomerExistsByProductOperationCompleted(object arg) {
            if ((this.CustomerExistsByProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsByProductCompleted(this, new CustomerExistsByProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExistsByProductIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerExistsByProductIT(string suiteCode, string productCode, string customerCode, string _PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerExistsByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsByProductITAsync(string suiteCode, string productCode, string customerCode, string _PartitaIVA, string _Email) {
            this.CustomerExistsByProductITAsync(suiteCode, productCode, customerCode, _PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerExistsByProductITAsync(string suiteCode, string productCode, string customerCode, string _PartitaIVA, string _Email, object userState) {
            if ((this.CustomerExistsByProductITOperationCompleted == null)) {
                this.CustomerExistsByProductITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsByProductITOperationCompleted);
            }
            this.InvokeAsync("CustomerExistsByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email}, this.CustomerExistsByProductITOperationCompleted, userState);
        }
        
        private void OnCustomerExistsByProductITOperationCompleted(object arg) {
            if ((this.CustomerExistsByProductITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsByProductITCompleted(this, new CustomerExistsByProductITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerAdd", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerAdd(LPCredential credential, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            object[] results = this.Invoke("CustomerAdd", new object[] {
                        credential,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAddAsync(LPCredential credential, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            this.CustomerAddAsync(credential, description, taxIdentifier, email, address, town, zipCode, phone, fax, webSite, null);
        }
        
        /// <remarks/>
        public void CustomerAddAsync(LPCredential credential, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite, object userState) {
            if ((this.CustomerAddOperationCompleted == null)) {
                this.CustomerAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAddOperationCompleted);
            }
            this.InvokeAsync("CustomerAdd", new object[] {
                        credential,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite}, this.CustomerAddOperationCompleted, userState);
        }
        
        private void OnCustomerAddOperationCompleted(object arg) {
            if ((this.CustomerAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAddCompleted(this, new CustomerAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerRemove", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerRemove(LPCredential credential, string customerCode, string description, string taxIdentifier, string email) {
            object[] results = this.Invoke("CustomerRemove", new object[] {
                        credential,
                        customerCode,
                        description,
                        taxIdentifier,
                        email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerRemoveAsync(LPCredential credential, string customerCode, string description, string taxIdentifier, string email) {
            this.CustomerRemoveAsync(credential, customerCode, description, taxIdentifier, email, null);
        }
        
        /// <remarks/>
        public void CustomerRemoveAsync(LPCredential credential, string customerCode, string description, string taxIdentifier, string email, object userState) {
            if ((this.CustomerRemoveOperationCompleted == null)) {
                this.CustomerRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerRemoveOperationCompleted);
            }
            this.InvokeAsync("CustomerRemove", new object[] {
                        credential,
                        customerCode,
                        description,
                        taxIdentifier,
                        email}, this.CustomerRemoveOperationCompleted, userState);
        }
        
        private void OnCustomerRemoveOperationCompleted(object arg) {
            if ((this.CustomerRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerRemoveCompleted(this, new CustomerRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignUpForDemo", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSignUpForDemo(string suiteCode, string productCode, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            object[] results = this.Invoke("CustomerSignUpForDemo", new object[] {
                        suiteCode,
                        productCode,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoAsync(string suiteCode, string productCode, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            this.CustomerSignUpForDemoAsync(suiteCode, productCode, description, taxIdentifier, email, address, town, zipCode, phone, fax, webSite, null);
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoAsync(string suiteCode, string productCode, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite, object userState) {
            if ((this.CustomerSignUpForDemoOperationCompleted == null)) {
                this.CustomerSignUpForDemoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignUpForDemoOperationCompleted);
            }
            this.InvokeAsync("CustomerSignUpForDemo", new object[] {
                        suiteCode,
                        productCode,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite}, this.CustomerSignUpForDemoOperationCompleted, userState);
        }
        
        private void OnCustomerSignUpForDemoOperationCompleted(object arg) {
            if ((this.CustomerSignUpForDemoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignUpForDemoCompleted(this, new CustomerSignUpForDemoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignUpForDemoIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSignUpForDemoIT(string suiteCode, string productCode, string RagioneSociale, string PartitaIVA, string Email, string _Indirizzo, string _Comune, string _CAP, string _Telefono, string _Fax, string _SitoWeb) {
            object[] results = this.Invoke("CustomerSignUpForDemoIT", new object[] {
                        suiteCode,
                        productCode,
                        RagioneSociale,
                        PartitaIVA,
                        Email,
                        _Indirizzo,
                        _Comune,
                        _CAP,
                        _Telefono,
                        _Fax,
                        _SitoWeb});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoITAsync(string suiteCode, string productCode, string RagioneSociale, string PartitaIVA, string Email, string _Indirizzo, string _Comune, string _CAP, string _Telefono, string _Fax, string _SitoWeb) {
            this.CustomerSignUpForDemoITAsync(suiteCode, productCode, RagioneSociale, PartitaIVA, Email, _Indirizzo, _Comune, _CAP, _Telefono, _Fax, _SitoWeb, null);
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoITAsync(string suiteCode, string productCode, string RagioneSociale, string PartitaIVA, string Email, string _Indirizzo, string _Comune, string _CAP, string _Telefono, string _Fax, string _SitoWeb, object userState) {
            if ((this.CustomerSignUpForDemoITOperationCompleted == null)) {
                this.CustomerSignUpForDemoITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignUpForDemoITOperationCompleted);
            }
            this.InvokeAsync("CustomerSignUpForDemoIT", new object[] {
                        suiteCode,
                        productCode,
                        RagioneSociale,
                        PartitaIVA,
                        Email,
                        _Indirizzo,
                        _Comune,
                        _CAP,
                        _Telefono,
                        _Fax,
                        _SitoWeb}, this.CustomerSignUpForDemoITOperationCompleted, userState);
        }
        
        private void OnCustomerSignUpForDemoITOperationCompleted(object arg) {
            if ((this.CustomerSignUpForDemoITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignUpForDemoITCompleted(this, new CustomerSignUpForDemoITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerActivate", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerActivate(LPCredential credential, string customerCode, System.DateTime activeUntil) {
            object[] results = this.Invoke("CustomerActivate", new object[] {
                        credential,
                        customerCode,
                        activeUntil});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerActivateAsync(LPCredential credential, string customerCode, System.DateTime activeUntil) {
            this.CustomerActivateAsync(credential, customerCode, activeUntil, null);
        }
        
        /// <remarks/>
        public void CustomerActivateAsync(LPCredential credential, string customerCode, System.DateTime activeUntil, object userState) {
            if ((this.CustomerActivateOperationCompleted == null)) {
                this.CustomerActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerActivateOperationCompleted);
            }
            this.InvokeAsync("CustomerActivate", new object[] {
                        credential,
                        customerCode,
                        activeUntil}, this.CustomerActivateOperationCompleted, userState);
        }
        
        private void OnCustomerActivateOperationCompleted(object arg) {
            if ((this.CustomerActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerActivateCompleted(this, new CustomerActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerDeactivate", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerDeactivate(LPCredential credential, string customerCode) {
            object[] results = this.Invoke("CustomerDeactivate", new object[] {
                        credential,
                        customerCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerDeactivateAsync(LPCredential credential, string customerCode) {
            this.CustomerDeactivateAsync(credential, customerCode, null);
        }
        
        /// <remarks/>
        public void CustomerDeactivateAsync(LPCredential credential, string customerCode, object userState) {
            if ((this.CustomerDeactivateOperationCompleted == null)) {
                this.CustomerDeactivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerDeactivateOperationCompleted);
            }
            this.InvokeAsync("CustomerDeactivate", new object[] {
                        credential,
                        customerCode}, this.CustomerDeactivateOperationCompleted, userState);
        }
        
        private void OnCustomerDeactivateOperationCompleted(object arg) {
            if ((this.CustomerDeactivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerDeactivateCompleted(this, new CustomerDeactivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerActivationsGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerActivationsGet(string customerCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerActivationsGet", new object[] {
                        customerCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerActivationsGetAsync(string customerCode, string orTaxIdentifier, string orEmail) {
            this.CustomerActivationsGetAsync(customerCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerActivationsGetAsync(string customerCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerActivationsGetOperationCompleted == null)) {
                this.CustomerActivationsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerActivationsGetOperationCompleted);
            }
            this.InvokeAsync("CustomerActivationsGet", new object[] {
                        customerCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerActivationsGetOperationCompleted, userState);
        }
        
        private void OnCustomerActivationsGetOperationCompleted(object arg) {
            if ((this.CustomerActivationsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerActivationsGetCompleted(this, new CustomerActivationsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSuiteActivationsGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSuiteActivationsGet(string bySuiteCode, string customerCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerSuiteActivationsGet", new object[] {
                        bySuiteCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetAsync(string bySuiteCode, string customerCode, string orTaxIdentifier, string orEmail) {
            this.CustomerSuiteActivationsGetAsync(bySuiteCode, customerCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetAsync(string bySuiteCode, string customerCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerSuiteActivationsGetOperationCompleted == null)) {
                this.CustomerSuiteActivationsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSuiteActivationsGetOperationCompleted);
            }
            this.InvokeAsync("CustomerSuiteActivationsGet", new object[] {
                        bySuiteCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerSuiteActivationsGetOperationCompleted, userState);
        }
        
        private void OnCustomerSuiteActivationsGetOperationCompleted(object arg) {
            if ((this.CustomerSuiteActivationsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSuiteActivationsGetCompleted(this, new CustomerSuiteActivationsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSuiteActivationsGetIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSuiteActivationsGetIT(string suiteCode, string customerCode, string _PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerSuiteActivationsGetIT", new object[] {
                        suiteCode,
                        customerCode,
                        _PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetITAsync(string suiteCode, string customerCode, string _PartitaIVA, string _Email) {
            this.CustomerSuiteActivationsGetITAsync(suiteCode, customerCode, _PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetITAsync(string suiteCode, string customerCode, string _PartitaIVA, string _Email, object userState) {
            if ((this.CustomerSuiteActivationsGetITOperationCompleted == null)) {
                this.CustomerSuiteActivationsGetITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSuiteActivationsGetITOperationCompleted);
            }
            this.InvokeAsync("CustomerSuiteActivationsGetIT", new object[] {
                        suiteCode,
                        customerCode,
                        _PartitaIVA,
                        _Email}, this.CustomerSuiteActivationsGetITOperationCompleted, userState);
        }
        
        private void OnCustomerSuiteActivationsGetITOperationCompleted(object arg) {
            if ((this.CustomerSuiteActivationsGetITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSuiteActivationsGetITCompleted(this, new CustomerSuiteActivationsGetITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerProductActivationsGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerProductActivationsGet(string byProductCode, string byCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerProductActivationsGet", new object[] {
                        byProductCode,
                        byCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetAsync(string byProductCode, string byCode, string orTaxIdentifier, string orEmail) {
            this.CustomerProductActivationsGetAsync(byProductCode, byCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetAsync(string byProductCode, string byCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerProductActivationsGetOperationCompleted == null)) {
                this.CustomerProductActivationsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerProductActivationsGetOperationCompleted);
            }
            this.InvokeAsync("CustomerProductActivationsGet", new object[] {
                        byProductCode,
                        byCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerProductActivationsGetOperationCompleted, userState);
        }
        
        private void OnCustomerProductActivationsGetOperationCompleted(object arg) {
            if ((this.CustomerProductActivationsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerProductActivationsGetCompleted(this, new CustomerProductActivationsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerProductActivationsGetIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerProductActivationsGetIT(string productCode, string customerCode, string _PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerProductActivationsGetIT", new object[] {
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetITAsync(string productCode, string customerCode, string _PartitaIVA, string _Email) {
            this.CustomerProductActivationsGetITAsync(productCode, customerCode, _PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetITAsync(string productCode, string customerCode, string _PartitaIVA, string _Email, object userState) {
            if ((this.CustomerProductActivationsGetITOperationCompleted == null)) {
                this.CustomerProductActivationsGetITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerProductActivationsGetITOperationCompleted);
            }
            this.InvokeAsync("CustomerProductActivationsGetIT", new object[] {
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email}, this.CustomerProductActivationsGetITOperationCompleted, userState);
        }
        
        private void OnCustomerProductActivationsGetITOperationCompleted(object arg) {
            if ((this.CustomerProductActivationsGetITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerProductActivationsGetITCompleted(this, new CustomerProductActivationsGetITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationTableName(LPCredential credential) {
            object[] results = this.Invoke("ActivationTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationTableNameAsync(LPCredential credential) {
            this.ActivationTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void ActivationTableNameAsync(LPCredential credential, object userState) {
            if ((this.ActivationTableNameOperationCompleted == null)) {
                this.ActivationTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationTableNameOperationCompleted);
            }
            this.InvokeAsync("ActivationTableName", new object[] {
                        credential}, this.ActivationTableNameOperationCompleted, userState);
        }
        
        private void OnActivationTableNameOperationCompleted(object arg) {
            if ((this.ActivationTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationTableNameCompleted(this, new ActivationTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationList(LPCredential credential) {
            object[] results = this.Invoke("ActivationList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationListAsync(LPCredential credential) {
            this.ActivationListAsync(credential, null);
        }
        
        /// <remarks/>
        public void ActivationListAsync(LPCredential credential, object userState) {
            if ((this.ActivationListOperationCompleted == null)) {
                this.ActivationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationListOperationCompleted);
            }
            this.InvokeAsync("ActivationList", new object[] {
                        credential}, this.ActivationListOperationCompleted, userState);
        }
        
        private void OnActivationListOperationCompleted(object arg) {
            if ((this.ActivationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationListCompleted(this, new ActivationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetID(LPCredential credential, string byCode, string orKey) {
            object[] results = this.Invoke("ActivationGetID", new object[] {
                        credential,
                        byCode,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetIDAsync(LPCredential credential, string byCode, string orKey) {
            this.ActivationGetIDAsync(credential, byCode, orKey, null);
        }
        
        /// <remarks/>
        public void ActivationGetIDAsync(LPCredential credential, string byCode, string orKey, object userState) {
            if ((this.ActivationGetIDOperationCompleted == null)) {
                this.ActivationGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetIDOperationCompleted);
            }
            this.InvokeAsync("ActivationGetID", new object[] {
                        credential,
                        byCode,
                        orKey}, this.ActivationGetIDOperationCompleted, userState);
        }
        
        private void OnActivationGetIDOperationCompleted(object arg) {
            if ((this.ActivationGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetIDCompleted(this, new ActivationGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetIDByCustomerProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetIDByCustomerProduct(LPCredential credential, string byCustomerID, string byProductID) {
            object[] results = this.Invoke("ActivationGetIDByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetIDByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID) {
            this.ActivationGetIDByCustomerProductAsync(credential, byCustomerID, byProductID, null);
        }
        
        /// <remarks/>
        public void ActivationGetIDByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID, object userState) {
            if ((this.ActivationGetIDByCustomerProductOperationCompleted == null)) {
                this.ActivationGetIDByCustomerProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetIDByCustomerProductOperationCompleted);
            }
            this.InvokeAsync("ActivationGetIDByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID}, this.ActivationGetIDByCustomerProductOperationCompleted, userState);
        }
        
        private void OnActivationGetIDByCustomerProductOperationCompleted(object arg) {
            if ((this.ActivationGetIDByCustomerProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetIDByCustomerProductCompleted(this, new ActivationGetIDByCustomerProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetCode(LPCredential credential, string byKey) {
            object[] results = this.Invoke("ActivationGetCode", new object[] {
                        credential,
                        byKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetCodeAsync(LPCredential credential, string byKey) {
            this.ActivationGetCodeAsync(credential, byKey, null);
        }
        
        /// <remarks/>
        public void ActivationGetCodeAsync(LPCredential credential, string byKey, object userState) {
            if ((this.ActivationGetCodeOperationCompleted == null)) {
                this.ActivationGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetCodeOperationCompleted);
            }
            this.InvokeAsync("ActivationGetCode", new object[] {
                        credential,
                        byKey}, this.ActivationGetCodeOperationCompleted, userState);
        }
        
        private void OnActivationGetCodeOperationCompleted(object arg) {
            if ((this.ActivationGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetCodeCompleted(this, new ActivationGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ActivationGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.ActivationGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ActivationGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ActivationGetUniqueNameOperationCompleted == null)) {
                this.ActivationGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("ActivationGetUniqueName", new object[] {
                        credential,
                        byCode}, this.ActivationGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnActivationGetUniqueNameOperationCompleted(object arg) {
            if ((this.ActivationGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetUniqueNameCompleted(this, new ActivationGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ActivationExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationExistsAsync(LPCredential credential, string byCode) {
            this.ActivationExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ActivationExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ActivationExistsOperationCompleted == null)) {
                this.ActivationExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationExistsOperationCompleted);
            }
            this.InvokeAsync("ActivationExists", new object[] {
                        credential,
                        byCode}, this.ActivationExistsOperationCompleted, userState);
        }
        
        private void OnActivationExistsOperationCompleted(object arg) {
            if ((this.ActivationExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationExistsCompleted(this, new ActivationExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationExistsByCustomerProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationExistsByCustomerProduct(LPCredential credential, string byCustomerID, string byProductID) {
            object[] results = this.Invoke("ActivationExistsByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationExistsByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID) {
            this.ActivationExistsByCustomerProductAsync(credential, byCustomerID, byProductID, null);
        }
        
        /// <remarks/>
        public void ActivationExistsByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID, object userState) {
            if ((this.ActivationExistsByCustomerProductOperationCompleted == null)) {
                this.ActivationExistsByCustomerProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationExistsByCustomerProductOperationCompleted);
            }
            this.InvokeAsync("ActivationExistsByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID}, this.ActivationExistsByCustomerProductOperationCompleted, userState);
        }
        
        private void OnActivationExistsByCustomerProductOperationCompleted(object arg) {
            if ((this.ActivationExistsByCustomerProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationExistsByCustomerProductCompleted(this, new ActivationExistsByCustomerProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyTableName(LPCredential credential) {
            object[] results = this.Invoke("KeyTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyTableNameAsync(LPCredential credential) {
            this.KeyTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void KeyTableNameAsync(LPCredential credential, object userState) {
            if ((this.KeyTableNameOperationCompleted == null)) {
                this.KeyTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyTableNameOperationCompleted);
            }
            this.InvokeAsync("KeyTableName", new object[] {
                        credential}, this.KeyTableNameOperationCompleted, userState);
        }
        
        private void OnKeyTableNameOperationCompleted(object arg) {
            if ((this.KeyTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyTableNameCompleted(this, new KeyTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyList(LPCredential credential) {
            object[] results = this.Invoke("KeyList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyListAsync(LPCredential credential) {
            this.KeyListAsync(credential, null);
        }
        
        /// <remarks/>
        public void KeyListAsync(LPCredential credential, object userState) {
            if ((this.KeyListOperationCompleted == null)) {
                this.KeyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyListOperationCompleted);
            }
            this.InvokeAsync("KeyList", new object[] {
                        credential}, this.KeyListOperationCompleted, userState);
        }
        
        private void OnKeyListOperationCompleted(object arg) {
            if ((this.KeyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyListCompleted(this, new KeyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetID(LPCredential credential, string byCode, string orKey) {
            object[] results = this.Invoke("KeyGetID", new object[] {
                        credential,
                        byCode,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetIDAsync(LPCredential credential, string byCode, string orKey) {
            this.KeyGetIDAsync(credential, byCode, orKey, null);
        }
        
        /// <remarks/>
        public void KeyGetIDAsync(LPCredential credential, string byCode, string orKey, object userState) {
            if ((this.KeyGetIDOperationCompleted == null)) {
                this.KeyGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetIDOperationCompleted);
            }
            this.InvokeAsync("KeyGetID", new object[] {
                        credential,
                        byCode,
                        orKey}, this.KeyGetIDOperationCompleted, userState);
        }
        
        private void OnKeyGetIDOperationCompleted(object arg) {
            if ((this.KeyGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetIDCompleted(this, new KeyGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetCode(LPCredential credential, string byKey) {
            object[] results = this.Invoke("KeyGetCode", new object[] {
                        credential,
                        byKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetCodeAsync(LPCredential credential, string byKey) {
            this.KeyGetCodeAsync(credential, byKey, null);
        }
        
        /// <remarks/>
        public void KeyGetCodeAsync(LPCredential credential, string byKey, object userState) {
            if ((this.KeyGetCodeOperationCompleted == null)) {
                this.KeyGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetCodeOperationCompleted);
            }
            this.InvokeAsync("KeyGetCode", new object[] {
                        credential,
                        byKey}, this.KeyGetCodeOperationCompleted, userState);
        }
        
        private void OnKeyGetCodeOperationCompleted(object arg) {
            if ((this.KeyGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetCodeCompleted(this, new KeyGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("KeyGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.KeyGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void KeyGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.KeyGetUniqueNameOperationCompleted == null)) {
                this.KeyGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("KeyGetUniqueName", new object[] {
                        credential,
                        byCode}, this.KeyGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnKeyGetUniqueNameOperationCompleted(object arg) {
            if ((this.KeyGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetUniqueNameCompleted(this, new KeyGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("KeyExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyExistsAsync(LPCredential credential, string byCode) {
            this.KeyExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void KeyExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.KeyExistsOperationCompleted == null)) {
                this.KeyExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyExistsOperationCompleted);
            }
            this.InvokeAsync("KeyExists", new object[] {
                        credential,
                        byCode}, this.KeyExistsOperationCompleted, userState);
        }
        
        private void OnKeyExistsOperationCompleted(object arg) {
            if ((this.KeyExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyExistsCompleted(this, new KeyExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataBuild", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyData KeyDataBuild(string customerCode, string productCode, string privilegeCode, System.DateTime activeFrom, System.DateTime activeUntil, string machineCPU, string machineBASE, string machineMAC) {
            object[] results = this.Invoke("KeyDataBuild", new object[] {
                        customerCode,
                        productCode,
                        privilegeCode,
                        activeFrom,
                        activeUntil,
                        machineCPU,
                        machineBASE,
                        machineMAC});
            return ((KeyData)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataBuildAsync(string customerCode, string productCode, string privilegeCode, System.DateTime activeFrom, System.DateTime activeUntil, string machineCPU, string machineBASE, string machineMAC) {
            this.KeyDataBuildAsync(customerCode, productCode, privilegeCode, activeFrom, activeUntil, machineCPU, machineBASE, machineMAC, null);
        }
        
        /// <remarks/>
        public void KeyDataBuildAsync(string customerCode, string productCode, string privilegeCode, System.DateTime activeFrom, System.DateTime activeUntil, string machineCPU, string machineBASE, string machineMAC, object userState) {
            if ((this.KeyDataBuildOperationCompleted == null)) {
                this.KeyDataBuildOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataBuildOperationCompleted);
            }
            this.InvokeAsync("KeyDataBuild", new object[] {
                        customerCode,
                        productCode,
                        privilegeCode,
                        activeFrom,
                        activeUntil,
                        machineCPU,
                        machineBASE,
                        machineMAC}, this.KeyDataBuildOperationCompleted, userState);
        }
        
        private void OnKeyDataBuildOperationCompleted(object arg) {
            if ((this.KeyDataBuildCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataBuildCompleted(this, new KeyDataBuildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataBuildIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyData KeyDataBuildIT(string CodiceCliente, string CodiceProdotto, string CodicePrivilegio, System.DateTime AttivoDa, System.DateTime AttivoFinoA, string CPU, string BASE, string MAC) {
            object[] results = this.Invoke("KeyDataBuildIT", new object[] {
                        CodiceCliente,
                        CodiceProdotto,
                        CodicePrivilegio,
                        AttivoDa,
                        AttivoFinoA,
                        CPU,
                        BASE,
                        MAC});
            return ((KeyData)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataBuildITAsync(string CodiceCliente, string CodiceProdotto, string CodicePrivilegio, System.DateTime AttivoDa, System.DateTime AttivoFinoA, string CPU, string BASE, string MAC) {
            this.KeyDataBuildITAsync(CodiceCliente, CodiceProdotto, CodicePrivilegio, AttivoDa, AttivoFinoA, CPU, BASE, MAC, null);
        }
        
        /// <remarks/>
        public void KeyDataBuildITAsync(string CodiceCliente, string CodiceProdotto, string CodicePrivilegio, System.DateTime AttivoDa, System.DateTime AttivoFinoA, string CPU, string BASE, string MAC, object userState) {
            if ((this.KeyDataBuildITOperationCompleted == null)) {
                this.KeyDataBuildITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataBuildITOperationCompleted);
            }
            this.InvokeAsync("KeyDataBuildIT", new object[] {
                        CodiceCliente,
                        CodiceProdotto,
                        CodicePrivilegio,
                        AttivoDa,
                        AttivoFinoA,
                        CPU,
                        BASE,
                        MAC}, this.KeyDataBuildITOperationCompleted, userState);
        }
        
        private void OnKeyDataBuildITOperationCompleted(object arg) {
            if ((this.KeyDataBuildITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataBuildITCompleted(this, new KeyDataBuildITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataExists(LPCredential credential, KeyData data) {
            object[] results = this.Invoke("KeyDataExists", new object[] {
                        credential,
                        data});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataExistsAsync(LPCredential credential, KeyData data) {
            this.KeyDataExistsAsync(credential, data, null);
        }
        
        /// <remarks/>
        public void KeyDataExistsAsync(LPCredential credential, KeyData data, object userState) {
            if ((this.KeyDataExistsOperationCompleted == null)) {
                this.KeyDataExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataExistsOperationCompleted);
            }
            this.InvokeAsync("KeyDataExists", new object[] {
                        credential,
                        data}, this.KeyDataExistsOperationCompleted, userState);
        }
        
        private void OnKeyDataExistsOperationCompleted(object arg) {
            if ((this.KeyDataExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataExistsCompleted(this, new KeyDataExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataExistsByText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataExistsByText(LPCredential credential, string keyDataText, bool encrypted) {
            object[] results = this.Invoke("KeyDataExistsByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataExistsByTextAsync(LPCredential credential, string keyDataText, bool encrypted) {
            this.KeyDataExistsByTextAsync(credential, keyDataText, encrypted, null);
        }
        
        /// <remarks/>
        public void KeyDataExistsByTextAsync(LPCredential credential, string keyDataText, bool encrypted, object userState) {
            if ((this.KeyDataExistsByTextOperationCompleted == null)) {
                this.KeyDataExistsByTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataExistsByTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataExistsByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted}, this.KeyDataExistsByTextOperationCompleted, userState);
        }
        
        private void OnKeyDataExistsByTextOperationCompleted(object arg) {
            if ((this.KeyDataExistsByTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataExistsByTextCompleted(this, new KeyDataExistsByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataExistsByEncrypedText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataExistsByEncrypedText(string encryptedDataText) {
            object[] results = this.Invoke("KeyDataExistsByEncrypedText", new object[] {
                        encryptedDataText});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataExistsByEncrypedTextAsync(string encryptedDataText) {
            this.KeyDataExistsByEncrypedTextAsync(encryptedDataText, null);
        }
        
        /// <remarks/>
        public void KeyDataExistsByEncrypedTextAsync(string encryptedDataText, object userState) {
            if ((this.KeyDataExistsByEncrypedTextOperationCompleted == null)) {
                this.KeyDataExistsByEncrypedTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataExistsByEncrypedTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataExistsByEncrypedText", new object[] {
                        encryptedDataText}, this.KeyDataExistsByEncrypedTextOperationCompleted, userState);
        }
        
        private void OnKeyDataExistsByEncrypedTextOperationCompleted(object arg) {
            if ((this.KeyDataExistsByEncrypedTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataExistsByEncrypedTextCompleted(this, new KeyDataExistsByEncrypedTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataValidate", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataValidate(LPCredential credential, KeyData data) {
            object[] results = this.Invoke("KeyDataValidate", new object[] {
                        credential,
                        data});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataValidateAsync(LPCredential credential, KeyData data) {
            this.KeyDataValidateAsync(credential, data, null);
        }
        
        /// <remarks/>
        public void KeyDataValidateAsync(LPCredential credential, KeyData data, object userState) {
            if ((this.KeyDataValidateOperationCompleted == null)) {
                this.KeyDataValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataValidateOperationCompleted);
            }
            this.InvokeAsync("KeyDataValidate", new object[] {
                        credential,
                        data}, this.KeyDataValidateOperationCompleted, userState);
        }
        
        private void OnKeyDataValidateOperationCompleted(object arg) {
            if ((this.KeyDataValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataValidateCompleted(this, new KeyDataValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataValidateByText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataValidateByText(LPCredential credential, string keyDataText, bool encrypted) {
            object[] results = this.Invoke("KeyDataValidateByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataValidateByTextAsync(LPCredential credential, string keyDataText, bool encrypted) {
            this.KeyDataValidateByTextAsync(credential, keyDataText, encrypted, null);
        }
        
        /// <remarks/>
        public void KeyDataValidateByTextAsync(LPCredential credential, string keyDataText, bool encrypted, object userState) {
            if ((this.KeyDataValidateByTextOperationCompleted == null)) {
                this.KeyDataValidateByTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataValidateByTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataValidateByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted}, this.KeyDataValidateByTextOperationCompleted, userState);
        }
        
        private void OnKeyDataValidateByTextOperationCompleted(object arg) {
            if ((this.KeyDataValidateByTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataValidateByTextCompleted(this, new KeyDataValidateByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPMessage {
        
        private string idField;
        
        private System.DateTime timeStampField;
        
        private string versionField;
        
        private string operationField;
        
        private LPValue resultField;
        
        private LPError errorField;
        
        private string emptyStringField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        public LPValue Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public LPError Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyString {
            get {
                return this.emptyStringField;
            }
            set {
                this.emptyStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPValue {
        
        private object valueField;
        
        private bool existsField;
        
        private string typeNameField;
        
        private string innerTypeNameField;
        
        private bool isNullField;
        
        private bool isDBNullField;
        
        private bool isEmptyField;
        
        private bool isStringField;
        
        private bool isInt16Field;
        
        private bool isInt32Field;
        
        private bool isInt64Field;
        
        private bool isDateTimeField;
        
        private bool isBooleanField;
        
        private bool isDataSetField;
        
        private bool isDataTableField;
        
        private bool isDataViewField;
        
        private bool isXmlDataField;
        
        private bool isGuidField;
        
        private string emptyTypeNameField;
        
        private string emptyStringField;
        
        private short emptyInt16Field;
        
        private int emptyInt32Field;
        
        private long emptyInt64Field;
        
        private System.DateTime emptyDateTimeField;
        
        private LPBoolean emptyBooleanField;
        
        private string emptyXmlDataField;
        
        private string asStringField;
        
        private System.Nullable<short> asInt16Field;
        
        private System.Nullable<int> asInt32Field;
        
        private System.Nullable<long> asInt64Field;
        
        private System.Nullable<System.DateTime> asDateTimeField;
        
        private System.Nullable<LPBoolean> asBooleanField;
        
        private System.Data.DataSet asDataSetField;
        
        private System.Data.DataTable asDataTableField;
        
        private System.Guid asGuidField;
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool Exists {
            get {
                return this.existsField;
            }
            set {
                this.existsField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string InnerTypeName {
            get {
                return this.innerTypeNameField;
            }
            set {
                this.innerTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNull {
            get {
                return this.isNullField;
            }
            set {
                this.isNullField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDBNull {
            get {
                return this.isDBNullField;
            }
            set {
                this.isDBNullField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEmpty {
            get {
                return this.isEmptyField;
            }
            set {
                this.isEmptyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsString {
            get {
                return this.isStringField;
            }
            set {
                this.isStringField = value;
            }
        }
        
        /// <remarks/>
        public bool IsInt16 {
            get {
                return this.isInt16Field;
            }
            set {
                this.isInt16Field = value;
            }
        }
        
        /// <remarks/>
        public bool IsInt32 {
            get {
                return this.isInt32Field;
            }
            set {
                this.isInt32Field = value;
            }
        }
        
        /// <remarks/>
        public bool IsInt64 {
            get {
                return this.isInt64Field;
            }
            set {
                this.isInt64Field = value;
            }
        }
        
        /// <remarks/>
        public bool IsDateTime {
            get {
                return this.isDateTimeField;
            }
            set {
                this.isDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsBoolean {
            get {
                return this.isBooleanField;
            }
            set {
                this.isBooleanField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDataSet {
            get {
                return this.isDataSetField;
            }
            set {
                this.isDataSetField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDataTable {
            get {
                return this.isDataTableField;
            }
            set {
                this.isDataTableField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDataView {
            get {
                return this.isDataViewField;
            }
            set {
                this.isDataViewField = value;
            }
        }
        
        /// <remarks/>
        public bool IsXmlData {
            get {
                return this.isXmlDataField;
            }
            set {
                this.isXmlDataField = value;
            }
        }
        
        /// <remarks/>
        public bool IsGuid {
            get {
                return this.isGuidField;
            }
            set {
                this.isGuidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyTypeName {
            get {
                return this.emptyTypeNameField;
            }
            set {
                this.emptyTypeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyString {
            get {
                return this.emptyStringField;
            }
            set {
                this.emptyStringField = value;
            }
        }
        
        /// <remarks/>
        public short EmptyInt16 {
            get {
                return this.emptyInt16Field;
            }
            set {
                this.emptyInt16Field = value;
            }
        }
        
        /// <remarks/>
        public int EmptyInt32 {
            get {
                return this.emptyInt32Field;
            }
            set {
                this.emptyInt32Field = value;
            }
        }
        
        /// <remarks/>
        public long EmptyInt64 {
            get {
                return this.emptyInt64Field;
            }
            set {
                this.emptyInt64Field = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EmptyDateTime {
            get {
                return this.emptyDateTimeField;
            }
            set {
                this.emptyDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public LPBoolean EmptyBoolean {
            get {
                return this.emptyBooleanField;
            }
            set {
                this.emptyBooleanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyXmlData {
            get {
                return this.emptyXmlDataField;
            }
            set {
                this.emptyXmlDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AsString {
            get {
                return this.asStringField;
            }
            set {
                this.asStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> AsInt16 {
            get {
                return this.asInt16Field;
            }
            set {
                this.asInt16Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> AsInt32 {
            get {
                return this.asInt32Field;
            }
            set {
                this.asInt32Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> AsInt64 {
            get {
                return this.asInt64Field;
            }
            set {
                this.asInt64Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AsDateTime {
            get {
                return this.asDateTimeField;
            }
            set {
                this.asDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<LPBoolean> AsBoolean {
            get {
                return this.asBooleanField;
            }
            set {
                this.asBooleanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AsDataSet {
            get {
                return this.asDataSetField;
            }
            set {
                this.asDataSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable AsDataTable {
            get {
                return this.asDataTableField;
            }
            set {
                this.asDataTableField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid AsGuid {
            get {
                return this.asGuidField;
            }
            set {
                this.asGuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class KeyData {
        
        private System.DateTime timeStampField;
        
        private string keyField;
        
        private System.Guid customerCodeField;
        
        private System.Guid productCodeField;
        
        private System.Guid privilegeCodeField;
        
        private System.DateTime activeFromField;
        
        private System.DateTime activeUntilField;
        
        private string machineCPUField;
        
        private string machineBASEField;
        
        private string machineMACField;
        
        private string machineBIOSField;
        
        private string machineDISKField;
        
        private string machineVIDEOField;
        
        /// <remarks/>
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid CustomerCode {
            get {
                return this.customerCodeField;
            }
            set {
                this.customerCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ProductCode {
            get {
                return this.productCodeField;
            }
            set {
                this.productCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid PrivilegeCode {
            get {
                return this.privilegeCodeField;
            }
            set {
                this.privilegeCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActiveFrom {
            get {
                return this.activeFromField;
            }
            set {
                this.activeFromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActiveUntil {
            get {
                return this.activeUntilField;
            }
            set {
                this.activeUntilField = value;
            }
        }
        
        /// <remarks/>
        public string MachineCPU {
            get {
                return this.machineCPUField;
            }
            set {
                this.machineCPUField = value;
            }
        }
        
        /// <remarks/>
        public string MachineBASE {
            get {
                return this.machineBASEField;
            }
            set {
                this.machineBASEField = value;
            }
        }
        
        /// <remarks/>
        public string MachineMAC {
            get {
                return this.machineMACField;
            }
            set {
                this.machineMACField = value;
            }
        }
        
        /// <remarks/>
        public string MachineBIOS {
            get {
                return this.machineBIOSField;
            }
            set {
                this.machineBIOSField = value;
            }
        }
        
        /// <remarks/>
        public string MachineDISK {
            get {
                return this.machineDISKField;
            }
            set {
                this.machineDISKField = value;
            }
        }
        
        /// <remarks/>
        public string MachineVIDEO {
            get {
                return this.machineVIDEOField;
            }
            set {
                this.machineVIDEOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPCredential {
        
        private string idField;
        
        private System.DateTime timeStampField;
        
        private string versionField;
        
        private string loginField;
        
        private string passwordField;
        
        private string contextField;
        
        private string magicCodeField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Context {
            get {
                return this.contextField;
            }
            set {
                this.contextField = value;
            }
        }
        
        /// <remarks/>
        public string MagicCode {
            get {
                return this.magicCodeField;
            }
            set {
                this.magicCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPError {
        
        private bool existsField;
        
        private string typeNameField;
        
        private string messageField;
        
        private string textField;
        
        private string sourceField;
        
        private string stackField;
        
        private string emptyStringField;
        
        /// <remarks/>
        public bool Exists {
            get {
                return this.existsField;
            }
            set {
                this.existsField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string Stack {
            get {
                return this.stackField;
            }
            set {
                this.stackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyString {
            get {
                return this.emptyStringField;
            }
            set {
                this.emptyStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public enum LPBoolean {
        
        /// <remarks/>
        Unassigned,
        
        /// <remarks/>
        False,
        
        /// <remarks/>
        True,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public enum ProductPrivilege {
        
        /// <remarks/>
        Nessuna,
        
        /// <remarks/>
        Amministrativa,
        
        /// <remarks/>
        Standard,
        
        /// <remarks/>
        Avanzata,
        
        /// <remarks/>
        Demo,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataValidateByEncrypedTextCompletedEventHandler(object sender, KeyDataValidateByEncrypedTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataValidateByEncrypedTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataValidateByEncrypedTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataAddCompletedEventHandler(object sender, KeyDataAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataAddByTextCompletedEventHandler(object sender, KeyDataAddByTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataAddByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataAddByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataAddByEncrypedTextCompletedEventHandler(object sender, KeyDataAddByEncrypedTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataAddByEncrypedTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataAddByEncrypedTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFingerPrintEncryptedCompletedEventHandler(object sender, GetFingerPrintEncryptedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFingerPrintEncryptedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFingerPrintEncryptedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFingerPrintDecryptedCompletedEventHandler(object sender, GetFingerPrintDecryptedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFingerPrintDecryptedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFingerPrintDecryptedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerGetCodeMethodNameCompletedEventHandler(object sender, GetCustomerGetCodeMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerGetCodeMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerGetCodeMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerExistsMethodNameCompletedEventHandler(object sender, GetCustomerExistsMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerExistsMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerExistsMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemoMethodNameCompletedEventHandler(object sender, GetCustomerSignupForDemoMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemoMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemoMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemoMethodCaptionCompletedEventHandler(object sender, GetCustomerSignupForDemoMethodCaptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemoMethodCaptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemoMethodCaptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemoMethodDescriptionCompletedEventHandler(object sender, GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSuiteActivationsGetMethodNameCompletedEventHandler(object sender, GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerProductActivationsGetMethodNameCompletedEventHandler(object sender, GetCustomerProductActivationsGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerProductActivationsGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerProductActivationsGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetPrivilegeGetMethodNameCompletedEventHandler(object sender, GetPrivilegeGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivilegeGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivilegeGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyDataBuildMethodNameCompletedEventHandler(object sender, GetKeyDataBuildMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyDataBuildMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyDataBuildMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyDefaultValueKindNameCompletedEventHandler(object sender, GetExtendedPropertyDefaultValueKindNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyDefaultValueKindNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyDefaultValueKindNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyPrimaryKeyIndexNameCompletedEventHandler(object sender, GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyForeingKeyReferenceNameCompletedEventHandler(object sender, GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventHandler(object sender, GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventHandler(object sender, GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetOptionalParameterPrefixCompletedEventHandler(object sender, GetOptionalParameterPrefixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOptionalParameterPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOptionalParameterPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameIDCompletedEventHandler(object sender, GetFieldNameIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameCodeCompletedEventHandler(object sender, GetFieldNameCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameKeyCompletedEventHandler(object sender, GetFieldNameKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldActivationPrivilegeIDCompletedEventHandler(object sender, GetFieldActivationPrivilegeIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldActivationPrivilegeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldActivationPrivilegeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void DoLoginCompletedEventHandler(object sender, DoLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CredentialGetCompletedEventHandler(object sender, CredentialGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CredentialGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CredentialGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPCredential Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPCredential)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataSetCompletedEventHandler(object sender, getDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void setDataSetCompletedEventHandler(object sender, setDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataSetTablesCompletedEventHandler(object sender, getDataSetTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataSetTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataSetTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataTableCompletedEventHandler(object sender, getDataTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void setDataTableCompletedEventHandler(object sender, setDataTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataTableCountCompletedEventHandler(object sender, getDataTableCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataTableValueCompletedEventHandler(object sender, getDataTableValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextTableNameCompletedEventHandler(object sender, ContextTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextListCompletedEventHandler(object sender, ContextListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetIDCompletedEventHandler(object sender, ContextGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetCodeCompletedEventHandler(object sender, ContextGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetUniqueNameCompletedEventHandler(object sender, ContextGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextExistsCompletedEventHandler(object sender, ContextExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserTableNameCompletedEventHandler(object sender, UserTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserListCompletedEventHandler(object sender, UserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetIDCompletedEventHandler(object sender, UserGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetCodeCompletedEventHandler(object sender, UserGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetUniqueNameCompletedEventHandler(object sender, UserGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserExistsCompletedEventHandler(object sender, UserExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeTableNameCompletedEventHandler(object sender, PrivilegeTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeListCompletedEventHandler(object sender, PrivilegeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetIDCompletedEventHandler(object sender, PrivilegeGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetCodeCompletedEventHandler(object sender, PrivilegeGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetUniqueNameCompletedEventHandler(object sender, PrivilegeGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeExistsCompletedEventHandler(object sender, PrivilegeExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetCompletedEventHandler(object sender, PrivilegeGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductPrivilege Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductPrivilege)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetByProductCompletedEventHandler(object sender, PrivilegeGetByProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetByProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetByProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductPrivilege Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductPrivilege)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteTableNameCompletedEventHandler(object sender, SuiteTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteListCompletedEventHandler(object sender, SuiteListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetIDCompletedEventHandler(object sender, SuiteGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetCodeCompletedEventHandler(object sender, SuiteGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetUniqueNameCompletedEventHandler(object sender, SuiteGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteExistsCompletedEventHandler(object sender, SuiteExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductTableNameCompletedEventHandler(object sender, ProductTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductListCompletedEventHandler(object sender, ProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetIDCompletedEventHandler(object sender, ProductGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetCodeCompletedEventHandler(object sender, ProductGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetUniqueNameCompletedEventHandler(object sender, ProductGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductExistsCompletedEventHandler(object sender, ProductExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerTableNameCompletedEventHandler(object sender, CustomerTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerListCompletedEventHandler(object sender, CustomerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetIDCompletedEventHandler(object sender, CustomerGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCodeCompletedEventHandler(object sender, CustomerGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCodeByProductCompletedEventHandler(object sender, CustomerGetCodeByProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCodeByProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCodeByProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCodeByProductITCompletedEventHandler(object sender, CustomerGetCodeByProductITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCodeByProductITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCodeByProductITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetUniqueNameCompletedEventHandler(object sender, CustomerGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsCompletedEventHandler(object sender, CustomerExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsByProductCompletedEventHandler(object sender, CustomerExistsByProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsByProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsByProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsByProductITCompletedEventHandler(object sender, CustomerExistsByProductITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsByProductITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsByProductITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerAddCompletedEventHandler(object sender, CustomerAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerRemoveCompletedEventHandler(object sender, CustomerRemoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignUpForDemoCompletedEventHandler(object sender, CustomerSignUpForDemoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignUpForDemoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignUpForDemoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignUpForDemoITCompletedEventHandler(object sender, CustomerSignUpForDemoITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignUpForDemoITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignUpForDemoITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerActivateCompletedEventHandler(object sender, CustomerActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerDeactivateCompletedEventHandler(object sender, CustomerDeactivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerDeactivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerDeactivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerActivationsGetCompletedEventHandler(object sender, CustomerActivationsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerActivationsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerActivationsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSuiteActivationsGetCompletedEventHandler(object sender, CustomerSuiteActivationsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSuiteActivationsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSuiteActivationsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSuiteActivationsGetITCompletedEventHandler(object sender, CustomerSuiteActivationsGetITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSuiteActivationsGetITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSuiteActivationsGetITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerProductActivationsGetCompletedEventHandler(object sender, CustomerProductActivationsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerProductActivationsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerProductActivationsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerProductActivationsGetITCompletedEventHandler(object sender, CustomerProductActivationsGetITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerProductActivationsGetITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerProductActivationsGetITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationTableNameCompletedEventHandler(object sender, ActivationTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationListCompletedEventHandler(object sender, ActivationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetIDCompletedEventHandler(object sender, ActivationGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetIDByCustomerProductCompletedEventHandler(object sender, ActivationGetIDByCustomerProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetIDByCustomerProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetIDByCustomerProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetCodeCompletedEventHandler(object sender, ActivationGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetUniqueNameCompletedEventHandler(object sender, ActivationGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationExistsCompletedEventHandler(object sender, ActivationExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationExistsByCustomerProductCompletedEventHandler(object sender, ActivationExistsByCustomerProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationExistsByCustomerProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationExistsByCustomerProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyTableNameCompletedEventHandler(object sender, KeyTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyListCompletedEventHandler(object sender, KeyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetIDCompletedEventHandler(object sender, KeyGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetCodeCompletedEventHandler(object sender, KeyGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetUniqueNameCompletedEventHandler(object sender, KeyGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyExistsCompletedEventHandler(object sender, KeyExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataBuildCompletedEventHandler(object sender, KeyDataBuildCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataBuildCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataBuildCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataBuildITCompletedEventHandler(object sender, KeyDataBuildITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataBuildITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataBuildITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataExistsCompletedEventHandler(object sender, KeyDataExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataExistsByTextCompletedEventHandler(object sender, KeyDataExistsByTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataExistsByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataExistsByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataExistsByEncrypedTextCompletedEventHandler(object sender, KeyDataExistsByEncrypedTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataExistsByEncrypedTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataExistsByEncrypedTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataValidateCompletedEventHandler(object sender, KeyDataValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataValidateByTextCompletedEventHandler(object sender, KeyDataValidateByTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataValidateByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataValidateByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591