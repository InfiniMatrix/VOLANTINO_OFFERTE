//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace VdO2013LicenseProviderUtil.WSActivation2 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="VdOLicenseProvider2Soap", Namespace="http://localhost:20141")]
    public partial class VdOLicenseProvider2 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback _InitOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginXOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataSetXOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataSetTablesXOperationCompleted;
        
        private System.Threading.SendOrPostCallback EntityTypesGetXOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuildAppDataXMLFileXOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetUniqueNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextExistsXOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetUniqueNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeExistsXOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetUniqueNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteExistsXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetUniqueNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductExistsXOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetUniqueNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetUniqueNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationExistsXOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyTableNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyListXOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetIDXOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetCodeXOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetUniqueNameXOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyExistsXOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataExistsByTextXOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLocalMachineFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLocalMachineFingerPrintEncodedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSuiteFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProductFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomerFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSiteTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSiteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSiteGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSiteGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSiteGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSiteExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataBuildOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataBuildITOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataExistsByTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataExistsByEncrypedTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataValidateByTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataValidateByEncrypedTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataAddByTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataAddByEncrypedTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFingerPrintEncryptedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFingerPrintDecryptedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCode_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerGetCodeGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerGetCodeMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCode_GetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerGetCodeGetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerGetCodeMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExists_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerExistsGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerExistsMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsByProduct_GetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerExistsByProductGetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerExistsByProductMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignupForDemo_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemoMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemo_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignupForDemo_GetMethodCaptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemoMethodCaptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignupForDemoGetMethodCaptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignupForDemo_GetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemoMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSignupForDemoGetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSuiteActivations_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSuiteActivationsMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSuiteActivationsGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSuiteActivations_GetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSuiteActivationsMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSuiteActivationsGetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerProductActivations_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerProductActivationsMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerProductActivationsGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerProductActivations_GetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerProductActivationsMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerProductActivationsGetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback Privilege_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivilegeMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivilegeGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback Privilege_GetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivilegeMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrivilegeGetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataBuild_GetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyDataBuildMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyDataBuildGetMethodNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyDataBuild_GetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyDataBuildMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyDataBuildGetMethodDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExtendedProperty_GetDefaultValueKindNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyDefaultValueKindNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExtendedProperty_GetPrimaryKeyIndexNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExtendedProperty_GetForeingKeyReferenceNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyForeingKeyReferenceNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOptionalParameterPrefixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationCustomerIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationProductIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationPrivilegeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationActiveFromOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationActiveUntilOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationNotesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFieldNameActivationKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusTimeStampOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreateTimeStampOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetElaspedTimeStampOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback CredentialGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataSetTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDataTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContextExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrivilegeGetByProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuiteExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCodeByProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetCodeByProductITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsByProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerExistsByProductITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignUpForDemoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSignUpForDemoITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerActivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerDeactivateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerActivationsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSuiteActivationsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerSuiteActivationsGetITOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerProductActivationsGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerProductActivationsGetITOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetIDByCustomerProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivationExistsByCustomerProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyGetUniqueNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback KeyExistsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public VdOLicenseProvider2() {
            this.Url = global::VdO2013LicenseProviderUtil.Properties.Settings.Default.WSActivationOnLine3;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event _InitCompletedEventHandler _InitCompleted;
        
        /// <remarks/>
        public event LoginXCompletedEventHandler LoginXCompleted;
        
        /// <remarks/>
        public event getDataSetXCompletedEventHandler getDataSetXCompleted;
        
        /// <remarks/>
        public event getDataSetTablesXCompletedEventHandler getDataSetTablesXCompleted;
        
        /// <remarks/>
        public event EntityTypesGetXCompletedEventHandler EntityTypesGetXCompleted;
        
        /// <remarks/>
        public event BuildAppDataXMLFileXCompletedEventHandler BuildAppDataXMLFileXCompleted;
        
        /// <remarks/>
        public event getDataTableXCompletedEventHandler getDataTableXCompleted;
        
        /// <remarks/>
        public event ContextTableNameXCompletedEventHandler ContextTableNameXCompleted;
        
        /// <remarks/>
        public event ContextListXCompletedEventHandler ContextListXCompleted;
        
        /// <remarks/>
        public event ContextGetIDXCompletedEventHandler ContextGetIDXCompleted;
        
        /// <remarks/>
        public event ContextGetCodeXCompletedEventHandler ContextGetCodeXCompleted;
        
        /// <remarks/>
        public event ContextGetUniqueNameXCompletedEventHandler ContextGetUniqueNameXCompleted;
        
        /// <remarks/>
        public event ContextExistsXCompletedEventHandler ContextExistsXCompleted;
        
        /// <remarks/>
        public event UserTableNameXCompletedEventHandler UserTableNameXCompleted;
        
        /// <remarks/>
        public event UserListXCompletedEventHandler UserListXCompleted;
        
        /// <remarks/>
        public event UserGetIDXCompletedEventHandler UserGetIDXCompleted;
        
        /// <remarks/>
        public event UserGetCodeXCompletedEventHandler UserGetCodeXCompleted;
        
        /// <remarks/>
        public event PrivilegeTableNameXCompletedEventHandler PrivilegeTableNameXCompleted;
        
        /// <remarks/>
        public event PrivilegeListXCompletedEventHandler PrivilegeListXCompleted;
        
        /// <remarks/>
        public event PrivilegeGetIDXCompletedEventHandler PrivilegeGetIDXCompleted;
        
        /// <remarks/>
        public event PrivilegeGetCodeXCompletedEventHandler PrivilegeGetCodeXCompleted;
        
        /// <remarks/>
        public event PrivilegeGetUniqueNameXCompletedEventHandler PrivilegeGetUniqueNameXCompleted;
        
        /// <remarks/>
        public event PrivilegeExistsXCompletedEventHandler PrivilegeExistsXCompleted;
        
        /// <remarks/>
        public event SuiteTableNameXCompletedEventHandler SuiteTableNameXCompleted;
        
        /// <remarks/>
        public event SuiteListXCompletedEventHandler SuiteListXCompleted;
        
        /// <remarks/>
        public event SuiteGetIDXCompletedEventHandler SuiteGetIDXCompleted;
        
        /// <remarks/>
        public event SuiteGetCodeXCompletedEventHandler SuiteGetCodeXCompleted;
        
        /// <remarks/>
        public event SuiteGetUniqueNameXCompletedEventHandler SuiteGetUniqueNameXCompleted;
        
        /// <remarks/>
        public event SuiteExistsXCompletedEventHandler SuiteExistsXCompleted;
        
        /// <remarks/>
        public event ProductTableNameXCompletedEventHandler ProductTableNameXCompleted;
        
        /// <remarks/>
        public event ProductListXCompletedEventHandler ProductListXCompleted;
        
        /// <remarks/>
        public event ProductGetIDXCompletedEventHandler ProductGetIDXCompleted;
        
        /// <remarks/>
        public event ProductGetCodeXCompletedEventHandler ProductGetCodeXCompleted;
        
        /// <remarks/>
        public event ProductGetUniqueNameXCompletedEventHandler ProductGetUniqueNameXCompleted;
        
        /// <remarks/>
        public event ProductExistsXCompletedEventHandler ProductExistsXCompleted;
        
        /// <remarks/>
        public event CustomerTableNameXCompletedEventHandler CustomerTableNameXCompleted;
        
        /// <remarks/>
        public event CustomerListXCompletedEventHandler CustomerListXCompleted;
        
        /// <remarks/>
        public event CustomerGetIDXCompletedEventHandler CustomerGetIDXCompleted;
        
        /// <remarks/>
        public event CustomerGetCodeXCompletedEventHandler CustomerGetCodeXCompleted;
        
        /// <remarks/>
        public event CustomerGetUniqueNameXCompletedEventHandler CustomerGetUniqueNameXCompleted;
        
        /// <remarks/>
        public event CustomerExistsXCompletedEventHandler CustomerExistsXCompleted;
        
        /// <remarks/>
        public event ActivationTableNameXCompletedEventHandler ActivationTableNameXCompleted;
        
        /// <remarks/>
        public event ActivationListXCompletedEventHandler ActivationListXCompleted;
        
        /// <remarks/>
        public event ActivationGetIDXCompletedEventHandler ActivationGetIDXCompleted;
        
        /// <remarks/>
        public event ActivationGetCodeXCompletedEventHandler ActivationGetCodeXCompleted;
        
        /// <remarks/>
        public event ActivationGetUniqueNameXCompletedEventHandler ActivationGetUniqueNameXCompleted;
        
        /// <remarks/>
        public event ActivationExistsXCompletedEventHandler ActivationExistsXCompleted;
        
        /// <remarks/>
        public event KeyTableNameXCompletedEventHandler KeyTableNameXCompleted;
        
        /// <remarks/>
        public event KeyListXCompletedEventHandler KeyListXCompleted;
        
        /// <remarks/>
        public event KeyGetIDXCompletedEventHandler KeyGetIDXCompleted;
        
        /// <remarks/>
        public event KeyGetCodeXCompletedEventHandler KeyGetCodeXCompleted;
        
        /// <remarks/>
        public event KeyGetUniqueNameXCompletedEventHandler KeyGetUniqueNameXCompleted;
        
        /// <remarks/>
        public event KeyExistsXCompletedEventHandler KeyExistsXCompleted;
        
        /// <remarks/>
        public event KeyDataExistsByTextXCompletedEventHandler KeyDataExistsByTextXCompleted;
        
        /// <remarks/>
        public event getLocalMachineFingerPrintCompletedEventHandler getLocalMachineFingerPrintCompleted;
        
        /// <remarks/>
        public event getLocalMachineFingerPrintEncodedCompletedEventHandler getLocalMachineFingerPrintEncodedCompleted;
        
        /// <remarks/>
        public event getSuiteFingerPrintCompletedEventHandler getSuiteFingerPrintCompleted;
        
        /// <remarks/>
        public event getProductFingerPrintCompletedEventHandler getProductFingerPrintCompleted;
        
        /// <remarks/>
        public event getCustomerFingerPrintCompletedEventHandler getCustomerFingerPrintCompleted;
        
        /// <remarks/>
        public event WebSiteTableNameCompletedEventHandler WebSiteTableNameCompleted;
        
        /// <remarks/>
        public event WebSiteListCompletedEventHandler WebSiteListCompleted;
        
        /// <remarks/>
        public event WebSiteGetIDCompletedEventHandler WebSiteGetIDCompleted;
        
        /// <remarks/>
        public event WebSiteGetCodeCompletedEventHandler WebSiteGetCodeCompleted;
        
        /// <remarks/>
        public event WebSiteGetUniqueNameCompletedEventHandler WebSiteGetUniqueNameCompleted;
        
        /// <remarks/>
        public event WebSiteExistsCompletedEventHandler WebSiteExistsCompleted;
        
        /// <remarks/>
        public event KeyDataBuildCompletedEventHandler KeyDataBuildCompleted;
        
        /// <remarks/>
        public event KeyDataBuildITCompletedEventHandler KeyDataBuildITCompleted;
        
        /// <remarks/>
        public event KeyDataExistsCompletedEventHandler KeyDataExistsCompleted;
        
        /// <remarks/>
        public event KeyDataExistsByTextCompletedEventHandler KeyDataExistsByTextCompleted;
        
        /// <remarks/>
        public event KeyDataExistsByEncrypedTextCompletedEventHandler KeyDataExistsByEncrypedTextCompleted;
        
        /// <remarks/>
        public event KeyDataValidateCompletedEventHandler KeyDataValidateCompleted;
        
        /// <remarks/>
        public event KeyDataValidateByTextCompletedEventHandler KeyDataValidateByTextCompleted;
        
        /// <remarks/>
        public event KeyDataValidateByEncrypedTextCompletedEventHandler KeyDataValidateByEncrypedTextCompleted;
        
        /// <remarks/>
        public event KeyDataAddCompletedEventHandler KeyDataAddCompleted;
        
        /// <remarks/>
        public event KeyDataAddByTextCompletedEventHandler KeyDataAddByTextCompleted;
        
        /// <remarks/>
        public event KeyDataAddByEncrypedTextCompletedEventHandler KeyDataAddByEncrypedTextCompleted;
        
        /// <remarks/>
        public event GetFingerPrintEncryptedCompletedEventHandler GetFingerPrintEncryptedCompleted;
        
        /// <remarks/>
        public event GetFingerPrintDecryptedCompletedEventHandler GetFingerPrintDecryptedCompleted;
        
        /// <remarks/>
        public event CustomerGetCode_GetMethodNameCompletedEventHandler CustomerGetCode_GetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerGetCodeGetMethodNameCompletedEventHandler GetCustomerGetCodeGetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerGetCodeMethodNameCompletedEventHandler GetCustomerGetCodeMethodNameCompleted;
        
        /// <remarks/>
        public event CustomerGetCode_GetMethodDescriptionCompletedEventHandler CustomerGetCode_GetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerGetCodeGetMethodDescriptionCompletedEventHandler GetCustomerGetCodeGetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerGetCodeMethodDescriptionCompletedEventHandler GetCustomerGetCodeMethodDescriptionCompleted;
        
        /// <remarks/>
        public event CustomerExists_GetMethodNameCompletedEventHandler CustomerExists_GetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerExistsGetMethodNameCompletedEventHandler GetCustomerExistsGetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerExistsMethodNameCompletedEventHandler GetCustomerExistsMethodNameCompleted;
        
        /// <remarks/>
        public event CustomerExistsByProduct_GetMethodDescriptionCompletedEventHandler CustomerExistsByProduct_GetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerExistsByProductGetMethodDescriptionCompletedEventHandler GetCustomerExistsByProductGetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerExistsByProductMethodDescriptionCompletedEventHandler GetCustomerExistsByProductMethodDescriptionCompleted;
        
        /// <remarks/>
        public event CustomerSignupForDemo_GetMethodNameCompletedEventHandler CustomerSignupForDemo_GetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemoMethodNameCompletedEventHandler GetCustomerSignupForDemoMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemo_GetMethodNameCompletedEventHandler GetCustomerSignupForDemo_GetMethodNameCompleted;
        
        /// <remarks/>
        public event CustomerSignupForDemo_GetMethodCaptionCompletedEventHandler CustomerSignupForDemo_GetMethodCaptionCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemoMethodCaptionCompletedEventHandler GetCustomerSignupForDemoMethodCaptionCompleted;
        
        /// <remarks/>
        public event CustomerSignupForDemoGetMethodCaptionCompletedEventHandler CustomerSignupForDemoGetMethodCaptionCompleted;
        
        /// <remarks/>
        public event CustomerSignupForDemo_GetMethodDescriptionCompletedEventHandler CustomerSignupForDemo_GetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemoMethodDescriptionCompletedEventHandler GetCustomerSignupForDemoMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerSignupForDemoGetMethodDescriptionCompletedEventHandler GetCustomerSignupForDemoGetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event CustomerSuiteActivations_GetMethodNameCompletedEventHandler CustomerSuiteActivations_GetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerSuiteActivationsMethodNameCompletedEventHandler GetCustomerSuiteActivationsMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerSuiteActivationsGetMethodNameCompletedEventHandler GetCustomerSuiteActivationsGetMethodNameCompleted;
        
        /// <remarks/>
        public event CustomerSuiteActivations_GetMethodDescriptionCompletedEventHandler CustomerSuiteActivations_GetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerSuiteActivationsMethodDescriptionCompletedEventHandler GetCustomerSuiteActivationsMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerSuiteActivationsGetMethodDescriptionCompletedEventHandler GetCustomerSuiteActivationsGetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event CustomerProductActivations_GetMethodNameCompletedEventHandler CustomerProductActivations_GetMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerProductActivationsMethodNameCompletedEventHandler GetCustomerProductActivationsMethodNameCompleted;
        
        /// <remarks/>
        public event GetCustomerProductActivationsGetMethodNameCompletedEventHandler GetCustomerProductActivationsGetMethodNameCompleted;
        
        /// <remarks/>
        public event CustomerProductActivations_GetMethodDescriptionCompletedEventHandler CustomerProductActivations_GetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerProductActivationsMethodDescriptionCompletedEventHandler GetCustomerProductActivationsMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetCustomerProductActivationsGetMethodDescriptionCompletedEventHandler GetCustomerProductActivationsGetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event Privilege_GetMethodNameCompletedEventHandler Privilege_GetMethodNameCompleted;
        
        /// <remarks/>
        public event GetPrivilegeMethodNameCompletedEventHandler GetPrivilegeMethodNameCompleted;
        
        /// <remarks/>
        public event GetPrivilegeGetMethodNameCompletedEventHandler GetPrivilegeGetMethodNameCompleted;
        
        /// <remarks/>
        public event Privilege_GetMethodDescriptionCompletedEventHandler Privilege_GetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetPrivilegeMethodDescriptionCompletedEventHandler GetPrivilegeMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetPrivilegeGetMethodDescriptionCompletedEventHandler GetPrivilegeGetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event KeyDataBuild_GetMethodNameCompletedEventHandler KeyDataBuild_GetMethodNameCompleted;
        
        /// <remarks/>
        public event GetKeyDataBuildMethodNameCompletedEventHandler GetKeyDataBuildMethodNameCompleted;
        
        /// <remarks/>
        public event GetKeyDataBuildGetMethodNameCompletedEventHandler GetKeyDataBuildGetMethodNameCompleted;
        
        /// <remarks/>
        public event KeyDataBuild_GetMethodDescriptionCompletedEventHandler KeyDataBuild_GetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetKeyDataBuildMethodDescriptionCompletedEventHandler GetKeyDataBuildMethodDescriptionCompleted;
        
        /// <remarks/>
        public event GetKeyDataBuildGetMethodDescriptionCompletedEventHandler GetKeyDataBuildGetMethodDescriptionCompleted;
        
        /// <remarks/>
        public event ExtendedProperty_GetDefaultValueKindNameCompletedEventHandler ExtendedProperty_GetDefaultValueKindNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyDefaultValueKindNameCompletedEventHandler GetExtendedPropertyDefaultValueKindNameCompleted;
        
        /// <remarks/>
        public event ExtendedProperty_GetPrimaryKeyIndexNameCompletedEventHandler ExtendedProperty_GetPrimaryKeyIndexNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyPrimaryKeyIndexNameCompletedEventHandler GetExtendedPropertyPrimaryKeyIndexNameCompleted;
        
        /// <remarks/>
        public event ExtendedProperty_GetForeingKeyReferenceNameCompletedEventHandler ExtendedProperty_GetForeingKeyReferenceNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyForeingKeyReferenceNameCompletedEventHandler GetExtendedPropertyForeingKeyReferenceNameCompleted;
        
        /// <remarks/>
        public event ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompletedEventHandler ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventHandler GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompleted;
        
        /// <remarks/>
        public event ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompletedEventHandler ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompleted;
        
        /// <remarks/>
        public event GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventHandler GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompleted;
        
        /// <remarks/>
        public event GetOptionalParameterPrefixCompletedEventHandler GetOptionalParameterPrefixCompleted;
        
        /// <remarks/>
        public event GetFieldNameIDCompletedEventHandler GetFieldNameIDCompleted;
        
        /// <remarks/>
        public event GetFieldNameCodeCompletedEventHandler GetFieldNameCodeCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationCodeCompletedEventHandler GetFieldNameActivationCodeCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationCustomerIDCompletedEventHandler GetFieldNameActivationCustomerIDCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationProductIDCompletedEventHandler GetFieldNameActivationProductIDCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationPrivilegeIDCompletedEventHandler GetFieldNameActivationPrivilegeIDCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationActiveFromCompletedEventHandler GetFieldNameActivationActiveFromCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationActiveUntilCompletedEventHandler GetFieldNameActivationActiveUntilCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationNotesCompletedEventHandler GetFieldNameActivationNotesCompleted;
        
        /// <remarks/>
        public event GetFieldNameActivationKeyCompletedEventHandler GetFieldNameActivationKeyCompleted;
        
        /// <remarks/>
        public event GetStatusCompletedEventHandler GetStatusCompleted;
        
        /// <remarks/>
        public event GetStatusTimeStampCompletedEventHandler GetStatusTimeStampCompleted;
        
        /// <remarks/>
        public event GetCreateTimeStampCompletedEventHandler GetCreateTimeStampCompleted;
        
        /// <remarks/>
        public event GetElaspedTimeStampCompletedEventHandler GetElaspedTimeStampCompleted;
        
        /// <remarks/>
        public event DoLoginCompletedEventHandler DoLoginCompleted;
        
        /// <remarks/>
        public event CredentialGetCompletedEventHandler CredentialGetCompleted;
        
        /// <remarks/>
        public event getDataSetCompletedEventHandler getDataSetCompleted;
        
        /// <remarks/>
        public event setDataSetCompletedEventHandler setDataSetCompleted;
        
        /// <remarks/>
        public event getDataSetTablesCompletedEventHandler getDataSetTablesCompleted;
        
        /// <remarks/>
        public event getDataTableCompletedEventHandler getDataTableCompleted;
        
        /// <remarks/>
        public event setDataTableCompletedEventHandler setDataTableCompleted;
        
        /// <remarks/>
        public event getDataTableCountCompletedEventHandler getDataTableCountCompleted;
        
        /// <remarks/>
        public event getDataTableValueCompletedEventHandler getDataTableValueCompleted;
        
        /// <remarks/>
        public event ContextTableNameCompletedEventHandler ContextTableNameCompleted;
        
        /// <remarks/>
        public event ContextListCompletedEventHandler ContextListCompleted;
        
        /// <remarks/>
        public event ContextGetIDCompletedEventHandler ContextGetIDCompleted;
        
        /// <remarks/>
        public event ContextGetCodeCompletedEventHandler ContextGetCodeCompleted;
        
        /// <remarks/>
        public event ContextGetUniqueNameCompletedEventHandler ContextGetUniqueNameCompleted;
        
        /// <remarks/>
        public event ContextExistsCompletedEventHandler ContextExistsCompleted;
        
        /// <remarks/>
        public event UserTableNameCompletedEventHandler UserTableNameCompleted;
        
        /// <remarks/>
        public event UserListCompletedEventHandler UserListCompleted;
        
        /// <remarks/>
        public event UserGetIDCompletedEventHandler UserGetIDCompleted;
        
        /// <remarks/>
        public event UserGetCodeCompletedEventHandler UserGetCodeCompleted;
        
        /// <remarks/>
        public event UserGetUniqueNameCompletedEventHandler UserGetUniqueNameCompleted;
        
        /// <remarks/>
        public event UserExistsCompletedEventHandler UserExistsCompleted;
        
        /// <remarks/>
        public event PrivilegeTableNameCompletedEventHandler PrivilegeTableNameCompleted;
        
        /// <remarks/>
        public event PrivilegeListCompletedEventHandler PrivilegeListCompleted;
        
        /// <remarks/>
        public event PrivilegeGetIDCompletedEventHandler PrivilegeGetIDCompleted;
        
        /// <remarks/>
        public event PrivilegeGetCodeCompletedEventHandler PrivilegeGetCodeCompleted;
        
        /// <remarks/>
        public event PrivilegeGetUniqueNameCompletedEventHandler PrivilegeGetUniqueNameCompleted;
        
        /// <remarks/>
        public event PrivilegeExistsCompletedEventHandler PrivilegeExistsCompleted;
        
        /// <remarks/>
        public event PrivilegeGetCompletedEventHandler PrivilegeGetCompleted;
        
        /// <remarks/>
        public event PrivilegeGetByProductCompletedEventHandler PrivilegeGetByProductCompleted;
        
        /// <remarks/>
        public event SuiteTableNameCompletedEventHandler SuiteTableNameCompleted;
        
        /// <remarks/>
        public event SuiteListCompletedEventHandler SuiteListCompleted;
        
        /// <remarks/>
        public event SuiteGetIDCompletedEventHandler SuiteGetIDCompleted;
        
        /// <remarks/>
        public event SuiteGetCodeCompletedEventHandler SuiteGetCodeCompleted;
        
        /// <remarks/>
        public event SuiteGetUniqueNameCompletedEventHandler SuiteGetUniqueNameCompleted;
        
        /// <remarks/>
        public event SuiteExistsCompletedEventHandler SuiteExistsCompleted;
        
        /// <remarks/>
        public event ProductTableNameCompletedEventHandler ProductTableNameCompleted;
        
        /// <remarks/>
        public event ProductListCompletedEventHandler ProductListCompleted;
        
        /// <remarks/>
        public event ProductGetIDCompletedEventHandler ProductGetIDCompleted;
        
        /// <remarks/>
        public event ProductGetCodeCompletedEventHandler ProductGetCodeCompleted;
        
        /// <remarks/>
        public event ProductGetUniqueNameCompletedEventHandler ProductGetUniqueNameCompleted;
        
        /// <remarks/>
        public event ProductExistsCompletedEventHandler ProductExistsCompleted;
        
        /// <remarks/>
        public event CustomerTableNameCompletedEventHandler CustomerTableNameCompleted;
        
        /// <remarks/>
        public event CustomerListCompletedEventHandler CustomerListCompleted;
        
        /// <remarks/>
        public event CustomerGetIDCompletedEventHandler CustomerGetIDCompleted;
        
        /// <remarks/>
        public event CustomerGetCodeCompletedEventHandler CustomerGetCodeCompleted;
        
        /// <remarks/>
        public event CustomerGetCodeByProductCompletedEventHandler CustomerGetCodeByProductCompleted;
        
        /// <remarks/>
        public event CustomerGetCodeByProductITCompletedEventHandler CustomerGetCodeByProductITCompleted;
        
        /// <remarks/>
        public event CustomerGetUniqueNameCompletedEventHandler CustomerGetUniqueNameCompleted;
        
        /// <remarks/>
        public event CustomerExistsCompletedEventHandler CustomerExistsCompleted;
        
        /// <remarks/>
        public event CustomerExistsByProductCompletedEventHandler CustomerExistsByProductCompleted;
        
        /// <remarks/>
        public event CustomerExistsByProductITCompletedEventHandler CustomerExistsByProductITCompleted;
        
        /// <remarks/>
        public event CustomerAddCompletedEventHandler CustomerAddCompleted;
        
        /// <remarks/>
        public event CustomerRemoveCompletedEventHandler CustomerRemoveCompleted;
        
        /// <remarks/>
        public event CustomerSignUpForDemoCompletedEventHandler CustomerSignUpForDemoCompleted;
        
        /// <remarks/>
        public event CustomerSignUpForDemoITCompletedEventHandler CustomerSignUpForDemoITCompleted;
        
        /// <remarks/>
        public event CustomerActivateCompletedEventHandler CustomerActivateCompleted;
        
        /// <remarks/>
        public event CustomerDeactivateCompletedEventHandler CustomerDeactivateCompleted;
        
        /// <remarks/>
        public event CustomerActivationsGetCompletedEventHandler CustomerActivationsGetCompleted;
        
        /// <remarks/>
        public event CustomerSuiteActivationsGetCompletedEventHandler CustomerSuiteActivationsGetCompleted;
        
        /// <remarks/>
        public event CustomerSuiteActivationsGetITCompletedEventHandler CustomerSuiteActivationsGetITCompleted;
        
        /// <remarks/>
        public event CustomerProductActivationsGetCompletedEventHandler CustomerProductActivationsGetCompleted;
        
        /// <remarks/>
        public event CustomerProductActivationsGetITCompletedEventHandler CustomerProductActivationsGetITCompleted;
        
        /// <remarks/>
        public event ActivationTableNameCompletedEventHandler ActivationTableNameCompleted;
        
        /// <remarks/>
        public event ActivationListCompletedEventHandler ActivationListCompleted;
        
        /// <remarks/>
        public event ActivationGetIDCompletedEventHandler ActivationGetIDCompleted;
        
        /// <remarks/>
        public event ActivationGetIDByCustomerProductCompletedEventHandler ActivationGetIDByCustomerProductCompleted;
        
        /// <remarks/>
        public event ActivationGetCodeCompletedEventHandler ActivationGetCodeCompleted;
        
        /// <remarks/>
        public event ActivationGetUniqueNameCompletedEventHandler ActivationGetUniqueNameCompleted;
        
        /// <remarks/>
        public event ActivationExistsCompletedEventHandler ActivationExistsCompleted;
        
        /// <remarks/>
        public event ActivationExistsByCustomerProductCompletedEventHandler ActivationExistsByCustomerProductCompleted;
        
        /// <remarks/>
        public event KeyTableNameCompletedEventHandler KeyTableNameCompleted;
        
        /// <remarks/>
        public event KeyListCompletedEventHandler KeyListCompleted;
        
        /// <remarks/>
        public event KeyGetIDCompletedEventHandler KeyGetIDCompleted;
        
        /// <remarks/>
        public event KeyGetCodeCompletedEventHandler KeyGetCodeCompleted;
        
        /// <remarks/>
        public event KeyGetUniqueNameCompletedEventHandler KeyGetUniqueNameCompleted;
        
        /// <remarks/>
        public event KeyExistsCompletedEventHandler KeyExistsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/_Init", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void _Init() {
            this.Invoke("_Init", new object[0]);
        }
        
        /// <remarks/>
        public void _InitAsync() {
            this._InitAsync(null);
        }
        
        /// <remarks/>
        public void _InitAsync(object userState) {
            if ((this._InitOperationCompleted == null)) {
                this._InitOperationCompleted = new System.Threading.SendOrPostCallback(this.On_InitOperationCompleted);
            }
            this.InvokeAsync("_Init", new object[0], this._InitOperationCompleted, userState);
        }
        
        private void On_InitOperationCompleted(object arg) {
            if ((this._InitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this._InitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/LoginX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage LoginX(string login, string password, string context) {
            object[] results = this.Invoke("LoginX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void LoginXAsync(string login, string password, string context) {
            this.LoginXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void LoginXAsync(string login, string password, string context, object userState) {
            if ((this.LoginXOperationCompleted == null)) {
                this.LoginXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginXOperationCompleted);
            }
            this.InvokeAsync("LoginX", new object[] {
                        login,
                        password,
                        context}, this.LoginXOperationCompleted, userState);
        }
        
        private void OnLoginXOperationCompleted(object arg) {
            if ((this.LoginXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginXCompleted(this, new LoginXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataSetX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataSetX(string login, string password, string context) {
            object[] results = this.Invoke("getDataSetX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataSetXAsync(string login, string password, string context) {
            this.getDataSetXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void getDataSetXAsync(string login, string password, string context, object userState) {
            if ((this.getDataSetXOperationCompleted == null)) {
                this.getDataSetXOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataSetXOperationCompleted);
            }
            this.InvokeAsync("getDataSetX", new object[] {
                        login,
                        password,
                        context}, this.getDataSetXOperationCompleted, userState);
        }
        
        private void OngetDataSetXOperationCompleted(object arg) {
            if ((this.getDataSetXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataSetXCompleted(this, new getDataSetXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataSetTablesX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataSetTablesX(string login, string password, string context) {
            object[] results = this.Invoke("getDataSetTablesX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataSetTablesXAsync(string login, string password, string context) {
            this.getDataSetTablesXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void getDataSetTablesXAsync(string login, string password, string context, object userState) {
            if ((this.getDataSetTablesXOperationCompleted == null)) {
                this.getDataSetTablesXOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataSetTablesXOperationCompleted);
            }
            this.InvokeAsync("getDataSetTablesX", new object[] {
                        login,
                        password,
                        context}, this.getDataSetTablesXOperationCompleted, userState);
        }
        
        private void OngetDataSetTablesXOperationCompleted(object arg) {
            if ((this.getDataSetTablesXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataSetTablesXCompleted(this, new getDataSetTablesXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/EntityTypesGetX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] EntityTypesGetX() {
            object[] results = this.Invoke("EntityTypesGetX", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void EntityTypesGetXAsync() {
            this.EntityTypesGetXAsync(null);
        }
        
        /// <remarks/>
        public void EntityTypesGetXAsync(object userState) {
            if ((this.EntityTypesGetXOperationCompleted == null)) {
                this.EntityTypesGetXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEntityTypesGetXOperationCompleted);
            }
            this.InvokeAsync("EntityTypesGetX", new object[0], this.EntityTypesGetXOperationCompleted, userState);
        }
        
        private void OnEntityTypesGetXOperationCompleted(object arg) {
            if ((this.EntityTypesGetXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EntityTypesGetXCompleted(this, new EntityTypesGetXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/BuildAppDataXMLFileX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage BuildAppDataXMLFileX(string login, string password, string context, bool overwriteData) {
            object[] results = this.Invoke("BuildAppDataXMLFileX", new object[] {
                        login,
                        password,
                        context,
                        overwriteData});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void BuildAppDataXMLFileXAsync(string login, string password, string context, bool overwriteData) {
            this.BuildAppDataXMLFileXAsync(login, password, context, overwriteData, null);
        }
        
        /// <remarks/>
        public void BuildAppDataXMLFileXAsync(string login, string password, string context, bool overwriteData, object userState) {
            if ((this.BuildAppDataXMLFileXOperationCompleted == null)) {
                this.BuildAppDataXMLFileXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuildAppDataXMLFileXOperationCompleted);
            }
            this.InvokeAsync("BuildAppDataXMLFileX", new object[] {
                        login,
                        password,
                        context,
                        overwriteData}, this.BuildAppDataXMLFileXOperationCompleted, userState);
        }
        
        private void OnBuildAppDataXMLFileXOperationCompleted(object arg) {
            if ((this.BuildAppDataXMLFileXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuildAppDataXMLFileXCompleted(this, new BuildAppDataXMLFileXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataTableX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataTableX(string login, string password, string context, string tableName) {
            object[] results = this.Invoke("getDataTableX", new object[] {
                        login,
                        password,
                        context,
                        tableName});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableXAsync(string login, string password, string context, string tableName) {
            this.getDataTableXAsync(login, password, context, tableName, null);
        }
        
        /// <remarks/>
        public void getDataTableXAsync(string login, string password, string context, string tableName, object userState) {
            if ((this.getDataTableXOperationCompleted == null)) {
                this.getDataTableXOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableXOperationCompleted);
            }
            this.InvokeAsync("getDataTableX", new object[] {
                        login,
                        password,
                        context,
                        tableName}, this.getDataTableXOperationCompleted, userState);
        }
        
        private void OngetDataTableXOperationCompleted(object arg) {
            if ((this.getDataTableXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableXCompleted(this, new getDataTableXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("ContextTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextTableNameXAsync(string login, string password, string context) {
            this.ContextTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void ContextTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.ContextTableNameXOperationCompleted == null)) {
                this.ContextTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextTableNameXOperationCompleted);
            }
            this.InvokeAsync("ContextTableNameX", new object[] {
                        login,
                        password,
                        context}, this.ContextTableNameXOperationCompleted, userState);
        }
        
        private void OnContextTableNameXOperationCompleted(object arg) {
            if ((this.ContextTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextTableNameXCompleted(this, new ContextTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextListX(string login, string password, string context) {
            object[] results = this.Invoke("ContextListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextListXAsync(string login, string password, string context) {
            this.ContextListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void ContextListXAsync(string login, string password, string context, object userState) {
            if ((this.ContextListXOperationCompleted == null)) {
                this.ContextListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextListXOperationCompleted);
            }
            this.InvokeAsync("ContextListX", new object[] {
                        login,
                        password,
                        context}, this.ContextListXOperationCompleted, userState);
        }
        
        private void OnContextListXOperationCompleted(object arg) {
            if ((this.ContextListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextListXCompleted(this, new ContextListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetIDX(string login, string password, string context, string byCode, string orDescription) {
            object[] results = this.Invoke("ContextGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetIDXAsync(string login, string password, string context, string byCode, string orDescription) {
            this.ContextGetIDXAsync(login, password, context, byCode, orDescription, null);
        }
        
        /// <remarks/>
        public void ContextGetIDXAsync(string login, string password, string context, string byCode, string orDescription, object userState) {
            if ((this.ContextGetIDXOperationCompleted == null)) {
                this.ContextGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetIDXOperationCompleted);
            }
            this.InvokeAsync("ContextGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orDescription}, this.ContextGetIDXOperationCompleted, userState);
        }
        
        private void OnContextGetIDXOperationCompleted(object arg) {
            if ((this.ContextGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetIDXCompleted(this, new ContextGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetCodeX(string login, string password, string context, string byDescription) {
            object[] results = this.Invoke("ContextGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetCodeXAsync(string login, string password, string context, string byDescription) {
            this.ContextGetCodeXAsync(login, password, context, byDescription, null);
        }
        
        /// <remarks/>
        public void ContextGetCodeXAsync(string login, string password, string context, string byDescription, object userState) {
            if ((this.ContextGetCodeXOperationCompleted == null)) {
                this.ContextGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetCodeXOperationCompleted);
            }
            this.InvokeAsync("ContextGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription}, this.ContextGetCodeXOperationCompleted, userState);
        }
        
        private void OnContextGetCodeXOperationCompleted(object arg) {
            if ((this.ContextGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetCodeXCompleted(this, new ContextGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetUniqueNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetUniqueNameX(string login, string password, string context, string orCode) {
            object[] results = this.Invoke("ContextGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        orCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetUniqueNameXAsync(string login, string password, string context, string orCode) {
            this.ContextGetUniqueNameXAsync(login, password, context, orCode, null);
        }
        
        /// <remarks/>
        public void ContextGetUniqueNameXAsync(string login, string password, string context, string orCode, object userState) {
            if ((this.ContextGetUniqueNameXOperationCompleted == null)) {
                this.ContextGetUniqueNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetUniqueNameXOperationCompleted);
            }
            this.InvokeAsync("ContextGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        orCode}, this.ContextGetUniqueNameXOperationCompleted, userState);
        }
        
        private void OnContextGetUniqueNameXOperationCompleted(object arg) {
            if ((this.ContextGetUniqueNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetUniqueNameXCompleted(this, new ContextGetUniqueNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextExistsX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextExistsX(string login, string password, string context, string orCode) {
            object[] results = this.Invoke("ContextExistsX", new object[] {
                        login,
                        password,
                        context,
                        orCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextExistsXAsync(string login, string password, string context, string orCode) {
            this.ContextExistsXAsync(login, password, context, orCode, null);
        }
        
        /// <remarks/>
        public void ContextExistsXAsync(string login, string password, string context, string orCode, object userState) {
            if ((this.ContextExistsXOperationCompleted == null)) {
                this.ContextExistsXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextExistsXOperationCompleted);
            }
            this.InvokeAsync("ContextExistsX", new object[] {
                        login,
                        password,
                        context,
                        orCode}, this.ContextExistsXOperationCompleted, userState);
        }
        
        private void OnContextExistsXOperationCompleted(object arg) {
            if ((this.ContextExistsXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextExistsXCompleted(this, new ContextExistsXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("UserTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserTableNameXAsync(string login, string password, string context) {
            this.UserTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void UserTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.UserTableNameXOperationCompleted == null)) {
                this.UserTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserTableNameXOperationCompleted);
            }
            this.InvokeAsync("UserTableNameX", new object[] {
                        login,
                        password,
                        context}, this.UserTableNameXOperationCompleted, userState);
        }
        
        private void OnUserTableNameXOperationCompleted(object arg) {
            if ((this.UserTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserTableNameXCompleted(this, new UserTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserListX(string login, string password, string context) {
            object[] results = this.Invoke("UserListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserListXAsync(string login, string password, string context) {
            this.UserListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void UserListXAsync(string login, string password, string context, object userState) {
            if ((this.UserListXOperationCompleted == null)) {
                this.UserListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserListXOperationCompleted);
            }
            this.InvokeAsync("UserListX", new object[] {
                        login,
                        password,
                        context}, this.UserListXOperationCompleted, userState);
        }
        
        private void OnUserListXOperationCompleted(object arg) {
            if ((this.UserListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserListXCompleted(this, new UserListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetIDX(string login, string password, string context, string byCode, string orDescription, string orEmail) {
            object[] results = this.Invoke("UserGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orDescription,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetIDXAsync(string login, string password, string context, string byCode, string orDescription, string orEmail) {
            this.UserGetIDXAsync(login, password, context, byCode, orDescription, orEmail, null);
        }
        
        /// <remarks/>
        public void UserGetIDXAsync(string login, string password, string context, string byCode, string orDescription, string orEmail, object userState) {
            if ((this.UserGetIDXOperationCompleted == null)) {
                this.UserGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetIDXOperationCompleted);
            }
            this.InvokeAsync("UserGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orDescription,
                        orEmail}, this.UserGetIDXOperationCompleted, userState);
        }
        
        private void OnUserGetIDXOperationCompleted(object arg) {
            if ((this.UserGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetIDXCompleted(this, new UserGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetCodeX(string login, string password, string context, string byDescription, string orEmail) {
            object[] results = this.Invoke("UserGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetCodeXAsync(string login, string password, string context, string byDescription, string orEmail) {
            this.UserGetCodeXAsync(login, password, context, byDescription, orEmail, null);
        }
        
        /// <remarks/>
        public void UserGetCodeXAsync(string login, string password, string context, string byDescription, string orEmail, object userState) {
            if ((this.UserGetCodeXOperationCompleted == null)) {
                this.UserGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetCodeXOperationCompleted);
            }
            this.InvokeAsync("UserGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription,
                        orEmail}, this.UserGetCodeXOperationCompleted, userState);
        }
        
        private void OnUserGetCodeXOperationCompleted(object arg) {
            if ((this.UserGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetCodeXCompleted(this, new UserGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("PrivilegeTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeTableNameXAsync(string login, string password, string context) {
            this.PrivilegeTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void PrivilegeTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.PrivilegeTableNameXOperationCompleted == null)) {
                this.PrivilegeTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeTableNameXOperationCompleted);
            }
            this.InvokeAsync("PrivilegeTableNameX", new object[] {
                        login,
                        password,
                        context}, this.PrivilegeTableNameXOperationCompleted, userState);
        }
        
        private void OnPrivilegeTableNameXOperationCompleted(object arg) {
            if ((this.PrivilegeTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeTableNameXCompleted(this, new PrivilegeTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeListX(string login, string password, string context) {
            object[] results = this.Invoke("PrivilegeListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeListXAsync(string login, string password, string context) {
            this.PrivilegeListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void PrivilegeListXAsync(string login, string password, string context, object userState) {
            if ((this.PrivilegeListXOperationCompleted == null)) {
                this.PrivilegeListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeListXOperationCompleted);
            }
            this.InvokeAsync("PrivilegeListX", new object[] {
                        login,
                        password,
                        context}, this.PrivilegeListXOperationCompleted, userState);
        }
        
        private void OnPrivilegeListXOperationCompleted(object arg) {
            if ((this.PrivilegeListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeListXCompleted(this, new PrivilegeListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetIDX(string login, string password, string context, string byCode, string orDescription) {
            object[] results = this.Invoke("PrivilegeGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetIDXAsync(string login, string password, string context, string byCode, string orDescription) {
            this.PrivilegeGetIDXAsync(login, password, context, byCode, orDescription, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetIDXAsync(string login, string password, string context, string byCode, string orDescription, object userState) {
            if ((this.PrivilegeGetIDXOperationCompleted == null)) {
                this.PrivilegeGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetIDXOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orDescription}, this.PrivilegeGetIDXOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetIDXOperationCompleted(object arg) {
            if ((this.PrivilegeGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetIDXCompleted(this, new PrivilegeGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetCodeX(string login, string password, string context, string byDescription) {
            object[] results = this.Invoke("PrivilegeGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetCodeXAsync(string login, string password, string context, string byDescription) {
            this.PrivilegeGetCodeXAsync(login, password, context, byDescription, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetCodeXAsync(string login, string password, string context, string byDescription, object userState) {
            if ((this.PrivilegeGetCodeXOperationCompleted == null)) {
                this.PrivilegeGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetCodeXOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription}, this.PrivilegeGetCodeXOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetCodeXOperationCompleted(object arg) {
            if ((this.PrivilegeGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetCodeXCompleted(this, new PrivilegeGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetUniqueNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetUniqueNameX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("PrivilegeGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetUniqueNameXAsync(string login, string password, string context, string byCode) {
            this.PrivilegeGetUniqueNameXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetUniqueNameXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.PrivilegeGetUniqueNameXOperationCompleted == null)) {
                this.PrivilegeGetUniqueNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetUniqueNameXOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.PrivilegeGetUniqueNameXOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetUniqueNameXOperationCompleted(object arg) {
            if ((this.PrivilegeGetUniqueNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetUniqueNameXCompleted(this, new PrivilegeGetUniqueNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeExistsX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeExistsX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("PrivilegeExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeExistsXAsync(string login, string password, string context, string byCode) {
            this.PrivilegeExistsXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeExistsXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.PrivilegeExistsXOperationCompleted == null)) {
                this.PrivilegeExistsXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeExistsXOperationCompleted);
            }
            this.InvokeAsync("PrivilegeExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.PrivilegeExistsXOperationCompleted, userState);
        }
        
        private void OnPrivilegeExistsXOperationCompleted(object arg) {
            if ((this.PrivilegeExistsXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeExistsXCompleted(this, new PrivilegeExistsXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("SuiteTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteTableNameXAsync(string login, string password, string context) {
            this.SuiteTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void SuiteTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.SuiteTableNameXOperationCompleted == null)) {
                this.SuiteTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteTableNameXOperationCompleted);
            }
            this.InvokeAsync("SuiteTableNameX", new object[] {
                        login,
                        password,
                        context}, this.SuiteTableNameXOperationCompleted, userState);
        }
        
        private void OnSuiteTableNameXOperationCompleted(object arg) {
            if ((this.SuiteTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteTableNameXCompleted(this, new SuiteTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteListX(string login, string password, string context) {
            object[] results = this.Invoke("SuiteListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteListXAsync(string login, string password, string context) {
            this.SuiteListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void SuiteListXAsync(string login, string password, string context, object userState) {
            if ((this.SuiteListXOperationCompleted == null)) {
                this.SuiteListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteListXOperationCompleted);
            }
            this.InvokeAsync("SuiteListX", new object[] {
                        login,
                        password,
                        context}, this.SuiteListXOperationCompleted, userState);
        }
        
        private void OnSuiteListXOperationCompleted(object arg) {
            if ((this.SuiteListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteListXCompleted(this, new SuiteListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetIDX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("SuiteGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetIDXAsync(string login, string password, string context, string byCode) {
            this.SuiteGetIDXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteGetIDXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.SuiteGetIDXOperationCompleted == null)) {
                this.SuiteGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetIDXOperationCompleted);
            }
            this.InvokeAsync("SuiteGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.SuiteGetIDXOperationCompleted, userState);
        }
        
        private void OnSuiteGetIDXOperationCompleted(object arg) {
            if ((this.SuiteGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetIDXCompleted(this, new SuiteGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetCodeX(string login, string password, string context, string byDescription, string andVersion, string andBuild) {
            object[] results = this.Invoke("SuiteGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription,
                        andVersion,
                        andBuild});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetCodeXAsync(string login, string password, string context, string byDescription, string andVersion, string andBuild) {
            this.SuiteGetCodeXAsync(login, password, context, byDescription, andVersion, andBuild, null);
        }
        
        /// <remarks/>
        public void SuiteGetCodeXAsync(string login, string password, string context, string byDescription, string andVersion, string andBuild, object userState) {
            if ((this.SuiteGetCodeXOperationCompleted == null)) {
                this.SuiteGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetCodeXOperationCompleted);
            }
            this.InvokeAsync("SuiteGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byDescription,
                        andVersion,
                        andBuild}, this.SuiteGetCodeXOperationCompleted, userState);
        }
        
        private void OnSuiteGetCodeXOperationCompleted(object arg) {
            if ((this.SuiteGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetCodeXCompleted(this, new SuiteGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetUniqueNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetUniqueNameX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("SuiteGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetUniqueNameXAsync(string login, string password, string context, string byCode) {
            this.SuiteGetUniqueNameXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteGetUniqueNameXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.SuiteGetUniqueNameXOperationCompleted == null)) {
                this.SuiteGetUniqueNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetUniqueNameXOperationCompleted);
            }
            this.InvokeAsync("SuiteGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.SuiteGetUniqueNameXOperationCompleted, userState);
        }
        
        private void OnSuiteGetUniqueNameXOperationCompleted(object arg) {
            if ((this.SuiteGetUniqueNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetUniqueNameXCompleted(this, new SuiteGetUniqueNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteExistsX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteExistsX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("SuiteExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteExistsXAsync(string login, string password, string context, string byCode) {
            this.SuiteExistsXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteExistsXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.SuiteExistsXOperationCompleted == null)) {
                this.SuiteExistsXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteExistsXOperationCompleted);
            }
            this.InvokeAsync("SuiteExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.SuiteExistsXOperationCompleted, userState);
        }
        
        private void OnSuiteExistsXOperationCompleted(object arg) {
            if ((this.SuiteExistsXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteExistsXCompleted(this, new SuiteExistsXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("ProductTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductTableNameXAsync(string login, string password, string context) {
            this.ProductTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void ProductTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.ProductTableNameXOperationCompleted == null)) {
                this.ProductTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductTableNameXOperationCompleted);
            }
            this.InvokeAsync("ProductTableNameX", new object[] {
                        login,
                        password,
                        context}, this.ProductTableNameXOperationCompleted, userState);
        }
        
        private void OnProductTableNameXOperationCompleted(object arg) {
            if ((this.ProductTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductTableNameXCompleted(this, new ProductTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductListX(string login, string password, string context) {
            object[] results = this.Invoke("ProductListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductListXAsync(string login, string password, string context) {
            this.ProductListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void ProductListXAsync(string login, string password, string context, object userState) {
            if ((this.ProductListXOperationCompleted == null)) {
                this.ProductListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductListXOperationCompleted);
            }
            this.InvokeAsync("ProductListX", new object[] {
                        login,
                        password,
                        context}, this.ProductListXOperationCompleted, userState);
        }
        
        private void OnProductListXOperationCompleted(object arg) {
            if ((this.ProductListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductListXCompleted(this, new ProductListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetIDX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("ProductGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetIDXAsync(string login, string password, string context, string byCode) {
            this.ProductGetIDXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void ProductGetIDXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.ProductGetIDXOperationCompleted == null)) {
                this.ProductGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetIDXOperationCompleted);
            }
            this.InvokeAsync("ProductGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.ProductGetIDXOperationCompleted, userState);
        }
        
        private void OnProductGetIDXOperationCompleted(object arg) {
            if ((this.ProductGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetIDXCompleted(this, new ProductGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetCodeX(string login, string password, string context, long byID, string description, string version, string build) {
            object[] results = this.Invoke("ProductGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        description,
                        version,
                        build});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetCodeXAsync(string login, string password, string context, long byID, string description, string version, string build) {
            this.ProductGetCodeXAsync(login, password, context, byID, description, version, build, null);
        }
        
        /// <remarks/>
        public void ProductGetCodeXAsync(string login, string password, string context, long byID, string description, string version, string build, object userState) {
            if ((this.ProductGetCodeXOperationCompleted == null)) {
                this.ProductGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetCodeXOperationCompleted);
            }
            this.InvokeAsync("ProductGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        description,
                        version,
                        build}, this.ProductGetCodeXOperationCompleted, userState);
        }
        
        private void OnProductGetCodeXOperationCompleted(object arg) {
            if ((this.ProductGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetCodeXCompleted(this, new ProductGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetUniqueNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetUniqueNameX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("ProductGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetUniqueNameXAsync(string login, string password, string context, string byCode) {
            this.ProductGetUniqueNameXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void ProductGetUniqueNameXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.ProductGetUniqueNameXOperationCompleted == null)) {
                this.ProductGetUniqueNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetUniqueNameXOperationCompleted);
            }
            this.InvokeAsync("ProductGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.ProductGetUniqueNameXOperationCompleted, userState);
        }
        
        private void OnProductGetUniqueNameXOperationCompleted(object arg) {
            if ((this.ProductGetUniqueNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetUniqueNameXCompleted(this, new ProductGetUniqueNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductExistsX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductExistsX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("ProductExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductExistsXAsync(string login, string password, string context, string byCode) {
            this.ProductExistsXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void ProductExistsXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.ProductExistsXOperationCompleted == null)) {
                this.ProductExistsXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductExistsXOperationCompleted);
            }
            this.InvokeAsync("ProductExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.ProductExistsXOperationCompleted, userState);
        }
        
        private void OnProductExistsXOperationCompleted(object arg) {
            if ((this.ProductExistsXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductExistsXCompleted(this, new ProductExistsXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("CustomerTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerTableNameXAsync(string login, string password, string context) {
            this.CustomerTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void CustomerTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.CustomerTableNameXOperationCompleted == null)) {
                this.CustomerTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerTableNameXOperationCompleted);
            }
            this.InvokeAsync("CustomerTableNameX", new object[] {
                        login,
                        password,
                        context}, this.CustomerTableNameXOperationCompleted, userState);
        }
        
        private void OnCustomerTableNameXOperationCompleted(object arg) {
            if ((this.CustomerTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerTableNameXCompleted(this, new CustomerTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerListX(string login, string password, string context) {
            object[] results = this.Invoke("CustomerListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerListXAsync(string login, string password, string context) {
            this.CustomerListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void CustomerListXAsync(string login, string password, string context, object userState) {
            if ((this.CustomerListXOperationCompleted == null)) {
                this.CustomerListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerListXOperationCompleted);
            }
            this.InvokeAsync("CustomerListX", new object[] {
                        login,
                        password,
                        context}, this.CustomerListXOperationCompleted, userState);
        }
        
        private void OnCustomerListXOperationCompleted(object arg) {
            if ((this.CustomerListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerListXCompleted(this, new CustomerListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetIDX(string login, string password, string context, string byCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetIDXAsync(string login, string password, string context, string byCode, string orTaxIdentifier, string orEmail) {
            this.CustomerGetIDXAsync(login, password, context, byCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetIDXAsync(string login, string password, string context, string byCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetIDXOperationCompleted == null)) {
                this.CustomerGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetIDXOperationCompleted);
            }
            this.InvokeAsync("CustomerGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerGetIDXOperationCompleted, userState);
        }
        
        private void OnCustomerGetIDXOperationCompleted(object arg) {
            if ((this.CustomerGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetIDXCompleted(this, new CustomerGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetCodeX(string login, string password, string context, long byID, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCodeXAsync(string login, string password, string context, long byID, string orTaxIdentifier, string orEmail) {
            this.CustomerGetCodeXAsync(login, password, context, byID, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetCodeXAsync(string login, string password, string context, long byID, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetCodeXOperationCompleted == null)) {
                this.CustomerGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCodeXOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        orTaxIdentifier,
                        orEmail}, this.CustomerGetCodeXOperationCompleted, userState);
        }
        
        private void OnCustomerGetCodeXOperationCompleted(object arg) {
            if ((this.CustomerGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCodeXCompleted(this, new CustomerGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetUniqueNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetUniqueNameX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("CustomerGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetUniqueNameXAsync(string login, string password, string context, string byCode) {
            this.CustomerGetUniqueNameXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void CustomerGetUniqueNameXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.CustomerGetUniqueNameXOperationCompleted == null)) {
                this.CustomerGetUniqueNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetUniqueNameXOperationCompleted);
            }
            this.InvokeAsync("CustomerGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.CustomerGetUniqueNameXOperationCompleted, userState);
        }
        
        private void OnCustomerGetUniqueNameXOperationCompleted(object arg) {
            if ((this.CustomerGetUniqueNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetUniqueNameXCompleted(this, new CustomerGetUniqueNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExistsX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerExistsX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("CustomerExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsXAsync(string login, string password, string context, string byCode) {
            this.CustomerExistsXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void CustomerExistsXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.CustomerExistsXOperationCompleted == null)) {
                this.CustomerExistsXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsXOperationCompleted);
            }
            this.InvokeAsync("CustomerExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.CustomerExistsXOperationCompleted, userState);
        }
        
        private void OnCustomerExistsXOperationCompleted(object arg) {
            if ((this.CustomerExistsXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsXCompleted(this, new CustomerExistsXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("ActivationTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationTableNameXAsync(string login, string password, string context) {
            this.ActivationTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void ActivationTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.ActivationTableNameXOperationCompleted == null)) {
                this.ActivationTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationTableNameXOperationCompleted);
            }
            this.InvokeAsync("ActivationTableNameX", new object[] {
                        login,
                        password,
                        context}, this.ActivationTableNameXOperationCompleted, userState);
        }
        
        private void OnActivationTableNameXOperationCompleted(object arg) {
            if ((this.ActivationTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationTableNameXCompleted(this, new ActivationTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationListX(string login, string password, string context) {
            object[] results = this.Invoke("ActivationListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationListXAsync(string login, string password, string context) {
            this.ActivationListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void ActivationListXAsync(string login, string password, string context, object userState) {
            if ((this.ActivationListXOperationCompleted == null)) {
                this.ActivationListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationListXOperationCompleted);
            }
            this.InvokeAsync("ActivationListX", new object[] {
                        login,
                        password,
                        context}, this.ActivationListXOperationCompleted, userState);
        }
        
        private void OnActivationListXOperationCompleted(object arg) {
            if ((this.ActivationListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationListXCompleted(this, new ActivationListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetIDX(string login, string password, string context, string byCode, string orKey) {
            object[] results = this.Invoke("ActivationGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetIDXAsync(string login, string password, string context, string byCode, string orKey) {
            this.ActivationGetIDXAsync(login, password, context, byCode, orKey, null);
        }
        
        /// <remarks/>
        public void ActivationGetIDXAsync(string login, string password, string context, string byCode, string orKey, object userState) {
            if ((this.ActivationGetIDXOperationCompleted == null)) {
                this.ActivationGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetIDXOperationCompleted);
            }
            this.InvokeAsync("ActivationGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orKey}, this.ActivationGetIDXOperationCompleted, userState);
        }
        
        private void OnActivationGetIDXOperationCompleted(object arg) {
            if ((this.ActivationGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetIDXCompleted(this, new ActivationGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetCodeX(string login, string password, string context, long byID, string orKey) {
            object[] results = this.Invoke("ActivationGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetCodeXAsync(string login, string password, string context, long byID, string orKey) {
            this.ActivationGetCodeXAsync(login, password, context, byID, orKey, null);
        }
        
        /// <remarks/>
        public void ActivationGetCodeXAsync(string login, string password, string context, long byID, string orKey, object userState) {
            if ((this.ActivationGetCodeXOperationCompleted == null)) {
                this.ActivationGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetCodeXOperationCompleted);
            }
            this.InvokeAsync("ActivationGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        orKey}, this.ActivationGetCodeXOperationCompleted, userState);
        }
        
        private void OnActivationGetCodeXOperationCompleted(object arg) {
            if ((this.ActivationGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetCodeXCompleted(this, new ActivationGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetUniqueNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetUniqueNameX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("ActivationGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetUniqueNameXAsync(string login, string password, string context, string byCode) {
            this.ActivationGetUniqueNameXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void ActivationGetUniqueNameXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.ActivationGetUniqueNameXOperationCompleted == null)) {
                this.ActivationGetUniqueNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetUniqueNameXOperationCompleted);
            }
            this.InvokeAsync("ActivationGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.ActivationGetUniqueNameXOperationCompleted, userState);
        }
        
        private void OnActivationGetUniqueNameXOperationCompleted(object arg) {
            if ((this.ActivationGetUniqueNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetUniqueNameXCompleted(this, new ActivationGetUniqueNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationExistsX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationExistsX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("ActivationExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationExistsXAsync(string login, string password, string context, string byCode) {
            this.ActivationExistsXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void ActivationExistsXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.ActivationExistsXOperationCompleted == null)) {
                this.ActivationExistsXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationExistsXOperationCompleted);
            }
            this.InvokeAsync("ActivationExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.ActivationExistsXOperationCompleted, userState);
        }
        
        private void OnActivationExistsXOperationCompleted(object arg) {
            if ((this.ActivationExistsXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationExistsXCompleted(this, new ActivationExistsXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyTableNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyTableNameX(string login, string password, string context) {
            object[] results = this.Invoke("KeyTableNameX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyTableNameXAsync(string login, string password, string context) {
            this.KeyTableNameXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void KeyTableNameXAsync(string login, string password, string context, object userState) {
            if ((this.KeyTableNameXOperationCompleted == null)) {
                this.KeyTableNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyTableNameXOperationCompleted);
            }
            this.InvokeAsync("KeyTableNameX", new object[] {
                        login,
                        password,
                        context}, this.KeyTableNameXOperationCompleted, userState);
        }
        
        private void OnKeyTableNameXOperationCompleted(object arg) {
            if ((this.KeyTableNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyTableNameXCompleted(this, new KeyTableNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyListX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyListX(string login, string password, string context) {
            object[] results = this.Invoke("KeyListX", new object[] {
                        login,
                        password,
                        context});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyListXAsync(string login, string password, string context) {
            this.KeyListXAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void KeyListXAsync(string login, string password, string context, object userState) {
            if ((this.KeyListXOperationCompleted == null)) {
                this.KeyListXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyListXOperationCompleted);
            }
            this.InvokeAsync("KeyListX", new object[] {
                        login,
                        password,
                        context}, this.KeyListXOperationCompleted, userState);
        }
        
        private void OnKeyListXOperationCompleted(object arg) {
            if ((this.KeyListXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyListXCompleted(this, new KeyListXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetIDX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetIDX(string login, string password, string context, string byCode, string orKey) {
            object[] results = this.Invoke("KeyGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetIDXAsync(string login, string password, string context, string byCode, string orKey) {
            this.KeyGetIDXAsync(login, password, context, byCode, orKey, null);
        }
        
        /// <remarks/>
        public void KeyGetIDXAsync(string login, string password, string context, string byCode, string orKey, object userState) {
            if ((this.KeyGetIDXOperationCompleted == null)) {
                this.KeyGetIDXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetIDXOperationCompleted);
            }
            this.InvokeAsync("KeyGetIDX", new object[] {
                        login,
                        password,
                        context,
                        byCode,
                        orKey}, this.KeyGetIDXOperationCompleted, userState);
        }
        
        private void OnKeyGetIDXOperationCompleted(object arg) {
            if ((this.KeyGetIDXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetIDXCompleted(this, new KeyGetIDXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetCodeX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetCodeX(string login, string password, string context, long byID, string orKey) {
            object[] results = this.Invoke("KeyGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetCodeXAsync(string login, string password, string context, long byID, string orKey) {
            this.KeyGetCodeXAsync(login, password, context, byID, orKey, null);
        }
        
        /// <remarks/>
        public void KeyGetCodeXAsync(string login, string password, string context, long byID, string orKey, object userState) {
            if ((this.KeyGetCodeXOperationCompleted == null)) {
                this.KeyGetCodeXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetCodeXOperationCompleted);
            }
            this.InvokeAsync("KeyGetCodeX", new object[] {
                        login,
                        password,
                        context,
                        byID,
                        orKey}, this.KeyGetCodeXOperationCompleted, userState);
        }
        
        private void OnKeyGetCodeXOperationCompleted(object arg) {
            if ((this.KeyGetCodeXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetCodeXCompleted(this, new KeyGetCodeXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetUniqueNameX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetUniqueNameX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("KeyGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetUniqueNameXAsync(string login, string password, string context, string byCode) {
            this.KeyGetUniqueNameXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void KeyGetUniqueNameXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.KeyGetUniqueNameXOperationCompleted == null)) {
                this.KeyGetUniqueNameXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetUniqueNameXOperationCompleted);
            }
            this.InvokeAsync("KeyGetUniqueNameX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.KeyGetUniqueNameXOperationCompleted, userState);
        }
        
        private void OnKeyGetUniqueNameXOperationCompleted(object arg) {
            if ((this.KeyGetUniqueNameXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetUniqueNameXCompleted(this, new KeyGetUniqueNameXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyExistsX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyExistsX(string login, string password, string context, string byCode) {
            object[] results = this.Invoke("KeyExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyExistsXAsync(string login, string password, string context, string byCode) {
            this.KeyExistsXAsync(login, password, context, byCode, null);
        }
        
        /// <remarks/>
        public void KeyExistsXAsync(string login, string password, string context, string byCode, object userState) {
            if ((this.KeyExistsXOperationCompleted == null)) {
                this.KeyExistsXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyExistsXOperationCompleted);
            }
            this.InvokeAsync("KeyExistsX", new object[] {
                        login,
                        password,
                        context,
                        byCode}, this.KeyExistsXOperationCompleted, userState);
        }
        
        private void OnKeyExistsXOperationCompleted(object arg) {
            if ((this.KeyExistsXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyExistsXCompleted(this, new KeyExistsXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataExistsByTextX", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataExistsByTextX(string login, string password, string context, string activationDataText, bool encrypted) {
            object[] results = this.Invoke("KeyDataExistsByTextX", new object[] {
                        login,
                        password,
                        context,
                        activationDataText,
                        encrypted});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataExistsByTextXAsync(string login, string password, string context, string activationDataText, bool encrypted) {
            this.KeyDataExistsByTextXAsync(login, password, context, activationDataText, encrypted, null);
        }
        
        /// <remarks/>
        public void KeyDataExistsByTextXAsync(string login, string password, string context, string activationDataText, bool encrypted, object userState) {
            if ((this.KeyDataExistsByTextXOperationCompleted == null)) {
                this.KeyDataExistsByTextXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataExistsByTextXOperationCompleted);
            }
            this.InvokeAsync("KeyDataExistsByTextX", new object[] {
                        login,
                        password,
                        context,
                        activationDataText,
                        encrypted}, this.KeyDataExistsByTextXOperationCompleted, userState);
        }
        
        private void OnKeyDataExistsByTextXOperationCompleted(object arg) {
            if ((this.KeyDataExistsByTextXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataExistsByTextXCompleted(this, new KeyDataExistsByTextXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getLocalMachineFingerPrint", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getLocalMachineFingerPrint() {
            object[] results = this.Invoke("getLocalMachineFingerPrint", new object[0]);
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getLocalMachineFingerPrintAsync() {
            this.getLocalMachineFingerPrintAsync(null);
        }
        
        /// <remarks/>
        public void getLocalMachineFingerPrintAsync(object userState) {
            if ((this.getLocalMachineFingerPrintOperationCompleted == null)) {
                this.getLocalMachineFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLocalMachineFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getLocalMachineFingerPrint", new object[0], this.getLocalMachineFingerPrintOperationCompleted, userState);
        }
        
        private void OngetLocalMachineFingerPrintOperationCompleted(object arg) {
            if ((this.getLocalMachineFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLocalMachineFingerPrintCompleted(this, new getLocalMachineFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getLocalMachineFingerPrintEncoded", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getLocalMachineFingerPrintEncoded() {
            object[] results = this.Invoke("getLocalMachineFingerPrintEncoded", new object[0]);
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getLocalMachineFingerPrintEncodedAsync() {
            this.getLocalMachineFingerPrintEncodedAsync(null);
        }
        
        /// <remarks/>
        public void getLocalMachineFingerPrintEncodedAsync(object userState) {
            if ((this.getLocalMachineFingerPrintEncodedOperationCompleted == null)) {
                this.getLocalMachineFingerPrintEncodedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLocalMachineFingerPrintEncodedOperationCompleted);
            }
            this.InvokeAsync("getLocalMachineFingerPrintEncoded", new object[0], this.getLocalMachineFingerPrintEncodedOperationCompleted, userState);
        }
        
        private void OngetLocalMachineFingerPrintEncodedOperationCompleted(object arg) {
            if ((this.getLocalMachineFingerPrintEncodedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLocalMachineFingerPrintEncodedCompleted(this, new getLocalMachineFingerPrintEncodedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getSuiteFingerPrint", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getSuiteFingerPrint(string code) {
            object[] results = this.Invoke("getSuiteFingerPrint", new object[] {
                        code});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getSuiteFingerPrintAsync(string code) {
            this.getSuiteFingerPrintAsync(code, null);
        }
        
        /// <remarks/>
        public void getSuiteFingerPrintAsync(string code, object userState) {
            if ((this.getSuiteFingerPrintOperationCompleted == null)) {
                this.getSuiteFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSuiteFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getSuiteFingerPrint", new object[] {
                        code}, this.getSuiteFingerPrintOperationCompleted, userState);
        }
        
        private void OngetSuiteFingerPrintOperationCompleted(object arg) {
            if ((this.getSuiteFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSuiteFingerPrintCompleted(this, new getSuiteFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getProductFingerPrint", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getProductFingerPrint(string code) {
            object[] results = this.Invoke("getProductFingerPrint", new object[] {
                        code});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getProductFingerPrintAsync(string code) {
            this.getProductFingerPrintAsync(code, null);
        }
        
        /// <remarks/>
        public void getProductFingerPrintAsync(string code, object userState) {
            if ((this.getProductFingerPrintOperationCompleted == null)) {
                this.getProductFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProductFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getProductFingerPrint", new object[] {
                        code}, this.getProductFingerPrintOperationCompleted, userState);
        }
        
        private void OngetProductFingerPrintOperationCompleted(object arg) {
            if ((this.getProductFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProductFingerPrintCompleted(this, new getProductFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getCustomerFingerPrint", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getCustomerFingerPrint(string code) {
            object[] results = this.Invoke("getCustomerFingerPrint", new object[] {
                        code});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getCustomerFingerPrintAsync(string code) {
            this.getCustomerFingerPrintAsync(code, null);
        }
        
        /// <remarks/>
        public void getCustomerFingerPrintAsync(string code, object userState) {
            if ((this.getCustomerFingerPrintOperationCompleted == null)) {
                this.getCustomerFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomerFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getCustomerFingerPrint", new object[] {
                        code}, this.getCustomerFingerPrintOperationCompleted, userState);
        }
        
        private void OngetCustomerFingerPrintOperationCompleted(object arg) {
            if ((this.getCustomerFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomerFingerPrintCompleted(this, new getCustomerFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/WebSiteTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage WebSiteTableName(LPCredential credential) {
            object[] results = this.Invoke("WebSiteTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void WebSiteTableNameAsync(LPCredential credential) {
            this.WebSiteTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void WebSiteTableNameAsync(LPCredential credential, object userState) {
            if ((this.WebSiteTableNameOperationCompleted == null)) {
                this.WebSiteTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSiteTableNameOperationCompleted);
            }
            this.InvokeAsync("WebSiteTableName", new object[] {
                        credential}, this.WebSiteTableNameOperationCompleted, userState);
        }
        
        private void OnWebSiteTableNameOperationCompleted(object arg) {
            if ((this.WebSiteTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSiteTableNameCompleted(this, new WebSiteTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/WebSiteList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage WebSiteList(LPCredential credential) {
            object[] results = this.Invoke("WebSiteList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void WebSiteListAsync(LPCredential credential) {
            this.WebSiteListAsync(credential, null);
        }
        
        /// <remarks/>
        public void WebSiteListAsync(LPCredential credential, object userState) {
            if ((this.WebSiteListOperationCompleted == null)) {
                this.WebSiteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSiteListOperationCompleted);
            }
            this.InvokeAsync("WebSiteList", new object[] {
                        credential}, this.WebSiteListOperationCompleted, userState);
        }
        
        private void OnWebSiteListOperationCompleted(object arg) {
            if ((this.WebSiteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSiteListCompleted(this, new WebSiteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/WebSiteGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage WebSiteGetID(LPCredential credential, string byName, string orNormalUrl) {
            object[] results = this.Invoke("WebSiteGetID", new object[] {
                        credential,
                        byName,
                        orNormalUrl});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void WebSiteGetIDAsync(LPCredential credential, string byName, string orNormalUrl) {
            this.WebSiteGetIDAsync(credential, byName, orNormalUrl, null);
        }
        
        /// <remarks/>
        public void WebSiteGetIDAsync(LPCredential credential, string byName, string orNormalUrl, object userState) {
            if ((this.WebSiteGetIDOperationCompleted == null)) {
                this.WebSiteGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSiteGetIDOperationCompleted);
            }
            this.InvokeAsync("WebSiteGetID", new object[] {
                        credential,
                        byName,
                        orNormalUrl}, this.WebSiteGetIDOperationCompleted, userState);
        }
        
        private void OnWebSiteGetIDOperationCompleted(object arg) {
            if ((this.WebSiteGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSiteGetIDCompleted(this, new WebSiteGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/WebSiteGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage WebSiteGetCode(LPCredential credential, string byName, string orNormalUrl) {
            object[] results = this.Invoke("WebSiteGetCode", new object[] {
                        credential,
                        byName,
                        orNormalUrl});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void WebSiteGetCodeAsync(LPCredential credential, string byName, string orNormalUrl) {
            this.WebSiteGetCodeAsync(credential, byName, orNormalUrl, null);
        }
        
        /// <remarks/>
        public void WebSiteGetCodeAsync(LPCredential credential, string byName, string orNormalUrl, object userState) {
            if ((this.WebSiteGetCodeOperationCompleted == null)) {
                this.WebSiteGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSiteGetCodeOperationCompleted);
            }
            this.InvokeAsync("WebSiteGetCode", new object[] {
                        credential,
                        byName,
                        orNormalUrl}, this.WebSiteGetCodeOperationCompleted, userState);
        }
        
        private void OnWebSiteGetCodeOperationCompleted(object arg) {
            if ((this.WebSiteGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSiteGetCodeCompleted(this, new WebSiteGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/WebSiteGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage WebSiteGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("WebSiteGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void WebSiteGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.WebSiteGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void WebSiteGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.WebSiteGetUniqueNameOperationCompleted == null)) {
                this.WebSiteGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSiteGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("WebSiteGetUniqueName", new object[] {
                        credential,
                        byCode}, this.WebSiteGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnWebSiteGetUniqueNameOperationCompleted(object arg) {
            if ((this.WebSiteGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSiteGetUniqueNameCompleted(this, new WebSiteGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/WebSiteExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage WebSiteExists(LPCredential credential, string byName, string orNormalUrl) {
            object[] results = this.Invoke("WebSiteExists", new object[] {
                        credential,
                        byName,
                        orNormalUrl});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void WebSiteExistsAsync(LPCredential credential, string byName, string orNormalUrl) {
            this.WebSiteExistsAsync(credential, byName, orNormalUrl, null);
        }
        
        /// <remarks/>
        public void WebSiteExistsAsync(LPCredential credential, string byName, string orNormalUrl, object userState) {
            if ((this.WebSiteExistsOperationCompleted == null)) {
                this.WebSiteExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSiteExistsOperationCompleted);
            }
            this.InvokeAsync("WebSiteExists", new object[] {
                        credential,
                        byName,
                        orNormalUrl}, this.WebSiteExistsOperationCompleted, userState);
        }
        
        private void OnWebSiteExistsOperationCompleted(object arg) {
            if ((this.WebSiteExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSiteExistsCompleted(this, new WebSiteExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataBuild", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyData KeyDataBuild(string customerCode, string productCode, string privilegeCode, System.DateTime activeFrom, System.DateTime activeUntil, string machineCPU, string machineBASE, string machineMAC) {
            object[] results = this.Invoke("KeyDataBuild", new object[] {
                        customerCode,
                        productCode,
                        privilegeCode,
                        activeFrom,
                        activeUntil,
                        machineCPU,
                        machineBASE,
                        machineMAC});
            return ((KeyData)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataBuildAsync(string customerCode, string productCode, string privilegeCode, System.DateTime activeFrom, System.DateTime activeUntil, string machineCPU, string machineBASE, string machineMAC) {
            this.KeyDataBuildAsync(customerCode, productCode, privilegeCode, activeFrom, activeUntil, machineCPU, machineBASE, machineMAC, null);
        }
        
        /// <remarks/>
        public void KeyDataBuildAsync(string customerCode, string productCode, string privilegeCode, System.DateTime activeFrom, System.DateTime activeUntil, string machineCPU, string machineBASE, string machineMAC, object userState) {
            if ((this.KeyDataBuildOperationCompleted == null)) {
                this.KeyDataBuildOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataBuildOperationCompleted);
            }
            this.InvokeAsync("KeyDataBuild", new object[] {
                        customerCode,
                        productCode,
                        privilegeCode,
                        activeFrom,
                        activeUntil,
                        machineCPU,
                        machineBASE,
                        machineMAC}, this.KeyDataBuildOperationCompleted, userState);
        }
        
        private void OnKeyDataBuildOperationCompleted(object arg) {
            if ((this.KeyDataBuildCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataBuildCompleted(this, new KeyDataBuildCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataBuildIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyData KeyDataBuildIT(string CodiceCliente, string CodiceProdotto, string CodicePrivilegio, System.DateTime AttivoDa, System.DateTime AttivoFinoA, string CPU, string BASE, string MAC) {
            object[] results = this.Invoke("KeyDataBuildIT", new object[] {
                        CodiceCliente,
                        CodiceProdotto,
                        CodicePrivilegio,
                        AttivoDa,
                        AttivoFinoA,
                        CPU,
                        BASE,
                        MAC});
            return ((KeyData)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataBuildITAsync(string CodiceCliente, string CodiceProdotto, string CodicePrivilegio, System.DateTime AttivoDa, System.DateTime AttivoFinoA, string CPU, string BASE, string MAC) {
            this.KeyDataBuildITAsync(CodiceCliente, CodiceProdotto, CodicePrivilegio, AttivoDa, AttivoFinoA, CPU, BASE, MAC, null);
        }
        
        /// <remarks/>
        public void KeyDataBuildITAsync(string CodiceCliente, string CodiceProdotto, string CodicePrivilegio, System.DateTime AttivoDa, System.DateTime AttivoFinoA, string CPU, string BASE, string MAC, object userState) {
            if ((this.KeyDataBuildITOperationCompleted == null)) {
                this.KeyDataBuildITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataBuildITOperationCompleted);
            }
            this.InvokeAsync("KeyDataBuildIT", new object[] {
                        CodiceCliente,
                        CodiceProdotto,
                        CodicePrivilegio,
                        AttivoDa,
                        AttivoFinoA,
                        CPU,
                        BASE,
                        MAC}, this.KeyDataBuildITOperationCompleted, userState);
        }
        
        private void OnKeyDataBuildITOperationCompleted(object arg) {
            if ((this.KeyDataBuildITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataBuildITCompleted(this, new KeyDataBuildITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataExists(LPCredential credential, KeyData data) {
            object[] results = this.Invoke("KeyDataExists", new object[] {
                        credential,
                        data});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataExistsAsync(LPCredential credential, KeyData data) {
            this.KeyDataExistsAsync(credential, data, null);
        }
        
        /// <remarks/>
        public void KeyDataExistsAsync(LPCredential credential, KeyData data, object userState) {
            if ((this.KeyDataExistsOperationCompleted == null)) {
                this.KeyDataExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataExistsOperationCompleted);
            }
            this.InvokeAsync("KeyDataExists", new object[] {
                        credential,
                        data}, this.KeyDataExistsOperationCompleted, userState);
        }
        
        private void OnKeyDataExistsOperationCompleted(object arg) {
            if ((this.KeyDataExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataExistsCompleted(this, new KeyDataExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataExistsByText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataExistsByText(LPCredential credential, string keyDataText, bool encrypted) {
            object[] results = this.Invoke("KeyDataExistsByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataExistsByTextAsync(LPCredential credential, string keyDataText, bool encrypted) {
            this.KeyDataExistsByTextAsync(credential, keyDataText, encrypted, null);
        }
        
        /// <remarks/>
        public void KeyDataExistsByTextAsync(LPCredential credential, string keyDataText, bool encrypted, object userState) {
            if ((this.KeyDataExistsByTextOperationCompleted == null)) {
                this.KeyDataExistsByTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataExistsByTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataExistsByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted}, this.KeyDataExistsByTextOperationCompleted, userState);
        }
        
        private void OnKeyDataExistsByTextOperationCompleted(object arg) {
            if ((this.KeyDataExistsByTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataExistsByTextCompleted(this, new KeyDataExistsByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataExistsByEncrypedText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataExistsByEncrypedText(string encryptedDataText) {
            object[] results = this.Invoke("KeyDataExistsByEncrypedText", new object[] {
                        encryptedDataText});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataExistsByEncrypedTextAsync(string encryptedDataText) {
            this.KeyDataExistsByEncrypedTextAsync(encryptedDataText, null);
        }
        
        /// <remarks/>
        public void KeyDataExistsByEncrypedTextAsync(string encryptedDataText, object userState) {
            if ((this.KeyDataExistsByEncrypedTextOperationCompleted == null)) {
                this.KeyDataExistsByEncrypedTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataExistsByEncrypedTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataExistsByEncrypedText", new object[] {
                        encryptedDataText}, this.KeyDataExistsByEncrypedTextOperationCompleted, userState);
        }
        
        private void OnKeyDataExistsByEncrypedTextOperationCompleted(object arg) {
            if ((this.KeyDataExistsByEncrypedTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataExistsByEncrypedTextCompleted(this, new KeyDataExistsByEncrypedTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataValidate", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataValidate(LPCredential credential, KeyData data) {
            object[] results = this.Invoke("KeyDataValidate", new object[] {
                        credential,
                        data});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataValidateAsync(LPCredential credential, KeyData data) {
            this.KeyDataValidateAsync(credential, data, null);
        }
        
        /// <remarks/>
        public void KeyDataValidateAsync(LPCredential credential, KeyData data, object userState) {
            if ((this.KeyDataValidateOperationCompleted == null)) {
                this.KeyDataValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataValidateOperationCompleted);
            }
            this.InvokeAsync("KeyDataValidate", new object[] {
                        credential,
                        data}, this.KeyDataValidateOperationCompleted, userState);
        }
        
        private void OnKeyDataValidateOperationCompleted(object arg) {
            if ((this.KeyDataValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataValidateCompleted(this, new KeyDataValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataValidateByText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataValidateByText(LPCredential credential, string keyDataText, bool encrypted) {
            object[] results = this.Invoke("KeyDataValidateByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataValidateByTextAsync(LPCredential credential, string keyDataText, bool encrypted) {
            this.KeyDataValidateByTextAsync(credential, keyDataText, encrypted, null);
        }
        
        /// <remarks/>
        public void KeyDataValidateByTextAsync(LPCredential credential, string keyDataText, bool encrypted, object userState) {
            if ((this.KeyDataValidateByTextOperationCompleted == null)) {
                this.KeyDataValidateByTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataValidateByTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataValidateByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted}, this.KeyDataValidateByTextOperationCompleted, userState);
        }
        
        private void OnKeyDataValidateByTextOperationCompleted(object arg) {
            if ((this.KeyDataValidateByTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataValidateByTextCompleted(this, new KeyDataValidateByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataValidateByEncrypedText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataValidateByEncrypedText(string encryptedDataText) {
            object[] results = this.Invoke("KeyDataValidateByEncrypedText", new object[] {
                        encryptedDataText});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataValidateByEncrypedTextAsync(string encryptedDataText) {
            this.KeyDataValidateByEncrypedTextAsync(encryptedDataText, null);
        }
        
        /// <remarks/>
        public void KeyDataValidateByEncrypedTextAsync(string encryptedDataText, object userState) {
            if ((this.KeyDataValidateByEncrypedTextOperationCompleted == null)) {
                this.KeyDataValidateByEncrypedTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataValidateByEncrypedTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataValidateByEncrypedText", new object[] {
                        encryptedDataText}, this.KeyDataValidateByEncrypedTextOperationCompleted, userState);
        }
        
        private void OnKeyDataValidateByEncrypedTextOperationCompleted(object arg) {
            if ((this.KeyDataValidateByEncrypedTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataValidateByEncrypedTextCompleted(this, new KeyDataValidateByEncrypedTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataAdd", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataAdd(LPCredential credential, KeyData data) {
            object[] results = this.Invoke("KeyDataAdd", new object[] {
                        credential,
                        data});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataAddAsync(LPCredential credential, KeyData data) {
            this.KeyDataAddAsync(credential, data, null);
        }
        
        /// <remarks/>
        public void KeyDataAddAsync(LPCredential credential, KeyData data, object userState) {
            if ((this.KeyDataAddOperationCompleted == null)) {
                this.KeyDataAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataAddOperationCompleted);
            }
            this.InvokeAsync("KeyDataAdd", new object[] {
                        credential,
                        data}, this.KeyDataAddOperationCompleted, userState);
        }
        
        private void OnKeyDataAddOperationCompleted(object arg) {
            if ((this.KeyDataAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataAddCompleted(this, new KeyDataAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataAddByText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataAddByText(LPCredential credential, string keyDataText, bool encrypted) {
            object[] results = this.Invoke("KeyDataAddByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataAddByTextAsync(LPCredential credential, string keyDataText, bool encrypted) {
            this.KeyDataAddByTextAsync(credential, keyDataText, encrypted, null);
        }
        
        /// <remarks/>
        public void KeyDataAddByTextAsync(LPCredential credential, string keyDataText, bool encrypted, object userState) {
            if ((this.KeyDataAddByTextOperationCompleted == null)) {
                this.KeyDataAddByTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataAddByTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataAddByText", new object[] {
                        credential,
                        keyDataText,
                        encrypted}, this.KeyDataAddByTextOperationCompleted, userState);
        }
        
        private void OnKeyDataAddByTextOperationCompleted(object arg) {
            if ((this.KeyDataAddByTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataAddByTextCompleted(this, new KeyDataAddByTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataAddByEncrypedText", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyDataAddByEncrypedText(string encryptedDataText) {
            object[] results = this.Invoke("KeyDataAddByEncrypedText", new object[] {
                        encryptedDataText});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataAddByEncrypedTextAsync(string encryptedDataText) {
            this.KeyDataAddByEncrypedTextAsync(encryptedDataText, null);
        }
        
        /// <remarks/>
        public void KeyDataAddByEncrypedTextAsync(string encryptedDataText, object userState) {
            if ((this.KeyDataAddByEncrypedTextOperationCompleted == null)) {
                this.KeyDataAddByEncrypedTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataAddByEncrypedTextOperationCompleted);
            }
            this.InvokeAsync("KeyDataAddByEncrypedText", new object[] {
                        encryptedDataText}, this.KeyDataAddByEncrypedTextOperationCompleted, userState);
        }
        
        private void OnKeyDataAddByEncrypedTextOperationCompleted(object arg) {
            if ((this.KeyDataAddByEncrypedTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataAddByEncrypedTextCompleted(this, new KeyDataAddByEncrypedTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFingerPrintEncrypted", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage GetFingerPrintEncrypted(string decryptedFingerPrint) {
            object[] results = this.Invoke("GetFingerPrintEncrypted", new object[] {
                        decryptedFingerPrint});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetFingerPrintEncryptedAsync(string decryptedFingerPrint) {
            this.GetFingerPrintEncryptedAsync(decryptedFingerPrint, null);
        }
        
        /// <remarks/>
        public void GetFingerPrintEncryptedAsync(string decryptedFingerPrint, object userState) {
            if ((this.GetFingerPrintEncryptedOperationCompleted == null)) {
                this.GetFingerPrintEncryptedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFingerPrintEncryptedOperationCompleted);
            }
            this.InvokeAsync("GetFingerPrintEncrypted", new object[] {
                        decryptedFingerPrint}, this.GetFingerPrintEncryptedOperationCompleted, userState);
        }
        
        private void OnGetFingerPrintEncryptedOperationCompleted(object arg) {
            if ((this.GetFingerPrintEncryptedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFingerPrintEncryptedCompleted(this, new GetFingerPrintEncryptedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFingerPrintDecrypted", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage GetFingerPrintDecrypted(string encryptedFingerPrint) {
            object[] results = this.Invoke("GetFingerPrintDecrypted", new object[] {
                        encryptedFingerPrint});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetFingerPrintDecryptedAsync(string encryptedFingerPrint) {
            this.GetFingerPrintDecryptedAsync(encryptedFingerPrint, null);
        }
        
        /// <remarks/>
        public void GetFingerPrintDecryptedAsync(string encryptedFingerPrint, object userState) {
            if ((this.GetFingerPrintDecryptedOperationCompleted == null)) {
                this.GetFingerPrintDecryptedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFingerPrintDecryptedOperationCompleted);
            }
            this.InvokeAsync("GetFingerPrintDecrypted", new object[] {
                        encryptedFingerPrint}, this.GetFingerPrintDecryptedOperationCompleted, userState);
        }
        
        private void OnGetFingerPrintDecryptedOperationCompleted(object arg) {
            if ((this.GetFingerPrintDecryptedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFingerPrintDecryptedCompleted(this, new GetFingerPrintDecryptedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCode_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerGetCode_GetMethodName() {
            object[] results = this.Invoke("CustomerGetCode_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCode_GetMethodNameAsync() {
            this.CustomerGetCode_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void CustomerGetCode_GetMethodNameAsync(object userState) {
            if ((this.CustomerGetCode_GetMethodNameOperationCompleted == null)) {
                this.CustomerGetCode_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCode_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCode_GetMethodName", new object[0], this.CustomerGetCode_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnCustomerGetCode_GetMethodNameOperationCompleted(object arg) {
            if ((this.CustomerGetCode_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCode_GetMethodNameCompleted(this, new CustomerGetCode_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerGetCodeGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerGetCodeGetMethodName() {
            object[] results = this.Invoke("GetCustomerGetCodeGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeGetMethodNameAsync() {
            this.GetCustomerGetCodeGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeGetMethodNameAsync(object userState) {
            if ((this.GetCustomerGetCodeGetMethodNameOperationCompleted == null)) {
                this.GetCustomerGetCodeGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerGetCodeGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerGetCodeGetMethodName", new object[0], this.GetCustomerGetCodeGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerGetCodeGetMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerGetCodeGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerGetCodeGetMethodNameCompleted(this, new GetCustomerGetCodeGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerGetCodeMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerGetCodeMethodName() {
            object[] results = this.Invoke("GetCustomerGetCodeMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeMethodNameAsync() {
            this.GetCustomerGetCodeMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeMethodNameAsync(object userState) {
            if ((this.GetCustomerGetCodeMethodNameOperationCompleted == null)) {
                this.GetCustomerGetCodeMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerGetCodeMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerGetCodeMethodName", new object[0], this.GetCustomerGetCodeMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerGetCodeMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerGetCodeMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerGetCodeMethodNameCompleted(this, new GetCustomerGetCodeMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCode_GetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerGetCode_GetMethodDescription() {
            object[] results = this.Invoke("CustomerGetCode_GetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCode_GetMethodDescriptionAsync() {
            this.CustomerGetCode_GetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void CustomerGetCode_GetMethodDescriptionAsync(object userState) {
            if ((this.CustomerGetCode_GetMethodDescriptionOperationCompleted == null)) {
                this.CustomerGetCode_GetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCode_GetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCode_GetMethodDescription", new object[0], this.CustomerGetCode_GetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnCustomerGetCode_GetMethodDescriptionOperationCompleted(object arg) {
            if ((this.CustomerGetCode_GetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCode_GetMethodDescriptionCompleted(this, new CustomerGetCode_GetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerGetCodeGetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerGetCodeGetMethodDescription() {
            object[] results = this.Invoke("GetCustomerGetCodeGetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeGetMethodDescriptionAsync() {
            this.GetCustomerGetCodeGetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeGetMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerGetCodeGetMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerGetCodeGetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerGetCodeGetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerGetCodeGetMethodDescription", new object[0], this.GetCustomerGetCodeGetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerGetCodeGetMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerGetCodeGetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerGetCodeGetMethodDescriptionCompleted(this, new GetCustomerGetCodeGetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerGetCodeMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerGetCodeMethodDescription() {
            object[] results = this.Invoke("GetCustomerGetCodeMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeMethodDescriptionAsync() {
            this.GetCustomerGetCodeMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerGetCodeMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerGetCodeMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerGetCodeMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerGetCodeMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerGetCodeMethodDescription", new object[0], this.GetCustomerGetCodeMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerGetCodeMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerGetCodeMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerGetCodeMethodDescriptionCompleted(this, new GetCustomerGetCodeMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExists_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerExists_GetMethodName() {
            object[] results = this.Invoke("CustomerExists_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExists_GetMethodNameAsync() {
            this.CustomerExists_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void CustomerExists_GetMethodNameAsync(object userState) {
            if ((this.CustomerExists_GetMethodNameOperationCompleted == null)) {
                this.CustomerExists_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExists_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("CustomerExists_GetMethodName", new object[0], this.CustomerExists_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnCustomerExists_GetMethodNameOperationCompleted(object arg) {
            if ((this.CustomerExists_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExists_GetMethodNameCompleted(this, new CustomerExists_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerExistsGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerExistsGetMethodName() {
            object[] results = this.Invoke("GetCustomerExistsGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerExistsGetMethodNameAsync() {
            this.GetCustomerExistsGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerExistsGetMethodNameAsync(object userState) {
            if ((this.GetCustomerExistsGetMethodNameOperationCompleted == null)) {
                this.GetCustomerExistsGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerExistsGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerExistsGetMethodName", new object[0], this.GetCustomerExistsGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerExistsGetMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerExistsGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerExistsGetMethodNameCompleted(this, new GetCustomerExistsGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerExistsMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerExistsMethodName() {
            object[] results = this.Invoke("GetCustomerExistsMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerExistsMethodNameAsync() {
            this.GetCustomerExistsMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerExistsMethodNameAsync(object userState) {
            if ((this.GetCustomerExistsMethodNameOperationCompleted == null)) {
                this.GetCustomerExistsMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerExistsMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerExistsMethodName", new object[0], this.GetCustomerExistsMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerExistsMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerExistsMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerExistsMethodNameCompleted(this, new GetCustomerExistsMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExistsByProduct_GetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerExistsByProduct_GetMethodDescription() {
            object[] results = this.Invoke("CustomerExistsByProduct_GetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsByProduct_GetMethodDescriptionAsync() {
            this.CustomerExistsByProduct_GetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void CustomerExistsByProduct_GetMethodDescriptionAsync(object userState) {
            if ((this.CustomerExistsByProduct_GetMethodDescriptionOperationCompleted == null)) {
                this.CustomerExistsByProduct_GetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsByProduct_GetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("CustomerExistsByProduct_GetMethodDescription", new object[0], this.CustomerExistsByProduct_GetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnCustomerExistsByProduct_GetMethodDescriptionOperationCompleted(object arg) {
            if ((this.CustomerExistsByProduct_GetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsByProduct_GetMethodDescriptionCompleted(this, new CustomerExistsByProduct_GetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerExistsByProductGetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerExistsByProductGetMethodDescription() {
            object[] results = this.Invoke("GetCustomerExistsByProductGetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerExistsByProductGetMethodDescriptionAsync() {
            this.GetCustomerExistsByProductGetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerExistsByProductGetMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerExistsByProductGetMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerExistsByProductGetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerExistsByProductGetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerExistsByProductGetMethodDescription", new object[0], this.GetCustomerExistsByProductGetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerExistsByProductGetMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerExistsByProductGetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerExistsByProductGetMethodDescriptionCompleted(this, new GetCustomerExistsByProductGetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerExistsByProductMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerExistsByProductMethodDescription() {
            object[] results = this.Invoke("GetCustomerExistsByProductMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerExistsByProductMethodDescriptionAsync() {
            this.GetCustomerExistsByProductMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerExistsByProductMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerExistsByProductMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerExistsByProductMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerExistsByProductMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerExistsByProductMethodDescription", new object[0], this.GetCustomerExistsByProductMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerExistsByProductMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerExistsByProductMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerExistsByProductMethodDescriptionCompleted(this, new GetCustomerExistsByProductMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignupForDemo_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerSignupForDemo_GetMethodName() {
            object[] results = this.Invoke("CustomerSignupForDemo_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignupForDemo_GetMethodNameAsync() {
            this.CustomerSignupForDemo_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void CustomerSignupForDemo_GetMethodNameAsync(object userState) {
            if ((this.CustomerSignupForDemo_GetMethodNameOperationCompleted == null)) {
                this.CustomerSignupForDemo_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignupForDemo_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("CustomerSignupForDemo_GetMethodName", new object[0], this.CustomerSignupForDemo_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnCustomerSignupForDemo_GetMethodNameOperationCompleted(object arg) {
            if ((this.CustomerSignupForDemo_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignupForDemo_GetMethodNameCompleted(this, new CustomerSignupForDemo_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemoMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemoMethodName() {
            object[] results = this.Invoke("GetCustomerSignupForDemoMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodNameAsync() {
            this.GetCustomerSignupForDemoMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodNameAsync(object userState) {
            if ((this.GetCustomerSignupForDemoMethodNameOperationCompleted == null)) {
                this.GetCustomerSignupForDemoMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemoMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemoMethodName", new object[0], this.GetCustomerSignupForDemoMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemoMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemoMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemoMethodNameCompleted(this, new GetCustomerSignupForDemoMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemo_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemo_GetMethodName() {
            object[] results = this.Invoke("GetCustomerSignupForDemo_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemo_GetMethodNameAsync() {
            this.GetCustomerSignupForDemo_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemo_GetMethodNameAsync(object userState) {
            if ((this.GetCustomerSignupForDemo_GetMethodNameOperationCompleted == null)) {
                this.GetCustomerSignupForDemo_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemo_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemo_GetMethodName", new object[0], this.GetCustomerSignupForDemo_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemo_GetMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemo_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemo_GetMethodNameCompleted(this, new GetCustomerSignupForDemo_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignupForDemo_GetMethodCaption", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerSignupForDemo_GetMethodCaption() {
            object[] results = this.Invoke("CustomerSignupForDemo_GetMethodCaption", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignupForDemo_GetMethodCaptionAsync() {
            this.CustomerSignupForDemo_GetMethodCaptionAsync(null);
        }
        
        /// <remarks/>
        public void CustomerSignupForDemo_GetMethodCaptionAsync(object userState) {
            if ((this.CustomerSignupForDemo_GetMethodCaptionOperationCompleted == null)) {
                this.CustomerSignupForDemo_GetMethodCaptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignupForDemo_GetMethodCaptionOperationCompleted);
            }
            this.InvokeAsync("CustomerSignupForDemo_GetMethodCaption", new object[0], this.CustomerSignupForDemo_GetMethodCaptionOperationCompleted, userState);
        }
        
        private void OnCustomerSignupForDemo_GetMethodCaptionOperationCompleted(object arg) {
            if ((this.CustomerSignupForDemo_GetMethodCaptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignupForDemo_GetMethodCaptionCompleted(this, new CustomerSignupForDemo_GetMethodCaptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemoMethodCaption", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemoMethodCaption() {
            object[] results = this.Invoke("GetCustomerSignupForDemoMethodCaption", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodCaptionAsync() {
            this.GetCustomerSignupForDemoMethodCaptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodCaptionAsync(object userState) {
            if ((this.GetCustomerSignupForDemoMethodCaptionOperationCompleted == null)) {
                this.GetCustomerSignupForDemoMethodCaptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemoMethodCaptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemoMethodCaption", new object[0], this.GetCustomerSignupForDemoMethodCaptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemoMethodCaptionOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemoMethodCaptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemoMethodCaptionCompleted(this, new GetCustomerSignupForDemoMethodCaptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignupForDemoGetMethodCaption", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerSignupForDemoGetMethodCaption() {
            object[] results = this.Invoke("CustomerSignupForDemoGetMethodCaption", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignupForDemoGetMethodCaptionAsync() {
            this.CustomerSignupForDemoGetMethodCaptionAsync(null);
        }
        
        /// <remarks/>
        public void CustomerSignupForDemoGetMethodCaptionAsync(object userState) {
            if ((this.CustomerSignupForDemoGetMethodCaptionOperationCompleted == null)) {
                this.CustomerSignupForDemoGetMethodCaptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignupForDemoGetMethodCaptionOperationCompleted);
            }
            this.InvokeAsync("CustomerSignupForDemoGetMethodCaption", new object[0], this.CustomerSignupForDemoGetMethodCaptionOperationCompleted, userState);
        }
        
        private void OnCustomerSignupForDemoGetMethodCaptionOperationCompleted(object arg) {
            if ((this.CustomerSignupForDemoGetMethodCaptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignupForDemoGetMethodCaptionCompleted(this, new CustomerSignupForDemoGetMethodCaptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignupForDemo_GetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerSignupForDemo_GetMethodDescription() {
            object[] results = this.Invoke("CustomerSignupForDemo_GetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignupForDemo_GetMethodDescriptionAsync() {
            this.CustomerSignupForDemo_GetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void CustomerSignupForDemo_GetMethodDescriptionAsync(object userState) {
            if ((this.CustomerSignupForDemo_GetMethodDescriptionOperationCompleted == null)) {
                this.CustomerSignupForDemo_GetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignupForDemo_GetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("CustomerSignupForDemo_GetMethodDescription", new object[0], this.CustomerSignupForDemo_GetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnCustomerSignupForDemo_GetMethodDescriptionOperationCompleted(object arg) {
            if ((this.CustomerSignupForDemo_GetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignupForDemo_GetMethodDescriptionCompleted(this, new CustomerSignupForDemo_GetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemoMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemoMethodDescription() {
            object[] results = this.Invoke("GetCustomerSignupForDemoMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodDescriptionAsync() {
            this.GetCustomerSignupForDemoMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerSignupForDemoMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerSignupForDemoMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemoMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemoMethodDescription", new object[0], this.GetCustomerSignupForDemoMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemoMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemoMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemoMethodDescriptionCompleted(this, new GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSignupForDemoGetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSignupForDemoGetMethodDescription() {
            object[] results = this.Invoke("GetCustomerSignupForDemoGetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoGetMethodDescriptionAsync() {
            this.GetCustomerSignupForDemoGetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSignupForDemoGetMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerSignupForDemoGetMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerSignupForDemoGetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSignupForDemoGetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSignupForDemoGetMethodDescription", new object[0], this.GetCustomerSignupForDemoGetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSignupForDemoGetMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerSignupForDemoGetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSignupForDemoGetMethodDescriptionCompleted(this, new GetCustomerSignupForDemoGetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSuiteActivations_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerSuiteActivations_GetMethodName() {
            object[] results = this.Invoke("CustomerSuiteActivations_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSuiteActivations_GetMethodNameAsync() {
            this.CustomerSuiteActivations_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void CustomerSuiteActivations_GetMethodNameAsync(object userState) {
            if ((this.CustomerSuiteActivations_GetMethodNameOperationCompleted == null)) {
                this.CustomerSuiteActivations_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSuiteActivations_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("CustomerSuiteActivations_GetMethodName", new object[0], this.CustomerSuiteActivations_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnCustomerSuiteActivations_GetMethodNameOperationCompleted(object arg) {
            if ((this.CustomerSuiteActivations_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSuiteActivations_GetMethodNameCompleted(this, new CustomerSuiteActivations_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSuiteActivationsMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSuiteActivationsMethodName() {
            object[] results = this.Invoke("GetCustomerSuiteActivationsMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsMethodNameAsync() {
            this.GetCustomerSuiteActivationsMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsMethodNameAsync(object userState) {
            if ((this.GetCustomerSuiteActivationsMethodNameOperationCompleted == null)) {
                this.GetCustomerSuiteActivationsMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSuiteActivationsMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSuiteActivationsMethodName", new object[0], this.GetCustomerSuiteActivationsMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerSuiteActivationsMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerSuiteActivationsMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSuiteActivationsMethodNameCompleted(this, new GetCustomerSuiteActivationsMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSuiteActivationsGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSuiteActivationsGetMethodName() {
            object[] results = this.Invoke("GetCustomerSuiteActivationsGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsGetMethodNameAsync() {
            this.GetCustomerSuiteActivationsGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsGetMethodNameAsync(object userState) {
            if ((this.GetCustomerSuiteActivationsGetMethodNameOperationCompleted == null)) {
                this.GetCustomerSuiteActivationsGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSuiteActivationsGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSuiteActivationsGetMethodName", new object[0], this.GetCustomerSuiteActivationsGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerSuiteActivationsGetMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerSuiteActivationsGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSuiteActivationsGetMethodNameCompleted(this, new GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSuiteActivations_GetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerSuiteActivations_GetMethodDescription() {
            object[] results = this.Invoke("CustomerSuiteActivations_GetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSuiteActivations_GetMethodDescriptionAsync() {
            this.CustomerSuiteActivations_GetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void CustomerSuiteActivations_GetMethodDescriptionAsync(object userState) {
            if ((this.CustomerSuiteActivations_GetMethodDescriptionOperationCompleted == null)) {
                this.CustomerSuiteActivations_GetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSuiteActivations_GetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("CustomerSuiteActivations_GetMethodDescription", new object[0], this.CustomerSuiteActivations_GetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnCustomerSuiteActivations_GetMethodDescriptionOperationCompleted(object arg) {
            if ((this.CustomerSuiteActivations_GetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSuiteActivations_GetMethodDescriptionCompleted(this, new CustomerSuiteActivations_GetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSuiteActivationsMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSuiteActivationsMethodDescription() {
            object[] results = this.Invoke("GetCustomerSuiteActivationsMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsMethodDescriptionAsync() {
            this.GetCustomerSuiteActivationsMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerSuiteActivationsMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerSuiteActivationsMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSuiteActivationsMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSuiteActivationsMethodDescription", new object[0], this.GetCustomerSuiteActivationsMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSuiteActivationsMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerSuiteActivationsMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSuiteActivationsMethodDescriptionCompleted(this, new GetCustomerSuiteActivationsMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerSuiteActivationsGetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSuiteActivationsGetMethodDescription() {
            object[] results = this.Invoke("GetCustomerSuiteActivationsGetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsGetMethodDescriptionAsync() {
            this.GetCustomerSuiteActivationsGetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerSuiteActivationsGetMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerSuiteActivationsGetMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerSuiteActivationsGetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSuiteActivationsGetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSuiteActivationsGetMethodDescription", new object[0], this.GetCustomerSuiteActivationsGetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerSuiteActivationsGetMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerSuiteActivationsGetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSuiteActivationsGetMethodDescriptionCompleted(this, new GetCustomerSuiteActivationsGetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerProductActivations_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerProductActivations_GetMethodName() {
            object[] results = this.Invoke("CustomerProductActivations_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerProductActivations_GetMethodNameAsync() {
            this.CustomerProductActivations_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void CustomerProductActivations_GetMethodNameAsync(object userState) {
            if ((this.CustomerProductActivations_GetMethodNameOperationCompleted == null)) {
                this.CustomerProductActivations_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerProductActivations_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("CustomerProductActivations_GetMethodName", new object[0], this.CustomerProductActivations_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnCustomerProductActivations_GetMethodNameOperationCompleted(object arg) {
            if ((this.CustomerProductActivations_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerProductActivations_GetMethodNameCompleted(this, new CustomerProductActivations_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerProductActivationsMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerProductActivationsMethodName() {
            object[] results = this.Invoke("GetCustomerProductActivationsMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsMethodNameAsync() {
            this.GetCustomerProductActivationsMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsMethodNameAsync(object userState) {
            if ((this.GetCustomerProductActivationsMethodNameOperationCompleted == null)) {
                this.GetCustomerProductActivationsMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerProductActivationsMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerProductActivationsMethodName", new object[0], this.GetCustomerProductActivationsMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerProductActivationsMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerProductActivationsMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerProductActivationsMethodNameCompleted(this, new GetCustomerProductActivationsMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerProductActivationsGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerProductActivationsGetMethodName() {
            object[] results = this.Invoke("GetCustomerProductActivationsGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsGetMethodNameAsync() {
            this.GetCustomerProductActivationsGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsGetMethodNameAsync(object userState) {
            if ((this.GetCustomerProductActivationsGetMethodNameOperationCompleted == null)) {
                this.GetCustomerProductActivationsGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerProductActivationsGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetCustomerProductActivationsGetMethodName", new object[0], this.GetCustomerProductActivationsGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetCustomerProductActivationsGetMethodNameOperationCompleted(object arg) {
            if ((this.GetCustomerProductActivationsGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerProductActivationsGetMethodNameCompleted(this, new GetCustomerProductActivationsGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerProductActivations_GetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerProductActivations_GetMethodDescription() {
            object[] results = this.Invoke("CustomerProductActivations_GetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerProductActivations_GetMethodDescriptionAsync() {
            this.CustomerProductActivations_GetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void CustomerProductActivations_GetMethodDescriptionAsync(object userState) {
            if ((this.CustomerProductActivations_GetMethodDescriptionOperationCompleted == null)) {
                this.CustomerProductActivations_GetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerProductActivations_GetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("CustomerProductActivations_GetMethodDescription", new object[0], this.CustomerProductActivations_GetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnCustomerProductActivations_GetMethodDescriptionOperationCompleted(object arg) {
            if ((this.CustomerProductActivations_GetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerProductActivations_GetMethodDescriptionCompleted(this, new CustomerProductActivations_GetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerProductActivationsMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerProductActivationsMethodDescription() {
            object[] results = this.Invoke("GetCustomerProductActivationsMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsMethodDescriptionAsync() {
            this.GetCustomerProductActivationsMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerProductActivationsMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerProductActivationsMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerProductActivationsMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerProductActivationsMethodDescription", new object[0], this.GetCustomerProductActivationsMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerProductActivationsMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerProductActivationsMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerProductActivationsMethodDescriptionCompleted(this, new GetCustomerProductActivationsMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCustomerProductActivationsGetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerProductActivationsGetMethodDescription() {
            object[] results = this.Invoke("GetCustomerProductActivationsGetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsGetMethodDescriptionAsync() {
            this.GetCustomerProductActivationsGetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerProductActivationsGetMethodDescriptionAsync(object userState) {
            if ((this.GetCustomerProductActivationsGetMethodDescriptionOperationCompleted == null)) {
                this.GetCustomerProductActivationsGetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerProductActivationsGetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerProductActivationsGetMethodDescription", new object[0], this.GetCustomerProductActivationsGetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCustomerProductActivationsGetMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetCustomerProductActivationsGetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerProductActivationsGetMethodDescriptionCompleted(this, new GetCustomerProductActivationsGetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/Privilege_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Privilege_GetMethodName() {
            object[] results = this.Invoke("Privilege_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Privilege_GetMethodNameAsync() {
            this.Privilege_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void Privilege_GetMethodNameAsync(object userState) {
            if ((this.Privilege_GetMethodNameOperationCompleted == null)) {
                this.Privilege_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilege_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("Privilege_GetMethodName", new object[0], this.Privilege_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnPrivilege_GetMethodNameOperationCompleted(object arg) {
            if ((this.Privilege_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privilege_GetMethodNameCompleted(this, new Privilege_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetPrivilegeMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrivilegeMethodName() {
            object[] results = this.Invoke("GetPrivilegeMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivilegeMethodNameAsync() {
            this.GetPrivilegeMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetPrivilegeMethodNameAsync(object userState) {
            if ((this.GetPrivilegeMethodNameOperationCompleted == null)) {
                this.GetPrivilegeMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivilegeMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetPrivilegeMethodName", new object[0], this.GetPrivilegeMethodNameOperationCompleted, userState);
        }
        
        private void OnGetPrivilegeMethodNameOperationCompleted(object arg) {
            if ((this.GetPrivilegeMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivilegeMethodNameCompleted(this, new GetPrivilegeMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetPrivilegeGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrivilegeGetMethodName() {
            object[] results = this.Invoke("GetPrivilegeGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivilegeGetMethodNameAsync() {
            this.GetPrivilegeGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetPrivilegeGetMethodNameAsync(object userState) {
            if ((this.GetPrivilegeGetMethodNameOperationCompleted == null)) {
                this.GetPrivilegeGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivilegeGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetPrivilegeGetMethodName", new object[0], this.GetPrivilegeGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetPrivilegeGetMethodNameOperationCompleted(object arg) {
            if ((this.GetPrivilegeGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivilegeGetMethodNameCompleted(this, new GetPrivilegeGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/Privilege_GetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Privilege_GetMethodDescription() {
            object[] results = this.Invoke("Privilege_GetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Privilege_GetMethodDescriptionAsync() {
            this.Privilege_GetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void Privilege_GetMethodDescriptionAsync(object userState) {
            if ((this.Privilege_GetMethodDescriptionOperationCompleted == null)) {
                this.Privilege_GetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilege_GetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("Privilege_GetMethodDescription", new object[0], this.Privilege_GetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnPrivilege_GetMethodDescriptionOperationCompleted(object arg) {
            if ((this.Privilege_GetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Privilege_GetMethodDescriptionCompleted(this, new Privilege_GetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetPrivilegeMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrivilegeMethodDescription() {
            object[] results = this.Invoke("GetPrivilegeMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivilegeMethodDescriptionAsync() {
            this.GetPrivilegeMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetPrivilegeMethodDescriptionAsync(object userState) {
            if ((this.GetPrivilegeMethodDescriptionOperationCompleted == null)) {
                this.GetPrivilegeMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivilegeMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetPrivilegeMethodDescription", new object[0], this.GetPrivilegeMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetPrivilegeMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetPrivilegeMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivilegeMethodDescriptionCompleted(this, new GetPrivilegeMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetPrivilegeGetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrivilegeGetMethodDescription() {
            object[] results = this.Invoke("GetPrivilegeGetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrivilegeGetMethodDescriptionAsync() {
            this.GetPrivilegeGetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetPrivilegeGetMethodDescriptionAsync(object userState) {
            if ((this.GetPrivilegeGetMethodDescriptionOperationCompleted == null)) {
                this.GetPrivilegeGetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrivilegeGetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetPrivilegeGetMethodDescription", new object[0], this.GetPrivilegeGetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetPrivilegeGetMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetPrivilegeGetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrivilegeGetMethodDescriptionCompleted(this, new GetPrivilegeGetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataBuild_GetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string KeyDataBuild_GetMethodName() {
            object[] results = this.Invoke("KeyDataBuild_GetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataBuild_GetMethodNameAsync() {
            this.KeyDataBuild_GetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void KeyDataBuild_GetMethodNameAsync(object userState) {
            if ((this.KeyDataBuild_GetMethodNameOperationCompleted == null)) {
                this.KeyDataBuild_GetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataBuild_GetMethodNameOperationCompleted);
            }
            this.InvokeAsync("KeyDataBuild_GetMethodName", new object[0], this.KeyDataBuild_GetMethodNameOperationCompleted, userState);
        }
        
        private void OnKeyDataBuild_GetMethodNameOperationCompleted(object arg) {
            if ((this.KeyDataBuild_GetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataBuild_GetMethodNameCompleted(this, new KeyDataBuild_GetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetKeyDataBuildMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyDataBuildMethodName() {
            object[] results = this.Invoke("GetKeyDataBuildMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyDataBuildMethodNameAsync() {
            this.GetKeyDataBuildMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetKeyDataBuildMethodNameAsync(object userState) {
            if ((this.GetKeyDataBuildMethodNameOperationCompleted == null)) {
                this.GetKeyDataBuildMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyDataBuildMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetKeyDataBuildMethodName", new object[0], this.GetKeyDataBuildMethodNameOperationCompleted, userState);
        }
        
        private void OnGetKeyDataBuildMethodNameOperationCompleted(object arg) {
            if ((this.GetKeyDataBuildMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyDataBuildMethodNameCompleted(this, new GetKeyDataBuildMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetKeyDataBuildGetMethodName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyDataBuildGetMethodName() {
            object[] results = this.Invoke("GetKeyDataBuildGetMethodName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyDataBuildGetMethodNameAsync() {
            this.GetKeyDataBuildGetMethodNameAsync(null);
        }
        
        /// <remarks/>
        public void GetKeyDataBuildGetMethodNameAsync(object userState) {
            if ((this.GetKeyDataBuildGetMethodNameOperationCompleted == null)) {
                this.GetKeyDataBuildGetMethodNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyDataBuildGetMethodNameOperationCompleted);
            }
            this.InvokeAsync("GetKeyDataBuildGetMethodName", new object[0], this.GetKeyDataBuildGetMethodNameOperationCompleted, userState);
        }
        
        private void OnGetKeyDataBuildGetMethodNameOperationCompleted(object arg) {
            if ((this.GetKeyDataBuildGetMethodNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyDataBuildGetMethodNameCompleted(this, new GetKeyDataBuildGetMethodNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyDataBuild_GetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string KeyDataBuild_GetMethodDescription() {
            object[] results = this.Invoke("KeyDataBuild_GetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void KeyDataBuild_GetMethodDescriptionAsync() {
            this.KeyDataBuild_GetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void KeyDataBuild_GetMethodDescriptionAsync(object userState) {
            if ((this.KeyDataBuild_GetMethodDescriptionOperationCompleted == null)) {
                this.KeyDataBuild_GetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyDataBuild_GetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("KeyDataBuild_GetMethodDescription", new object[0], this.KeyDataBuild_GetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnKeyDataBuild_GetMethodDescriptionOperationCompleted(object arg) {
            if ((this.KeyDataBuild_GetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyDataBuild_GetMethodDescriptionCompleted(this, new KeyDataBuild_GetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetKeyDataBuildMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyDataBuildMethodDescription() {
            object[] results = this.Invoke("GetKeyDataBuildMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyDataBuildMethodDescriptionAsync() {
            this.GetKeyDataBuildMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetKeyDataBuildMethodDescriptionAsync(object userState) {
            if ((this.GetKeyDataBuildMethodDescriptionOperationCompleted == null)) {
                this.GetKeyDataBuildMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyDataBuildMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetKeyDataBuildMethodDescription", new object[0], this.GetKeyDataBuildMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetKeyDataBuildMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetKeyDataBuildMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyDataBuildMethodDescriptionCompleted(this, new GetKeyDataBuildMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetKeyDataBuildGetMethodDescription", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyDataBuildGetMethodDescription() {
            object[] results = this.Invoke("GetKeyDataBuildGetMethodDescription", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyDataBuildGetMethodDescriptionAsync() {
            this.GetKeyDataBuildGetMethodDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void GetKeyDataBuildGetMethodDescriptionAsync(object userState) {
            if ((this.GetKeyDataBuildGetMethodDescriptionOperationCompleted == null)) {
                this.GetKeyDataBuildGetMethodDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyDataBuildGetMethodDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetKeyDataBuildGetMethodDescription", new object[0], this.GetKeyDataBuildGetMethodDescriptionOperationCompleted, userState);
        }
        
        private void OnGetKeyDataBuildGetMethodDescriptionOperationCompleted(object arg) {
            if ((this.GetKeyDataBuildGetMethodDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyDataBuildGetMethodDescriptionCompleted(this, new GetKeyDataBuildGetMethodDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ExtendedProperty_GetDefaultValueKindName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExtendedProperty_GetDefaultValueKindName() {
            object[] results = this.Invoke("ExtendedProperty_GetDefaultValueKindName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetDefaultValueKindNameAsync() {
            this.ExtendedProperty_GetDefaultValueKindNameAsync(null);
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetDefaultValueKindNameAsync(object userState) {
            if ((this.ExtendedProperty_GetDefaultValueKindNameOperationCompleted == null)) {
                this.ExtendedProperty_GetDefaultValueKindNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtendedProperty_GetDefaultValueKindNameOperationCompleted);
            }
            this.InvokeAsync("ExtendedProperty_GetDefaultValueKindName", new object[0], this.ExtendedProperty_GetDefaultValueKindNameOperationCompleted, userState);
        }
        
        private void OnExtendedProperty_GetDefaultValueKindNameOperationCompleted(object arg) {
            if ((this.ExtendedProperty_GetDefaultValueKindNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtendedProperty_GetDefaultValueKindNameCompleted(this, new ExtendedProperty_GetDefaultValueKindNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyDefaultValueKindName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyDefaultValueKindName() {
            object[] results = this.Invoke("GetExtendedPropertyDefaultValueKindName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyDefaultValueKindNameAsync() {
            this.GetExtendedPropertyDefaultValueKindNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyDefaultValueKindNameAsync(object userState) {
            if ((this.GetExtendedPropertyDefaultValueKindNameOperationCompleted == null)) {
                this.GetExtendedPropertyDefaultValueKindNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyDefaultValueKindNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyDefaultValueKindName", new object[0], this.GetExtendedPropertyDefaultValueKindNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyDefaultValueKindNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyDefaultValueKindNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyDefaultValueKindNameCompleted(this, new GetExtendedPropertyDefaultValueKindNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ExtendedProperty_GetPrimaryKeyIndexName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExtendedProperty_GetPrimaryKeyIndexName() {
            object[] results = this.Invoke("ExtendedProperty_GetPrimaryKeyIndexName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetPrimaryKeyIndexNameAsync() {
            this.ExtendedProperty_GetPrimaryKeyIndexNameAsync(null);
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetPrimaryKeyIndexNameAsync(object userState) {
            if ((this.ExtendedProperty_GetPrimaryKeyIndexNameOperationCompleted == null)) {
                this.ExtendedProperty_GetPrimaryKeyIndexNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtendedProperty_GetPrimaryKeyIndexNameOperationCompleted);
            }
            this.InvokeAsync("ExtendedProperty_GetPrimaryKeyIndexName", new object[0], this.ExtendedProperty_GetPrimaryKeyIndexNameOperationCompleted, userState);
        }
        
        private void OnExtendedProperty_GetPrimaryKeyIndexNameOperationCompleted(object arg) {
            if ((this.ExtendedProperty_GetPrimaryKeyIndexNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtendedProperty_GetPrimaryKeyIndexNameCompleted(this, new ExtendedProperty_GetPrimaryKeyIndexNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyPrimaryKeyIndexName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyPrimaryKeyIndexName() {
            object[] results = this.Invoke("GetExtendedPropertyPrimaryKeyIndexName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyPrimaryKeyIndexNameAsync() {
            this.GetExtendedPropertyPrimaryKeyIndexNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyPrimaryKeyIndexNameAsync(object userState) {
            if ((this.GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted == null)) {
                this.GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyPrimaryKeyIndexNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyPrimaryKeyIndexName", new object[0], this.GetExtendedPropertyPrimaryKeyIndexNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyPrimaryKeyIndexNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyPrimaryKeyIndexNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyPrimaryKeyIndexNameCompleted(this, new GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ExtendedProperty_GetForeingKeyReferenceName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExtendedProperty_GetForeingKeyReferenceName() {
            object[] results = this.Invoke("ExtendedProperty_GetForeingKeyReferenceName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetForeingKeyReferenceNameAsync() {
            this.ExtendedProperty_GetForeingKeyReferenceNameAsync(null);
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetForeingKeyReferenceNameAsync(object userState) {
            if ((this.ExtendedProperty_GetForeingKeyReferenceNameOperationCompleted == null)) {
                this.ExtendedProperty_GetForeingKeyReferenceNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtendedProperty_GetForeingKeyReferenceNameOperationCompleted);
            }
            this.InvokeAsync("ExtendedProperty_GetForeingKeyReferenceName", new object[0], this.ExtendedProperty_GetForeingKeyReferenceNameOperationCompleted, userState);
        }
        
        private void OnExtendedProperty_GetForeingKeyReferenceNameOperationCompleted(object arg) {
            if ((this.ExtendedProperty_GetForeingKeyReferenceNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtendedProperty_GetForeingKeyReferenceNameCompleted(this, new ExtendedProperty_GetForeingKeyReferenceNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyForeingKeyReferenceName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyForeingKeyReferenceName() {
            object[] results = this.Invoke("GetExtendedPropertyForeingKeyReferenceName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeingKeyReferenceNameAsync() {
            this.GetExtendedPropertyForeingKeyReferenceNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeingKeyReferenceNameAsync(object userState) {
            if ((this.GetExtendedPropertyForeingKeyReferenceNameOperationCompleted == null)) {
                this.GetExtendedPropertyForeingKeyReferenceNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyForeingKeyReferenceNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyForeingKeyReferenceName", new object[0], this.GetExtendedPropertyForeingKeyReferenceNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyForeingKeyReferenceNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyForeingKeyReferenceNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyForeingKeyReferenceNameCompleted(this, new GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ExtendedProperty_GetForeignKeyReferenceDisplayMemberName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExtendedProperty_GetForeignKeyReferenceDisplayMemberName() {
            object[] results = this.Invoke("ExtendedProperty_GetForeignKeyReferenceDisplayMemberName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameAsync() {
            this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameAsync(null);
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameAsync(object userState) {
            if ((this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameOperationCompleted == null)) {
                this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtendedProperty_GetForeignKeyReferenceDisplayMemberNameOperationCompleted);
            }
            this.InvokeAsync("ExtendedProperty_GetForeignKeyReferenceDisplayMemberName", new object[0], this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameOperationCompleted, userState);
        }
        
        private void OnExtendedProperty_GetForeignKeyReferenceDisplayMemberNameOperationCompleted(object arg) {
            if ((this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompleted(this, new ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyForeignKeyReferenceDisplayMemberName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyForeignKeyReferenceDisplayMemberName() {
            object[] results = this.Invoke("GetExtendedPropertyForeignKeyReferenceDisplayMemberName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberNameAsync() {
            this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberNameAsync(object userState) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted == null)) {
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyForeignKeyReferenceDisplayMemberName", new object[0], this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyForeignKeyReferenceDisplayMemberNameOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompleted(this, new GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ExtendedProperty_GetForeignKeyReferenceDisplayMemberSepara" +
            "tor", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparator() {
            object[] results = this.Invoke("ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparator", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorAsync() {
            this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorAsync(null);
        }
        
        /// <remarks/>
        public void ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorAsync(object userState) {
            if ((this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorOperationCompleted == null)) {
                this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorOperationCompleted);
            }
            this.InvokeAsync("ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparator", new object[0], this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorOperationCompleted, userState);
        }
        
        private void OnExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorOperationCompleted(object arg) {
            if ((this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompleted(this, new ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparat" +
            "or", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparator() {
            object[] results = this.Invoke("GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparator", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorAsync() {
            this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorAsync(null);
        }
        
        /// <remarks/>
        public void GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorAsync(object userState) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted == null)) {
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted);
            }
            this.InvokeAsync("GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparator", new object[0], this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted, userState);
        }
        
        private void OnGetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorOperationCompleted(object arg) {
            if ((this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompleted(this, new GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetOptionalParameterPrefix", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOptionalParameterPrefix() {
            object[] results = this.Invoke("GetOptionalParameterPrefix", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOptionalParameterPrefixAsync() {
            this.GetOptionalParameterPrefixAsync(null);
        }
        
        /// <remarks/>
        public void GetOptionalParameterPrefixAsync(object userState) {
            if ((this.GetOptionalParameterPrefixOperationCompleted == null)) {
                this.GetOptionalParameterPrefixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOptionalParameterPrefixOperationCompleted);
            }
            this.InvokeAsync("GetOptionalParameterPrefix", new object[0], this.GetOptionalParameterPrefixOperationCompleted, userState);
        }
        
        private void OnGetOptionalParameterPrefixOperationCompleted(object arg) {
            if ((this.GetOptionalParameterPrefixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOptionalParameterPrefixCompleted(this, new GetOptionalParameterPrefixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameID() {
            object[] results = this.Invoke("GetFieldNameID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameIDAsync() {
            this.GetFieldNameIDAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameIDAsync(object userState) {
            if ((this.GetFieldNameIDOperationCompleted == null)) {
                this.GetFieldNameIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameIDOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameID", new object[0], this.GetFieldNameIDOperationCompleted, userState);
        }
        
        private void OnGetFieldNameIDOperationCompleted(object arg) {
            if ((this.GetFieldNameIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameIDCompleted(this, new GetFieldNameIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameCode() {
            object[] results = this.Invoke("GetFieldNameCode", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameCodeAsync() {
            this.GetFieldNameCodeAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameCodeAsync(object userState) {
            if ((this.GetFieldNameCodeOperationCompleted == null)) {
                this.GetFieldNameCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameCodeOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameCode", new object[0], this.GetFieldNameCodeOperationCompleted, userState);
        }
        
        private void OnGetFieldNameCodeOperationCompleted(object arg) {
            if ((this.GetFieldNameCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameCodeCompleted(this, new GetFieldNameCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationCode() {
            object[] results = this.Invoke("GetFieldNameActivationCode", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationCodeAsync() {
            this.GetFieldNameActivationCodeAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationCodeAsync(object userState) {
            if ((this.GetFieldNameActivationCodeOperationCompleted == null)) {
                this.GetFieldNameActivationCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationCodeOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationCode", new object[0], this.GetFieldNameActivationCodeOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationCodeOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationCodeCompleted(this, new GetFieldNameActivationCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationCustomerID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationCustomerID() {
            object[] results = this.Invoke("GetFieldNameActivationCustomerID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationCustomerIDAsync() {
            this.GetFieldNameActivationCustomerIDAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationCustomerIDAsync(object userState) {
            if ((this.GetFieldNameActivationCustomerIDOperationCompleted == null)) {
                this.GetFieldNameActivationCustomerIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationCustomerIDOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationCustomerID", new object[0], this.GetFieldNameActivationCustomerIDOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationCustomerIDOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationCustomerIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationCustomerIDCompleted(this, new GetFieldNameActivationCustomerIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationProductID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationProductID() {
            object[] results = this.Invoke("GetFieldNameActivationProductID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationProductIDAsync() {
            this.GetFieldNameActivationProductIDAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationProductIDAsync(object userState) {
            if ((this.GetFieldNameActivationProductIDOperationCompleted == null)) {
                this.GetFieldNameActivationProductIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationProductIDOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationProductID", new object[0], this.GetFieldNameActivationProductIDOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationProductIDOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationProductIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationProductIDCompleted(this, new GetFieldNameActivationProductIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationPrivilegeID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationPrivilegeID() {
            object[] results = this.Invoke("GetFieldNameActivationPrivilegeID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationPrivilegeIDAsync() {
            this.GetFieldNameActivationPrivilegeIDAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationPrivilegeIDAsync(object userState) {
            if ((this.GetFieldNameActivationPrivilegeIDOperationCompleted == null)) {
                this.GetFieldNameActivationPrivilegeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationPrivilegeIDOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationPrivilegeID", new object[0], this.GetFieldNameActivationPrivilegeIDOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationPrivilegeIDOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationPrivilegeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationPrivilegeIDCompleted(this, new GetFieldNameActivationPrivilegeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationActiveFrom", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationActiveFrom() {
            object[] results = this.Invoke("GetFieldNameActivationActiveFrom", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationActiveFromAsync() {
            this.GetFieldNameActivationActiveFromAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationActiveFromAsync(object userState) {
            if ((this.GetFieldNameActivationActiveFromOperationCompleted == null)) {
                this.GetFieldNameActivationActiveFromOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationActiveFromOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationActiveFrom", new object[0], this.GetFieldNameActivationActiveFromOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationActiveFromOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationActiveFromCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationActiveFromCompleted(this, new GetFieldNameActivationActiveFromCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationActiveUntil", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationActiveUntil() {
            object[] results = this.Invoke("GetFieldNameActivationActiveUntil", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationActiveUntilAsync() {
            this.GetFieldNameActivationActiveUntilAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationActiveUntilAsync(object userState) {
            if ((this.GetFieldNameActivationActiveUntilOperationCompleted == null)) {
                this.GetFieldNameActivationActiveUntilOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationActiveUntilOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationActiveUntil", new object[0], this.GetFieldNameActivationActiveUntilOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationActiveUntilOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationActiveUntilCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationActiveUntilCompleted(this, new GetFieldNameActivationActiveUntilCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationNotes", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationNotes() {
            object[] results = this.Invoke("GetFieldNameActivationNotes", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationNotesAsync() {
            this.GetFieldNameActivationNotesAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationNotesAsync(object userState) {
            if ((this.GetFieldNameActivationNotesOperationCompleted == null)) {
                this.GetFieldNameActivationNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationNotesOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationNotes", new object[0], this.GetFieldNameActivationNotesOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationNotesOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationNotesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationNotesCompleted(this, new GetFieldNameActivationNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetFieldNameActivationKey", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFieldNameActivationKey() {
            object[] results = this.Invoke("GetFieldNameActivationKey", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFieldNameActivationKeyAsync() {
            this.GetFieldNameActivationKeyAsync(null);
        }
        
        /// <remarks/>
        public void GetFieldNameActivationKeyAsync(object userState) {
            if ((this.GetFieldNameActivationKeyOperationCompleted == null)) {
                this.GetFieldNameActivationKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFieldNameActivationKeyOperationCompleted);
            }
            this.InvokeAsync("GetFieldNameActivationKey", new object[0], this.GetFieldNameActivationKeyOperationCompleted, userState);
        }
        
        private void OnGetFieldNameActivationKeyOperationCompleted(object arg) {
            if ((this.GetFieldNameActivationKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFieldNameActivationKeyCompleted(this, new GetFieldNameActivationKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetStatus", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatus() {
            object[] results = this.Invoke("GetStatus", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusAsync() {
            this.GetStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetStatusAsync(object userState) {
            if ((this.GetStatusOperationCompleted == null)) {
                this.GetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOperationCompleted);
            }
            this.InvokeAsync("GetStatus", new object[0], this.GetStatusOperationCompleted, userState);
        }
        
        private void OnGetStatusOperationCompleted(object arg) {
            if ((this.GetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetStatusTimeStamp", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetStatusTimeStamp() {
            object[] results = this.Invoke("GetStatusTimeStamp", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusTimeStampAsync() {
            this.GetStatusTimeStampAsync(null);
        }
        
        /// <remarks/>
        public void GetStatusTimeStampAsync(object userState) {
            if ((this.GetStatusTimeStampOperationCompleted == null)) {
                this.GetStatusTimeStampOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusTimeStampOperationCompleted);
            }
            this.InvokeAsync("GetStatusTimeStamp", new object[0], this.GetStatusTimeStampOperationCompleted, userState);
        }
        
        private void OnGetStatusTimeStampOperationCompleted(object arg) {
            if ((this.GetStatusTimeStampCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusTimeStampCompleted(this, new GetStatusTimeStampCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetCreateTimeStamp", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetCreateTimeStamp() {
            object[] results = this.Invoke("GetCreateTimeStamp", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreateTimeStampAsync() {
            this.GetCreateTimeStampAsync(null);
        }
        
        /// <remarks/>
        public void GetCreateTimeStampAsync(object userState) {
            if ((this.GetCreateTimeStampOperationCompleted == null)) {
                this.GetCreateTimeStampOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreateTimeStampOperationCompleted);
            }
            this.InvokeAsync("GetCreateTimeStamp", new object[0], this.GetCreateTimeStampOperationCompleted, userState);
        }
        
        private void OnGetCreateTimeStampOperationCompleted(object arg) {
            if ((this.GetCreateTimeStampCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreateTimeStampCompleted(this, new GetCreateTimeStampCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/GetElaspedTimeStamp", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TimeSpan GetElaspedTimeStamp() {
            object[] results = this.Invoke("GetElaspedTimeStamp", new object[0]);
            return ((TimeSpan)(results[0]));
        }
        
        /// <remarks/>
        public void GetElaspedTimeStampAsync() {
            this.GetElaspedTimeStampAsync(null);
        }
        
        /// <remarks/>
        public void GetElaspedTimeStampAsync(object userState) {
            if ((this.GetElaspedTimeStampOperationCompleted == null)) {
                this.GetElaspedTimeStampOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetElaspedTimeStampOperationCompleted);
            }
            this.InvokeAsync("GetElaspedTimeStamp", new object[0], this.GetElaspedTimeStampOperationCompleted, userState);
        }
        
        private void OnGetElaspedTimeStampOperationCompleted(object arg) {
            if ((this.GetElaspedTimeStampCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetElaspedTimeStampCompleted(this, new GetElaspedTimeStampCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/DoLogin", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage DoLogin(LPCredential credential) {
            object[] results = this.Invoke("DoLogin", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void DoLoginAsync(LPCredential credential) {
            this.DoLoginAsync(credential, null);
        }
        
        /// <remarks/>
        public void DoLoginAsync(LPCredential credential, object userState) {
            if ((this.DoLoginOperationCompleted == null)) {
                this.DoLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoLoginOperationCompleted);
            }
            this.InvokeAsync("DoLogin", new object[] {
                        credential}, this.DoLoginOperationCompleted, userState);
        }
        
        private void OnDoLoginOperationCompleted(object arg) {
            if ((this.DoLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoLoginCompleted(this, new DoLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CredentialGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPCredential CredentialGet(string login, string password, string context) {
            object[] results = this.Invoke("CredentialGet", new object[] {
                        login,
                        password,
                        context});
            return ((LPCredential)(results[0]));
        }
        
        /// <remarks/>
        public void CredentialGetAsync(string login, string password, string context) {
            this.CredentialGetAsync(login, password, context, null);
        }
        
        /// <remarks/>
        public void CredentialGetAsync(string login, string password, string context, object userState) {
            if ((this.CredentialGetOperationCompleted == null)) {
                this.CredentialGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCredentialGetOperationCompleted);
            }
            this.InvokeAsync("CredentialGet", new object[] {
                        login,
                        password,
                        context}, this.CredentialGetOperationCompleted, userState);
        }
        
        private void OnCredentialGetOperationCompleted(object arg) {
            if ((this.CredentialGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CredentialGetCompleted(this, new CredentialGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataSet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataSet(LPCredential credential) {
            object[] results = this.Invoke("getDataSet", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataSetAsync(LPCredential credential) {
            this.getDataSetAsync(credential, null);
        }
        
        /// <remarks/>
        public void getDataSetAsync(LPCredential credential, object userState) {
            if ((this.getDataSetOperationCompleted == null)) {
                this.getDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataSetOperationCompleted);
            }
            this.InvokeAsync("getDataSet", new object[] {
                        credential}, this.getDataSetOperationCompleted, userState);
        }
        
        private void OngetDataSetOperationCompleted(object arg) {
            if ((this.getDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataSetCompleted(this, new getDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/setDataSet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage setDataSet(LPCredential credential, System.Data.DataSet dataSet) {
            object[] results = this.Invoke("setDataSet", new object[] {
                        credential,
                        dataSet});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void setDataSetAsync(LPCredential credential, System.Data.DataSet dataSet) {
            this.setDataSetAsync(credential, dataSet, null);
        }
        
        /// <remarks/>
        public void setDataSetAsync(LPCredential credential, System.Data.DataSet dataSet, object userState) {
            if ((this.setDataSetOperationCompleted == null)) {
                this.setDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDataSetOperationCompleted);
            }
            this.InvokeAsync("setDataSet", new object[] {
                        credential,
                        dataSet}, this.setDataSetOperationCompleted, userState);
        }
        
        private void OnsetDataSetOperationCompleted(object arg) {
            if ((this.setDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDataSetCompleted(this, new setDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataSetTables", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataSetTables(LPCredential credential) {
            object[] results = this.Invoke("getDataSetTables", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataSetTablesAsync(LPCredential credential) {
            this.getDataSetTablesAsync(credential, null);
        }
        
        /// <remarks/>
        public void getDataSetTablesAsync(LPCredential credential, object userState) {
            if ((this.getDataSetTablesOperationCompleted == null)) {
                this.getDataSetTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataSetTablesOperationCompleted);
            }
            this.InvokeAsync("getDataSetTables", new object[] {
                        credential}, this.getDataSetTablesOperationCompleted, userState);
        }
        
        private void OngetDataSetTablesOperationCompleted(object arg) {
            if ((this.getDataSetTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataSetTablesCompleted(this, new getDataSetTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataTable", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataTable(LPCredential credential, string dataTableName) {
            object[] results = this.Invoke("getDataTable", new object[] {
                        credential,
                        dataTableName});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableAsync(LPCredential credential, string dataTableName) {
            this.getDataTableAsync(credential, dataTableName, null);
        }
        
        /// <remarks/>
        public void getDataTableAsync(LPCredential credential, string dataTableName, object userState) {
            if ((this.getDataTableOperationCompleted == null)) {
                this.getDataTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableOperationCompleted);
            }
            this.InvokeAsync("getDataTable", new object[] {
                        credential,
                        dataTableName}, this.getDataTableOperationCompleted, userState);
        }
        
        private void OngetDataTableOperationCompleted(object arg) {
            if ((this.getDataTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableCompleted(this, new getDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/setDataTable", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage setDataTable(LPCredential credential, System.Data.DataTable dataTable) {
            object[] results = this.Invoke("setDataTable", new object[] {
                        credential,
                        dataTable});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void setDataTableAsync(LPCredential credential, System.Data.DataTable dataTable) {
            this.setDataTableAsync(credential, dataTable, null);
        }
        
        /// <remarks/>
        public void setDataTableAsync(LPCredential credential, System.Data.DataTable dataTable, object userState) {
            if ((this.setDataTableOperationCompleted == null)) {
                this.setDataTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDataTableOperationCompleted);
            }
            this.InvokeAsync("setDataTable", new object[] {
                        credential,
                        dataTable}, this.setDataTableOperationCompleted, userState);
        }
        
        private void OnsetDataTableOperationCompleted(object arg) {
            if ((this.setDataTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDataTableCompleted(this, new setDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataTableCount", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataTableCount(LPCredential credential, string dataTableName, string rowFilter) {
            object[] results = this.Invoke("getDataTableCount", new object[] {
                        credential,
                        dataTableName,
                        rowFilter});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableCountAsync(LPCredential credential, string dataTableName, string rowFilter) {
            this.getDataTableCountAsync(credential, dataTableName, rowFilter, null);
        }
        
        /// <remarks/>
        public void getDataTableCountAsync(LPCredential credential, string dataTableName, string rowFilter, object userState) {
            if ((this.getDataTableCountOperationCompleted == null)) {
                this.getDataTableCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableCountOperationCompleted);
            }
            this.InvokeAsync("getDataTableCount", new object[] {
                        credential,
                        dataTableName,
                        rowFilter}, this.getDataTableCountOperationCompleted, userState);
        }
        
        private void OngetDataTableCountOperationCompleted(object arg) {
            if ((this.getDataTableCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableCountCompleted(this, new getDataTableCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/getDataTableValue", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage getDataTableValue(LPCredential credential, string dataTableName, string columnName, string rowFilter, string rowSort, int rowIndex, object isNullValue) {
            object[] results = this.Invoke("getDataTableValue", new object[] {
                        credential,
                        dataTableName,
                        columnName,
                        rowFilter,
                        rowSort,
                        rowIndex,
                        isNullValue});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableValueAsync(LPCredential credential, string dataTableName, string columnName, string rowFilter, string rowSort, int rowIndex, object isNullValue) {
            this.getDataTableValueAsync(credential, dataTableName, columnName, rowFilter, rowSort, rowIndex, isNullValue, null);
        }
        
        /// <remarks/>
        public void getDataTableValueAsync(LPCredential credential, string dataTableName, string columnName, string rowFilter, string rowSort, int rowIndex, object isNullValue, object userState) {
            if ((this.getDataTableValueOperationCompleted == null)) {
                this.getDataTableValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableValueOperationCompleted);
            }
            this.InvokeAsync("getDataTableValue", new object[] {
                        credential,
                        dataTableName,
                        columnName,
                        rowFilter,
                        rowSort,
                        rowIndex,
                        isNullValue}, this.getDataTableValueOperationCompleted, userState);
        }
        
        private void OngetDataTableValueOperationCompleted(object arg) {
            if ((this.getDataTableValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableValueCompleted(this, new getDataTableValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextTableName(LPCredential credential) {
            object[] results = this.Invoke("ContextTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextTableNameAsync(LPCredential credential) {
            this.ContextTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void ContextTableNameAsync(LPCredential credential, object userState) {
            if ((this.ContextTableNameOperationCompleted == null)) {
                this.ContextTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextTableNameOperationCompleted);
            }
            this.InvokeAsync("ContextTableName", new object[] {
                        credential}, this.ContextTableNameOperationCompleted, userState);
        }
        
        private void OnContextTableNameOperationCompleted(object arg) {
            if ((this.ContextTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextTableNameCompleted(this, new ContextTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextList(LPCredential credential) {
            object[] results = this.Invoke("ContextList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextListAsync(LPCredential credential) {
            this.ContextListAsync(credential, null);
        }
        
        /// <remarks/>
        public void ContextListAsync(LPCredential credential, object userState) {
            if ((this.ContextListOperationCompleted == null)) {
                this.ContextListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextListOperationCompleted);
            }
            this.InvokeAsync("ContextList", new object[] {
                        credential}, this.ContextListOperationCompleted, userState);
        }
        
        private void OnContextListOperationCompleted(object arg) {
            if ((this.ContextListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextListCompleted(this, new ContextListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetID(LPCredential credential, string byCode, string orDescription) {
            object[] results = this.Invoke("ContextGetID", new object[] {
                        credential,
                        byCode,
                        orDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetIDAsync(LPCredential credential, string byCode, string orDescription) {
            this.ContextGetIDAsync(credential, byCode, orDescription, null);
        }
        
        /// <remarks/>
        public void ContextGetIDAsync(LPCredential credential, string byCode, string orDescription, object userState) {
            if ((this.ContextGetIDOperationCompleted == null)) {
                this.ContextGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetIDOperationCompleted);
            }
            this.InvokeAsync("ContextGetID", new object[] {
                        credential,
                        byCode,
                        orDescription}, this.ContextGetIDOperationCompleted, userState);
        }
        
        private void OnContextGetIDOperationCompleted(object arg) {
            if ((this.ContextGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetIDCompleted(this, new ContextGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetCode(LPCredential credential, string byDescription) {
            object[] results = this.Invoke("ContextGetCode", new object[] {
                        credential,
                        byDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetCodeAsync(LPCredential credential, string byDescription) {
            this.ContextGetCodeAsync(credential, byDescription, null);
        }
        
        /// <remarks/>
        public void ContextGetCodeAsync(LPCredential credential, string byDescription, object userState) {
            if ((this.ContextGetCodeOperationCompleted == null)) {
                this.ContextGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetCodeOperationCompleted);
            }
            this.InvokeAsync("ContextGetCode", new object[] {
                        credential,
                        byDescription}, this.ContextGetCodeOperationCompleted, userState);
        }
        
        private void OnContextGetCodeOperationCompleted(object arg) {
            if ((this.ContextGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetCodeCompleted(this, new ContextGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ContextGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.ContextGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ContextGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ContextGetUniqueNameOperationCompleted == null)) {
                this.ContextGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("ContextGetUniqueName", new object[] {
                        credential,
                        byCode}, this.ContextGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnContextGetUniqueNameOperationCompleted(object arg) {
            if ((this.ContextGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextGetUniqueNameCompleted(this, new ContextGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ContextExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ContextExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ContextExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ContextExistsAsync(LPCredential credential, string byCode) {
            this.ContextExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ContextExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ContextExistsOperationCompleted == null)) {
                this.ContextExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContextExistsOperationCompleted);
            }
            this.InvokeAsync("ContextExists", new object[] {
                        credential,
                        byCode}, this.ContextExistsOperationCompleted, userState);
        }
        
        private void OnContextExistsOperationCompleted(object arg) {
            if ((this.ContextExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContextExistsCompleted(this, new ContextExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserTableName(LPCredential credential) {
            object[] results = this.Invoke("UserTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserTableNameAsync(LPCredential credential) {
            this.UserTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void UserTableNameAsync(LPCredential credential, object userState) {
            if ((this.UserTableNameOperationCompleted == null)) {
                this.UserTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserTableNameOperationCompleted);
            }
            this.InvokeAsync("UserTableName", new object[] {
                        credential}, this.UserTableNameOperationCompleted, userState);
        }
        
        private void OnUserTableNameOperationCompleted(object arg) {
            if ((this.UserTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserTableNameCompleted(this, new UserTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserList(LPCredential credential) {
            object[] results = this.Invoke("UserList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserListAsync(LPCredential credential) {
            this.UserListAsync(credential, null);
        }
        
        /// <remarks/>
        public void UserListAsync(LPCredential credential, object userState) {
            if ((this.UserListOperationCompleted == null)) {
                this.UserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserListOperationCompleted);
            }
            this.InvokeAsync("UserList", new object[] {
                        credential}, this.UserListOperationCompleted, userState);
        }
        
        private void OnUserListOperationCompleted(object arg) {
            if ((this.UserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserListCompleted(this, new UserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetID(LPCredential credential, string byCode, string orLogin, string orEmail) {
            object[] results = this.Invoke("UserGetID", new object[] {
                        credential,
                        byCode,
                        orLogin,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetIDAsync(LPCredential credential, string byCode, string orLogin, string orEmail) {
            this.UserGetIDAsync(credential, byCode, orLogin, orEmail, null);
        }
        
        /// <remarks/>
        public void UserGetIDAsync(LPCredential credential, string byCode, string orLogin, string orEmail, object userState) {
            if ((this.UserGetIDOperationCompleted == null)) {
                this.UserGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetIDOperationCompleted);
            }
            this.InvokeAsync("UserGetID", new object[] {
                        credential,
                        byCode,
                        orLogin,
                        orEmail}, this.UserGetIDOperationCompleted, userState);
        }
        
        private void OnUserGetIDOperationCompleted(object arg) {
            if ((this.UserGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetIDCompleted(this, new UserGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetCode(LPCredential credential, string byLogin, string orEmail) {
            object[] results = this.Invoke("UserGetCode", new object[] {
                        credential,
                        byLogin,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetCodeAsync(LPCredential credential, string byLogin, string orEmail) {
            this.UserGetCodeAsync(credential, byLogin, orEmail, null);
        }
        
        /// <remarks/>
        public void UserGetCodeAsync(LPCredential credential, string byLogin, string orEmail, object userState) {
            if ((this.UserGetCodeOperationCompleted == null)) {
                this.UserGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetCodeOperationCompleted);
            }
            this.InvokeAsync("UserGetCode", new object[] {
                        credential,
                        byLogin,
                        orEmail}, this.UserGetCodeOperationCompleted, userState);
        }
        
        private void OnUserGetCodeOperationCompleted(object arg) {
            if ((this.UserGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetCodeCompleted(this, new UserGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("UserGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.UserGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void UserGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.UserGetUniqueNameOperationCompleted == null)) {
                this.UserGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("UserGetUniqueName", new object[] {
                        credential,
                        byCode}, this.UserGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnUserGetUniqueNameOperationCompleted(object arg) {
            if ((this.UserGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserGetUniqueNameCompleted(this, new UserGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/UserExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage UserExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("UserExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void UserExistsAsync(LPCredential credential, string byCode) {
            this.UserExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void UserExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.UserExistsOperationCompleted == null)) {
                this.UserExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserExistsOperationCompleted);
            }
            this.InvokeAsync("UserExists", new object[] {
                        credential,
                        byCode}, this.UserExistsOperationCompleted, userState);
        }
        
        private void OnUserExistsOperationCompleted(object arg) {
            if ((this.UserExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeTableName(LPCredential credential) {
            object[] results = this.Invoke("PrivilegeTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeTableNameAsync(LPCredential credential) {
            this.PrivilegeTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void PrivilegeTableNameAsync(LPCredential credential, object userState) {
            if ((this.PrivilegeTableNameOperationCompleted == null)) {
                this.PrivilegeTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeTableNameOperationCompleted);
            }
            this.InvokeAsync("PrivilegeTableName", new object[] {
                        credential}, this.PrivilegeTableNameOperationCompleted, userState);
        }
        
        private void OnPrivilegeTableNameOperationCompleted(object arg) {
            if ((this.PrivilegeTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeTableNameCompleted(this, new PrivilegeTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeList(LPCredential credential) {
            object[] results = this.Invoke("PrivilegeList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeListAsync(LPCredential credential) {
            this.PrivilegeListAsync(credential, null);
        }
        
        /// <remarks/>
        public void PrivilegeListAsync(LPCredential credential, object userState) {
            if ((this.PrivilegeListOperationCompleted == null)) {
                this.PrivilegeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeListOperationCompleted);
            }
            this.InvokeAsync("PrivilegeList", new object[] {
                        credential}, this.PrivilegeListOperationCompleted, userState);
        }
        
        private void OnPrivilegeListOperationCompleted(object arg) {
            if ((this.PrivilegeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeListCompleted(this, new PrivilegeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetID(LPCredential credential, string byCode, string orDescription) {
            object[] results = this.Invoke("PrivilegeGetID", new object[] {
                        credential,
                        byCode,
                        orDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetIDAsync(LPCredential credential, string byCode, string orDescription) {
            this.PrivilegeGetIDAsync(credential, byCode, orDescription, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetIDAsync(LPCredential credential, string byCode, string orDescription, object userState) {
            if ((this.PrivilegeGetIDOperationCompleted == null)) {
                this.PrivilegeGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetIDOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetID", new object[] {
                        credential,
                        byCode,
                        orDescription}, this.PrivilegeGetIDOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetIDOperationCompleted(object arg) {
            if ((this.PrivilegeGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetIDCompleted(this, new PrivilegeGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetCode(LPCredential credential, string byDescription) {
            object[] results = this.Invoke("PrivilegeGetCode", new object[] {
                        credential,
                        byDescription});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetCodeAsync(LPCredential credential, string byDescription) {
            this.PrivilegeGetCodeAsync(credential, byDescription, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetCodeAsync(LPCredential credential, string byDescription, object userState) {
            if ((this.PrivilegeGetCodeOperationCompleted == null)) {
                this.PrivilegeGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetCodeOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetCode", new object[] {
                        credential,
                        byDescription}, this.PrivilegeGetCodeOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetCodeOperationCompleted(object arg) {
            if ((this.PrivilegeGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetCodeCompleted(this, new PrivilegeGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("PrivilegeGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.PrivilegeGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.PrivilegeGetUniqueNameOperationCompleted == null)) {
                this.PrivilegeGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetUniqueName", new object[] {
                        credential,
                        byCode}, this.PrivilegeGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetUniqueNameOperationCompleted(object arg) {
            if ((this.PrivilegeGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetUniqueNameCompleted(this, new PrivilegeGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage PrivilegeExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("PrivilegeExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeExistsAsync(LPCredential credential, string byCode) {
            this.PrivilegeExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.PrivilegeExistsOperationCompleted == null)) {
                this.PrivilegeExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeExistsOperationCompleted);
            }
            this.InvokeAsync("PrivilegeExists", new object[] {
                        credential,
                        byCode}, this.PrivilegeExistsOperationCompleted, userState);
        }
        
        private void OnPrivilegeExistsOperationCompleted(object arg) {
            if ((this.PrivilegeExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeExistsCompleted(this, new PrivilegeExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductPrivilege PrivilegeGet(LPCredential credential, string byCode) {
            object[] results = this.Invoke("PrivilegeGet", new object[] {
                        credential,
                        byCode});
            return ((ProductPrivilege)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetAsync(LPCredential credential, string byCode) {
            this.PrivilegeGetAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetAsync(LPCredential credential, string byCode, object userState) {
            if ((this.PrivilegeGetOperationCompleted == null)) {
                this.PrivilegeGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGet", new object[] {
                        credential,
                        byCode}, this.PrivilegeGetOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetOperationCompleted(object arg) {
            if ((this.PrivilegeGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetCompleted(this, new PrivilegeGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/PrivilegeGetByProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductPrivilege PrivilegeGetByProduct(string suiteCode, string productCode, string privilegeCode) {
            object[] results = this.Invoke("PrivilegeGetByProduct", new object[] {
                        suiteCode,
                        productCode,
                        privilegeCode});
            return ((ProductPrivilege)(results[0]));
        }
        
        /// <remarks/>
        public void PrivilegeGetByProductAsync(string suiteCode, string productCode, string privilegeCode) {
            this.PrivilegeGetByProductAsync(suiteCode, productCode, privilegeCode, null);
        }
        
        /// <remarks/>
        public void PrivilegeGetByProductAsync(string suiteCode, string productCode, string privilegeCode, object userState) {
            if ((this.PrivilegeGetByProductOperationCompleted == null)) {
                this.PrivilegeGetByProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrivilegeGetByProductOperationCompleted);
            }
            this.InvokeAsync("PrivilegeGetByProduct", new object[] {
                        suiteCode,
                        productCode,
                        privilegeCode}, this.PrivilegeGetByProductOperationCompleted, userState);
        }
        
        private void OnPrivilegeGetByProductOperationCompleted(object arg) {
            if ((this.PrivilegeGetByProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrivilegeGetByProductCompleted(this, new PrivilegeGetByProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteTableName(LPCredential credential) {
            object[] results = this.Invoke("SuiteTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteTableNameAsync(LPCredential credential) {
            this.SuiteTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void SuiteTableNameAsync(LPCredential credential, object userState) {
            if ((this.SuiteTableNameOperationCompleted == null)) {
                this.SuiteTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteTableNameOperationCompleted);
            }
            this.InvokeAsync("SuiteTableName", new object[] {
                        credential}, this.SuiteTableNameOperationCompleted, userState);
        }
        
        private void OnSuiteTableNameOperationCompleted(object arg) {
            if ((this.SuiteTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteTableNameCompleted(this, new SuiteTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteList(LPCredential credential) {
            object[] results = this.Invoke("SuiteList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteListAsync(LPCredential credential) {
            this.SuiteListAsync(credential, null);
        }
        
        /// <remarks/>
        public void SuiteListAsync(LPCredential credential, object userState) {
            if ((this.SuiteListOperationCompleted == null)) {
                this.SuiteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteListOperationCompleted);
            }
            this.InvokeAsync("SuiteList", new object[] {
                        credential}, this.SuiteListOperationCompleted, userState);
        }
        
        private void OnSuiteListOperationCompleted(object arg) {
            if ((this.SuiteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteListCompleted(this, new SuiteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetID(LPCredential credential, string byCode) {
            object[] results = this.Invoke("SuiteGetID", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetIDAsync(LPCredential credential, string byCode) {
            this.SuiteGetIDAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteGetIDAsync(LPCredential credential, string byCode, object userState) {
            if ((this.SuiteGetIDOperationCompleted == null)) {
                this.SuiteGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetIDOperationCompleted);
            }
            this.InvokeAsync("SuiteGetID", new object[] {
                        credential,
                        byCode}, this.SuiteGetIDOperationCompleted, userState);
        }
        
        private void OnSuiteGetIDOperationCompleted(object arg) {
            if ((this.SuiteGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetIDCompleted(this, new SuiteGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetCode(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            object[] results = this.Invoke("SuiteGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            this.SuiteGetCodeAsync(credential, byDescription, andVersion, andBuild, null);
        }
        
        /// <remarks/>
        public void SuiteGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild, object userState) {
            if ((this.SuiteGetCodeOperationCompleted == null)) {
                this.SuiteGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetCodeOperationCompleted);
            }
            this.InvokeAsync("SuiteGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild}, this.SuiteGetCodeOperationCompleted, userState);
        }
        
        private void OnSuiteGetCodeOperationCompleted(object arg) {
            if ((this.SuiteGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetCodeCompleted(this, new SuiteGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("SuiteGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.SuiteGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.SuiteGetUniqueNameOperationCompleted == null)) {
                this.SuiteGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("SuiteGetUniqueName", new object[] {
                        credential,
                        byCode}, this.SuiteGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnSuiteGetUniqueNameOperationCompleted(object arg) {
            if ((this.SuiteGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteGetUniqueNameCompleted(this, new SuiteGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/SuiteExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage SuiteExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("SuiteExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void SuiteExistsAsync(LPCredential credential, string byCode) {
            this.SuiteExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void SuiteExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.SuiteExistsOperationCompleted == null)) {
                this.SuiteExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuiteExistsOperationCompleted);
            }
            this.InvokeAsync("SuiteExists", new object[] {
                        credential,
                        byCode}, this.SuiteExistsOperationCompleted, userState);
        }
        
        private void OnSuiteExistsOperationCompleted(object arg) {
            if ((this.SuiteExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuiteExistsCompleted(this, new SuiteExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductTableName(LPCredential credential) {
            object[] results = this.Invoke("ProductTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductTableNameAsync(LPCredential credential) {
            this.ProductTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void ProductTableNameAsync(LPCredential credential, object userState) {
            if ((this.ProductTableNameOperationCompleted == null)) {
                this.ProductTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductTableNameOperationCompleted);
            }
            this.InvokeAsync("ProductTableName", new object[] {
                        credential}, this.ProductTableNameOperationCompleted, userState);
        }
        
        private void OnProductTableNameOperationCompleted(object arg) {
            if ((this.ProductTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductTableNameCompleted(this, new ProductTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductList(LPCredential credential) {
            object[] results = this.Invoke("ProductList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductListAsync(LPCredential credential) {
            this.ProductListAsync(credential, null);
        }
        
        /// <remarks/>
        public void ProductListAsync(LPCredential credential, object userState) {
            if ((this.ProductListOperationCompleted == null)) {
                this.ProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductListOperationCompleted);
            }
            this.InvokeAsync("ProductList", new object[] {
                        credential}, this.ProductListOperationCompleted, userState);
        }
        
        private void OnProductListOperationCompleted(object arg) {
            if ((this.ProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductListCompleted(this, new ProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetID(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ProductGetID", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetIDAsync(LPCredential credential, string byCode) {
            this.ProductGetIDAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ProductGetIDAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ProductGetIDOperationCompleted == null)) {
                this.ProductGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetIDOperationCompleted);
            }
            this.InvokeAsync("ProductGetID", new object[] {
                        credential,
                        byCode}, this.ProductGetIDOperationCompleted, userState);
        }
        
        private void OnProductGetIDOperationCompleted(object arg) {
            if ((this.ProductGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetIDCompleted(this, new ProductGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetCode(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            object[] results = this.Invoke("ProductGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild) {
            this.ProductGetCodeAsync(credential, byDescription, andVersion, andBuild, null);
        }
        
        /// <remarks/>
        public void ProductGetCodeAsync(LPCredential credential, string byDescription, string andVersion, string andBuild, object userState) {
            if ((this.ProductGetCodeOperationCompleted == null)) {
                this.ProductGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetCodeOperationCompleted);
            }
            this.InvokeAsync("ProductGetCode", new object[] {
                        credential,
                        byDescription,
                        andVersion,
                        andBuild}, this.ProductGetCodeOperationCompleted, userState);
        }
        
        private void OnProductGetCodeOperationCompleted(object arg) {
            if ((this.ProductGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetCodeCompleted(this, new ProductGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ProductGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.ProductGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ProductGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ProductGetUniqueNameOperationCompleted == null)) {
                this.ProductGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("ProductGetUniqueName", new object[] {
                        credential,
                        byCode}, this.ProductGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnProductGetUniqueNameOperationCompleted(object arg) {
            if ((this.ProductGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductGetUniqueNameCompleted(this, new ProductGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ProductExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ProductExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ProductExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ProductExistsAsync(LPCredential credential, string byCode) {
            this.ProductExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ProductExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ProductExistsOperationCompleted == null)) {
                this.ProductExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductExistsOperationCompleted);
            }
            this.InvokeAsync("ProductExists", new object[] {
                        credential,
                        byCode}, this.ProductExistsOperationCompleted, userState);
        }
        
        private void OnProductExistsOperationCompleted(object arg) {
            if ((this.ProductExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductExistsCompleted(this, new ProductExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerTableName(LPCredential credential) {
            object[] results = this.Invoke("CustomerTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerTableNameAsync(LPCredential credential) {
            this.CustomerTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void CustomerTableNameAsync(LPCredential credential, object userState) {
            if ((this.CustomerTableNameOperationCompleted == null)) {
                this.CustomerTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerTableNameOperationCompleted);
            }
            this.InvokeAsync("CustomerTableName", new object[] {
                        credential}, this.CustomerTableNameOperationCompleted, userState);
        }
        
        private void OnCustomerTableNameOperationCompleted(object arg) {
            if ((this.CustomerTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerTableNameCompleted(this, new CustomerTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerList(LPCredential credential) {
            object[] results = this.Invoke("CustomerList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerListAsync(LPCredential credential) {
            this.CustomerListAsync(credential, null);
        }
        
        /// <remarks/>
        public void CustomerListAsync(LPCredential credential, object userState) {
            if ((this.CustomerListOperationCompleted == null)) {
                this.CustomerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerListOperationCompleted);
            }
            this.InvokeAsync("CustomerList", new object[] {
                        credential}, this.CustomerListOperationCompleted, userState);
        }
        
        private void OnCustomerListOperationCompleted(object arg) {
            if ((this.CustomerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerListCompleted(this, new CustomerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetID(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetID", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetIDAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            this.CustomerGetIDAsync(credential, byCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetIDAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetIDOperationCompleted == null)) {
                this.CustomerGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetIDOperationCompleted);
            }
            this.InvokeAsync("CustomerGetID", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerGetIDOperationCompleted, userState);
        }
        
        private void OnCustomerGetIDOperationCompleted(object arg) {
            if ((this.CustomerGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetIDCompleted(this, new CustomerGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetCode(LPCredential credential, string byTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetCode", new object[] {
                        credential,
                        byTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCodeAsync(LPCredential credential, string byTaxIdentifier, string orEmail) {
            this.CustomerGetCodeAsync(credential, byTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetCodeAsync(LPCredential credential, string byTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetCodeOperationCompleted == null)) {
                this.CustomerGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCodeOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCode", new object[] {
                        credential,
                        byTaxIdentifier,
                        orEmail}, this.CustomerGetCodeOperationCompleted, userState);
        }
        
        private void OnCustomerGetCodeOperationCompleted(object arg) {
            if ((this.CustomerGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCodeCompleted(this, new CustomerGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCodeByProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetCodeByProduct(string suiteCode, string productCode, string byTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerGetCodeByProduct", new object[] {
                        suiteCode,
                        productCode,
                        byTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductAsync(string suiteCode, string productCode, string byTaxIdentifier, string orEmail) {
            this.CustomerGetCodeByProductAsync(suiteCode, productCode, byTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductAsync(string suiteCode, string productCode, string byTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerGetCodeByProductOperationCompleted == null)) {
                this.CustomerGetCodeByProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCodeByProductOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCodeByProduct", new object[] {
                        suiteCode,
                        productCode,
                        byTaxIdentifier,
                        orEmail}, this.CustomerGetCodeByProductOperationCompleted, userState);
        }
        
        private void OnCustomerGetCodeByProductOperationCompleted(object arg) {
            if ((this.CustomerGetCodeByProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCodeByProductCompleted(this, new CustomerGetCodeByProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetCodeByProductIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetCodeByProductIT(string suiteCode, string productCode, string PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerGetCodeByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductITAsync(string suiteCode, string productCode, string PartitaIVA, string _Email) {
            this.CustomerGetCodeByProductITAsync(suiteCode, productCode, PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerGetCodeByProductITAsync(string suiteCode, string productCode, string PartitaIVA, string _Email, object userState) {
            if ((this.CustomerGetCodeByProductITOperationCompleted == null)) {
                this.CustomerGetCodeByProductITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetCodeByProductITOperationCompleted);
            }
            this.InvokeAsync("CustomerGetCodeByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        PartitaIVA,
                        _Email}, this.CustomerGetCodeByProductITOperationCompleted, userState);
        }
        
        private void OnCustomerGetCodeByProductITOperationCompleted(object arg) {
            if ((this.CustomerGetCodeByProductITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetCodeByProductITCompleted(this, new CustomerGetCodeByProductITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("CustomerGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.CustomerGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void CustomerGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.CustomerGetUniqueNameOperationCompleted == null)) {
                this.CustomerGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("CustomerGetUniqueName", new object[] {
                        credential,
                        byCode}, this.CustomerGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnCustomerGetUniqueNameOperationCompleted(object arg) {
            if ((this.CustomerGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerGetUniqueNameCompleted(this, new CustomerGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerExists(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerExists", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail) {
            this.CustomerExistsAsync(credential, byCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerExistsAsync(LPCredential credential, string byCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerExistsOperationCompleted == null)) {
                this.CustomerExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsOperationCompleted);
            }
            this.InvokeAsync("CustomerExists", new object[] {
                        credential,
                        byCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerExistsOperationCompleted, userState);
        }
        
        private void OnCustomerExistsOperationCompleted(object arg) {
            if ((this.CustomerExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsCompleted(this, new CustomerExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExistsByProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerExistsByProduct(string suiteCode, string productCode, string customerCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerExistsByProduct", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsByProductAsync(string suiteCode, string productCode, string customerCode, string orTaxIdentifier, string orEmail) {
            this.CustomerExistsByProductAsync(suiteCode, productCode, customerCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerExistsByProductAsync(string suiteCode, string productCode, string customerCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerExistsByProductOperationCompleted == null)) {
                this.CustomerExistsByProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsByProductOperationCompleted);
            }
            this.InvokeAsync("CustomerExistsByProduct", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerExistsByProductOperationCompleted, userState);
        }
        
        private void OnCustomerExistsByProductOperationCompleted(object arg) {
            if ((this.CustomerExistsByProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsByProductCompleted(this, new CustomerExistsByProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerExistsByProductIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerExistsByProductIT(string suiteCode, string productCode, string customerCode, string _PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerExistsByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerExistsByProductITAsync(string suiteCode, string productCode, string customerCode, string _PartitaIVA, string _Email) {
            this.CustomerExistsByProductITAsync(suiteCode, productCode, customerCode, _PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerExistsByProductITAsync(string suiteCode, string productCode, string customerCode, string _PartitaIVA, string _Email, object userState) {
            if ((this.CustomerExistsByProductITOperationCompleted == null)) {
                this.CustomerExistsByProductITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerExistsByProductITOperationCompleted);
            }
            this.InvokeAsync("CustomerExistsByProductIT", new object[] {
                        suiteCode,
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email}, this.CustomerExistsByProductITOperationCompleted, userState);
        }
        
        private void OnCustomerExistsByProductITOperationCompleted(object arg) {
            if ((this.CustomerExistsByProductITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerExistsByProductITCompleted(this, new CustomerExistsByProductITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerAdd", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerAdd(LPCredential credential, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            object[] results = this.Invoke("CustomerAdd", new object[] {
                        credential,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAddAsync(LPCredential credential, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            this.CustomerAddAsync(credential, description, taxIdentifier, email, address, town, zipCode, phone, fax, webSite, null);
        }
        
        /// <remarks/>
        public void CustomerAddAsync(LPCredential credential, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite, object userState) {
            if ((this.CustomerAddOperationCompleted == null)) {
                this.CustomerAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAddOperationCompleted);
            }
            this.InvokeAsync("CustomerAdd", new object[] {
                        credential,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite}, this.CustomerAddOperationCompleted, userState);
        }
        
        private void OnCustomerAddOperationCompleted(object arg) {
            if ((this.CustomerAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAddCompleted(this, new CustomerAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerRemove", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerRemove(LPCredential credential, string customerCode, string description, string taxIdentifier, string email) {
            object[] results = this.Invoke("CustomerRemove", new object[] {
                        credential,
                        customerCode,
                        description,
                        taxIdentifier,
                        email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerRemoveAsync(LPCredential credential, string customerCode, string description, string taxIdentifier, string email) {
            this.CustomerRemoveAsync(credential, customerCode, description, taxIdentifier, email, null);
        }
        
        /// <remarks/>
        public void CustomerRemoveAsync(LPCredential credential, string customerCode, string description, string taxIdentifier, string email, object userState) {
            if ((this.CustomerRemoveOperationCompleted == null)) {
                this.CustomerRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerRemoveOperationCompleted);
            }
            this.InvokeAsync("CustomerRemove", new object[] {
                        credential,
                        customerCode,
                        description,
                        taxIdentifier,
                        email}, this.CustomerRemoveOperationCompleted, userState);
        }
        
        private void OnCustomerRemoveOperationCompleted(object arg) {
            if ((this.CustomerRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerRemoveCompleted(this, new CustomerRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignUpForDemo", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSignUpForDemo(string suiteCode, string productCode, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            object[] results = this.Invoke("CustomerSignUpForDemo", new object[] {
                        suiteCode,
                        productCode,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoAsync(string suiteCode, string productCode, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite) {
            this.CustomerSignUpForDemoAsync(suiteCode, productCode, description, taxIdentifier, email, address, town, zipCode, phone, fax, webSite, null);
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoAsync(string suiteCode, string productCode, string description, string taxIdentifier, string email, string address, string town, string zipCode, string phone, string fax, string webSite, object userState) {
            if ((this.CustomerSignUpForDemoOperationCompleted == null)) {
                this.CustomerSignUpForDemoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignUpForDemoOperationCompleted);
            }
            this.InvokeAsync("CustomerSignUpForDemo", new object[] {
                        suiteCode,
                        productCode,
                        description,
                        taxIdentifier,
                        email,
                        address,
                        town,
                        zipCode,
                        phone,
                        fax,
                        webSite}, this.CustomerSignUpForDemoOperationCompleted, userState);
        }
        
        private void OnCustomerSignUpForDemoOperationCompleted(object arg) {
            if ((this.CustomerSignUpForDemoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignUpForDemoCompleted(this, new CustomerSignUpForDemoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSignUpForDemoIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSignUpForDemoIT(string suiteCode, string productCode, string RagioneSociale, string PartitaIVA, string Email, string _Indirizzo, string _Comune, string _CAP, string _Telefono, string _Fax, string _SitoWeb) {
            object[] results = this.Invoke("CustomerSignUpForDemoIT", new object[] {
                        suiteCode,
                        productCode,
                        RagioneSociale,
                        PartitaIVA,
                        Email,
                        _Indirizzo,
                        _Comune,
                        _CAP,
                        _Telefono,
                        _Fax,
                        _SitoWeb});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoITAsync(string suiteCode, string productCode, string RagioneSociale, string PartitaIVA, string Email, string _Indirizzo, string _Comune, string _CAP, string _Telefono, string _Fax, string _SitoWeb) {
            this.CustomerSignUpForDemoITAsync(suiteCode, productCode, RagioneSociale, PartitaIVA, Email, _Indirizzo, _Comune, _CAP, _Telefono, _Fax, _SitoWeb, null);
        }
        
        /// <remarks/>
        public void CustomerSignUpForDemoITAsync(string suiteCode, string productCode, string RagioneSociale, string PartitaIVA, string Email, string _Indirizzo, string _Comune, string _CAP, string _Telefono, string _Fax, string _SitoWeb, object userState) {
            if ((this.CustomerSignUpForDemoITOperationCompleted == null)) {
                this.CustomerSignUpForDemoITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSignUpForDemoITOperationCompleted);
            }
            this.InvokeAsync("CustomerSignUpForDemoIT", new object[] {
                        suiteCode,
                        productCode,
                        RagioneSociale,
                        PartitaIVA,
                        Email,
                        _Indirizzo,
                        _Comune,
                        _CAP,
                        _Telefono,
                        _Fax,
                        _SitoWeb}, this.CustomerSignUpForDemoITOperationCompleted, userState);
        }
        
        private void OnCustomerSignUpForDemoITOperationCompleted(object arg) {
            if ((this.CustomerSignUpForDemoITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSignUpForDemoITCompleted(this, new CustomerSignUpForDemoITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerActivate", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerActivate(LPCredential credential, string customerCode, System.DateTime activeUntil) {
            object[] results = this.Invoke("CustomerActivate", new object[] {
                        credential,
                        customerCode,
                        activeUntil});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerActivateAsync(LPCredential credential, string customerCode, System.DateTime activeUntil) {
            this.CustomerActivateAsync(credential, customerCode, activeUntil, null);
        }
        
        /// <remarks/>
        public void CustomerActivateAsync(LPCredential credential, string customerCode, System.DateTime activeUntil, object userState) {
            if ((this.CustomerActivateOperationCompleted == null)) {
                this.CustomerActivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerActivateOperationCompleted);
            }
            this.InvokeAsync("CustomerActivate", new object[] {
                        credential,
                        customerCode,
                        activeUntil}, this.CustomerActivateOperationCompleted, userState);
        }
        
        private void OnCustomerActivateOperationCompleted(object arg) {
            if ((this.CustomerActivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerActivateCompleted(this, new CustomerActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerDeactivate", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerDeactivate(LPCredential credential, string customerCode) {
            object[] results = this.Invoke("CustomerDeactivate", new object[] {
                        credential,
                        customerCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerDeactivateAsync(LPCredential credential, string customerCode) {
            this.CustomerDeactivateAsync(credential, customerCode, null);
        }
        
        /// <remarks/>
        public void CustomerDeactivateAsync(LPCredential credential, string customerCode, object userState) {
            if ((this.CustomerDeactivateOperationCompleted == null)) {
                this.CustomerDeactivateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerDeactivateOperationCompleted);
            }
            this.InvokeAsync("CustomerDeactivate", new object[] {
                        credential,
                        customerCode}, this.CustomerDeactivateOperationCompleted, userState);
        }
        
        private void OnCustomerDeactivateOperationCompleted(object arg) {
            if ((this.CustomerDeactivateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerDeactivateCompleted(this, new CustomerDeactivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerActivationsGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerActivationsGet(string customerCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerActivationsGet", new object[] {
                        customerCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerActivationsGetAsync(string customerCode, string orTaxIdentifier, string orEmail) {
            this.CustomerActivationsGetAsync(customerCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerActivationsGetAsync(string customerCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerActivationsGetOperationCompleted == null)) {
                this.CustomerActivationsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerActivationsGetOperationCompleted);
            }
            this.InvokeAsync("CustomerActivationsGet", new object[] {
                        customerCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerActivationsGetOperationCompleted, userState);
        }
        
        private void OnCustomerActivationsGetOperationCompleted(object arg) {
            if ((this.CustomerActivationsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerActivationsGetCompleted(this, new CustomerActivationsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSuiteActivationsGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSuiteActivationsGet(string bySuiteCode, string customerCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerSuiteActivationsGet", new object[] {
                        bySuiteCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetAsync(string bySuiteCode, string customerCode, string orTaxIdentifier, string orEmail) {
            this.CustomerSuiteActivationsGetAsync(bySuiteCode, customerCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetAsync(string bySuiteCode, string customerCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerSuiteActivationsGetOperationCompleted == null)) {
                this.CustomerSuiteActivationsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSuiteActivationsGetOperationCompleted);
            }
            this.InvokeAsync("CustomerSuiteActivationsGet", new object[] {
                        bySuiteCode,
                        customerCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerSuiteActivationsGetOperationCompleted, userState);
        }
        
        private void OnCustomerSuiteActivationsGetOperationCompleted(object arg) {
            if ((this.CustomerSuiteActivationsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSuiteActivationsGetCompleted(this, new CustomerSuiteActivationsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerSuiteActivationsGetIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerSuiteActivationsGetIT(string suiteCode, string customerCode, string _PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerSuiteActivationsGetIT", new object[] {
                        suiteCode,
                        customerCode,
                        _PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetITAsync(string suiteCode, string customerCode, string _PartitaIVA, string _Email) {
            this.CustomerSuiteActivationsGetITAsync(suiteCode, customerCode, _PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerSuiteActivationsGetITAsync(string suiteCode, string customerCode, string _PartitaIVA, string _Email, object userState) {
            if ((this.CustomerSuiteActivationsGetITOperationCompleted == null)) {
                this.CustomerSuiteActivationsGetITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerSuiteActivationsGetITOperationCompleted);
            }
            this.InvokeAsync("CustomerSuiteActivationsGetIT", new object[] {
                        suiteCode,
                        customerCode,
                        _PartitaIVA,
                        _Email}, this.CustomerSuiteActivationsGetITOperationCompleted, userState);
        }
        
        private void OnCustomerSuiteActivationsGetITOperationCompleted(object arg) {
            if ((this.CustomerSuiteActivationsGetITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerSuiteActivationsGetITCompleted(this, new CustomerSuiteActivationsGetITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerProductActivationsGet", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerProductActivationsGet(string byProductCode, string byCode, string orTaxIdentifier, string orEmail) {
            object[] results = this.Invoke("CustomerProductActivationsGet", new object[] {
                        byProductCode,
                        byCode,
                        orTaxIdentifier,
                        orEmail});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetAsync(string byProductCode, string byCode, string orTaxIdentifier, string orEmail) {
            this.CustomerProductActivationsGetAsync(byProductCode, byCode, orTaxIdentifier, orEmail, null);
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetAsync(string byProductCode, string byCode, string orTaxIdentifier, string orEmail, object userState) {
            if ((this.CustomerProductActivationsGetOperationCompleted == null)) {
                this.CustomerProductActivationsGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerProductActivationsGetOperationCompleted);
            }
            this.InvokeAsync("CustomerProductActivationsGet", new object[] {
                        byProductCode,
                        byCode,
                        orTaxIdentifier,
                        orEmail}, this.CustomerProductActivationsGetOperationCompleted, userState);
        }
        
        private void OnCustomerProductActivationsGetOperationCompleted(object arg) {
            if ((this.CustomerProductActivationsGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerProductActivationsGetCompleted(this, new CustomerProductActivationsGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/CustomerProductActivationsGetIT", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage CustomerProductActivationsGetIT(string productCode, string customerCode, string _PartitaIVA, string _Email) {
            object[] results = this.Invoke("CustomerProductActivationsGetIT", new object[] {
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetITAsync(string productCode, string customerCode, string _PartitaIVA, string _Email) {
            this.CustomerProductActivationsGetITAsync(productCode, customerCode, _PartitaIVA, _Email, null);
        }
        
        /// <remarks/>
        public void CustomerProductActivationsGetITAsync(string productCode, string customerCode, string _PartitaIVA, string _Email, object userState) {
            if ((this.CustomerProductActivationsGetITOperationCompleted == null)) {
                this.CustomerProductActivationsGetITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerProductActivationsGetITOperationCompleted);
            }
            this.InvokeAsync("CustomerProductActivationsGetIT", new object[] {
                        productCode,
                        customerCode,
                        _PartitaIVA,
                        _Email}, this.CustomerProductActivationsGetITOperationCompleted, userState);
        }
        
        private void OnCustomerProductActivationsGetITOperationCompleted(object arg) {
            if ((this.CustomerProductActivationsGetITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerProductActivationsGetITCompleted(this, new CustomerProductActivationsGetITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationTableName(LPCredential credential) {
            object[] results = this.Invoke("ActivationTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationTableNameAsync(LPCredential credential) {
            this.ActivationTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void ActivationTableNameAsync(LPCredential credential, object userState) {
            if ((this.ActivationTableNameOperationCompleted == null)) {
                this.ActivationTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationTableNameOperationCompleted);
            }
            this.InvokeAsync("ActivationTableName", new object[] {
                        credential}, this.ActivationTableNameOperationCompleted, userState);
        }
        
        private void OnActivationTableNameOperationCompleted(object arg) {
            if ((this.ActivationTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationTableNameCompleted(this, new ActivationTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationList(LPCredential credential) {
            object[] results = this.Invoke("ActivationList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationListAsync(LPCredential credential) {
            this.ActivationListAsync(credential, null);
        }
        
        /// <remarks/>
        public void ActivationListAsync(LPCredential credential, object userState) {
            if ((this.ActivationListOperationCompleted == null)) {
                this.ActivationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationListOperationCompleted);
            }
            this.InvokeAsync("ActivationList", new object[] {
                        credential}, this.ActivationListOperationCompleted, userState);
        }
        
        private void OnActivationListOperationCompleted(object arg) {
            if ((this.ActivationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationListCompleted(this, new ActivationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetID(LPCredential credential, string byCode, string orKey) {
            object[] results = this.Invoke("ActivationGetID", new object[] {
                        credential,
                        byCode,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetIDAsync(LPCredential credential, string byCode, string orKey) {
            this.ActivationGetIDAsync(credential, byCode, orKey, null);
        }
        
        /// <remarks/>
        public void ActivationGetIDAsync(LPCredential credential, string byCode, string orKey, object userState) {
            if ((this.ActivationGetIDOperationCompleted == null)) {
                this.ActivationGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetIDOperationCompleted);
            }
            this.InvokeAsync("ActivationGetID", new object[] {
                        credential,
                        byCode,
                        orKey}, this.ActivationGetIDOperationCompleted, userState);
        }
        
        private void OnActivationGetIDOperationCompleted(object arg) {
            if ((this.ActivationGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetIDCompleted(this, new ActivationGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetIDByCustomerProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetIDByCustomerProduct(LPCredential credential, string byCustomerID, string byProductID) {
            object[] results = this.Invoke("ActivationGetIDByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetIDByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID) {
            this.ActivationGetIDByCustomerProductAsync(credential, byCustomerID, byProductID, null);
        }
        
        /// <remarks/>
        public void ActivationGetIDByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID, object userState) {
            if ((this.ActivationGetIDByCustomerProductOperationCompleted == null)) {
                this.ActivationGetIDByCustomerProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetIDByCustomerProductOperationCompleted);
            }
            this.InvokeAsync("ActivationGetIDByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID}, this.ActivationGetIDByCustomerProductOperationCompleted, userState);
        }
        
        private void OnActivationGetIDByCustomerProductOperationCompleted(object arg) {
            if ((this.ActivationGetIDByCustomerProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetIDByCustomerProductCompleted(this, new ActivationGetIDByCustomerProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetCode(LPCredential credential, string byKey) {
            object[] results = this.Invoke("ActivationGetCode", new object[] {
                        credential,
                        byKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetCodeAsync(LPCredential credential, string byKey) {
            this.ActivationGetCodeAsync(credential, byKey, null);
        }
        
        /// <remarks/>
        public void ActivationGetCodeAsync(LPCredential credential, string byKey, object userState) {
            if ((this.ActivationGetCodeOperationCompleted == null)) {
                this.ActivationGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetCodeOperationCompleted);
            }
            this.InvokeAsync("ActivationGetCode", new object[] {
                        credential,
                        byKey}, this.ActivationGetCodeOperationCompleted, userState);
        }
        
        private void OnActivationGetCodeOperationCompleted(object arg) {
            if ((this.ActivationGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetCodeCompleted(this, new ActivationGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ActivationGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.ActivationGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ActivationGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ActivationGetUniqueNameOperationCompleted == null)) {
                this.ActivationGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("ActivationGetUniqueName", new object[] {
                        credential,
                        byCode}, this.ActivationGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnActivationGetUniqueNameOperationCompleted(object arg) {
            if ((this.ActivationGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationGetUniqueNameCompleted(this, new ActivationGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("ActivationExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationExistsAsync(LPCredential credential, string byCode) {
            this.ActivationExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void ActivationExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.ActivationExistsOperationCompleted == null)) {
                this.ActivationExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationExistsOperationCompleted);
            }
            this.InvokeAsync("ActivationExists", new object[] {
                        credential,
                        byCode}, this.ActivationExistsOperationCompleted, userState);
        }
        
        private void OnActivationExistsOperationCompleted(object arg) {
            if ((this.ActivationExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationExistsCompleted(this, new ActivationExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/ActivationExistsByCustomerProduct", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage ActivationExistsByCustomerProduct(LPCredential credential, string byCustomerID, string byProductID) {
            object[] results = this.Invoke("ActivationExistsByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void ActivationExistsByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID) {
            this.ActivationExistsByCustomerProductAsync(credential, byCustomerID, byProductID, null);
        }
        
        /// <remarks/>
        public void ActivationExistsByCustomerProductAsync(LPCredential credential, string byCustomerID, string byProductID, object userState) {
            if ((this.ActivationExistsByCustomerProductOperationCompleted == null)) {
                this.ActivationExistsByCustomerProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivationExistsByCustomerProductOperationCompleted);
            }
            this.InvokeAsync("ActivationExistsByCustomerProduct", new object[] {
                        credential,
                        byCustomerID,
                        byProductID}, this.ActivationExistsByCustomerProductOperationCompleted, userState);
        }
        
        private void OnActivationExistsByCustomerProductOperationCompleted(object arg) {
            if ((this.ActivationExistsByCustomerProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivationExistsByCustomerProductCompleted(this, new ActivationExistsByCustomerProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyTableName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyTableName(LPCredential credential) {
            object[] results = this.Invoke("KeyTableName", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyTableNameAsync(LPCredential credential) {
            this.KeyTableNameAsync(credential, null);
        }
        
        /// <remarks/>
        public void KeyTableNameAsync(LPCredential credential, object userState) {
            if ((this.KeyTableNameOperationCompleted == null)) {
                this.KeyTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyTableNameOperationCompleted);
            }
            this.InvokeAsync("KeyTableName", new object[] {
                        credential}, this.KeyTableNameOperationCompleted, userState);
        }
        
        private void OnKeyTableNameOperationCompleted(object arg) {
            if ((this.KeyTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyTableNameCompleted(this, new KeyTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyList", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyList(LPCredential credential) {
            object[] results = this.Invoke("KeyList", new object[] {
                        credential});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyListAsync(LPCredential credential) {
            this.KeyListAsync(credential, null);
        }
        
        /// <remarks/>
        public void KeyListAsync(LPCredential credential, object userState) {
            if ((this.KeyListOperationCompleted == null)) {
                this.KeyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyListOperationCompleted);
            }
            this.InvokeAsync("KeyList", new object[] {
                        credential}, this.KeyListOperationCompleted, userState);
        }
        
        private void OnKeyListOperationCompleted(object arg) {
            if ((this.KeyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyListCompleted(this, new KeyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetID", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetID(LPCredential credential, string byCode, string orKey) {
            object[] results = this.Invoke("KeyGetID", new object[] {
                        credential,
                        byCode,
                        orKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetIDAsync(LPCredential credential, string byCode, string orKey) {
            this.KeyGetIDAsync(credential, byCode, orKey, null);
        }
        
        /// <remarks/>
        public void KeyGetIDAsync(LPCredential credential, string byCode, string orKey, object userState) {
            if ((this.KeyGetIDOperationCompleted == null)) {
                this.KeyGetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetIDOperationCompleted);
            }
            this.InvokeAsync("KeyGetID", new object[] {
                        credential,
                        byCode,
                        orKey}, this.KeyGetIDOperationCompleted, userState);
        }
        
        private void OnKeyGetIDOperationCompleted(object arg) {
            if ((this.KeyGetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetIDCompleted(this, new KeyGetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetCode", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetCode(LPCredential credential, string byKey) {
            object[] results = this.Invoke("KeyGetCode", new object[] {
                        credential,
                        byKey});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetCodeAsync(LPCredential credential, string byKey) {
            this.KeyGetCodeAsync(credential, byKey, null);
        }
        
        /// <remarks/>
        public void KeyGetCodeAsync(LPCredential credential, string byKey, object userState) {
            if ((this.KeyGetCodeOperationCompleted == null)) {
                this.KeyGetCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetCodeOperationCompleted);
            }
            this.InvokeAsync("KeyGetCode", new object[] {
                        credential,
                        byKey}, this.KeyGetCodeOperationCompleted, userState);
        }
        
        private void OnKeyGetCodeOperationCompleted(object arg) {
            if ((this.KeyGetCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetCodeCompleted(this, new KeyGetCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyGetUniqueName", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyGetUniqueName(LPCredential credential, string byCode) {
            object[] results = this.Invoke("KeyGetUniqueName", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyGetUniqueNameAsync(LPCredential credential, string byCode) {
            this.KeyGetUniqueNameAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void KeyGetUniqueNameAsync(LPCredential credential, string byCode, object userState) {
            if ((this.KeyGetUniqueNameOperationCompleted == null)) {
                this.KeyGetUniqueNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyGetUniqueNameOperationCompleted);
            }
            this.InvokeAsync("KeyGetUniqueName", new object[] {
                        credential,
                        byCode}, this.KeyGetUniqueNameOperationCompleted, userState);
        }
        
        private void OnKeyGetUniqueNameOperationCompleted(object arg) {
            if ((this.KeyGetUniqueNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyGetUniqueNameCompleted(this, new KeyGetUniqueNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:20141/KeyExists", RequestNamespace="http://localhost:20141", ResponseNamespace="http://localhost:20141", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LPMessage KeyExists(LPCredential credential, string byCode) {
            object[] results = this.Invoke("KeyExists", new object[] {
                        credential,
                        byCode});
            return ((LPMessage)(results[0]));
        }
        
        /// <remarks/>
        public void KeyExistsAsync(LPCredential credential, string byCode) {
            this.KeyExistsAsync(credential, byCode, null);
        }
        
        /// <remarks/>
        public void KeyExistsAsync(LPCredential credential, string byCode, object userState) {
            if ((this.KeyExistsOperationCompleted == null)) {
                this.KeyExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKeyExistsOperationCompleted);
            }
            this.InvokeAsync("KeyExists", new object[] {
                        credential,
                        byCode}, this.KeyExistsOperationCompleted, userState);
        }
        
        private void OnKeyExistsOperationCompleted(object arg) {
            if ((this.KeyExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KeyExistsCompleted(this, new KeyExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPMessage {
        
        private string idField;
        
        private System.DateTime timeStampField;
        
        private string versionField;
        
        private string operationField;
        
        private LPValue resultField;
        
        private LPError errorField;
        
        private string emptyStringField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        public LPValue Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public LPError Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyString {
            get {
                return this.emptyStringField;
            }
            set {
                this.emptyStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPValue {
        
        private object valueField;
        
        private bool existsField;
        
        private string typeNameField;
        
        private string innerTypeNameField;
        
        private bool isNullField;
        
        private bool isDBNullField;
        
        private bool isEmptyField;
        
        private bool isStringField;
        
        private bool isInt16Field;
        
        private bool isInt32Field;
        
        private bool isInt64Field;
        
        private bool isDateTimeField;
        
        private bool isBooleanField;
        
        private bool isDataSetField;
        
        private bool isDataTableField;
        
        private bool isDataViewField;
        
        private bool isXmlDataField;
        
        private bool isGuidField;
        
        private string emptyTypeNameField;
        
        private string emptyStringField;
        
        private short emptyInt16Field;
        
        private int emptyInt32Field;
        
        private long emptyInt64Field;
        
        private System.DateTime emptyDateTimeField;
        
        private LPBoolean emptyBooleanField;
        
        private string emptyXmlDataField;
        
        private string asStringField;
        
        private System.Nullable<short> asInt16Field;
        
        private System.Nullable<int> asInt32Field;
        
        private System.Nullable<long> asInt64Field;
        
        private System.Nullable<System.DateTime> asDateTimeField;
        
        private System.Nullable<LPBoolean> asBooleanField;
        
        private System.Data.DataSet asDataSetField;
        
        private System.Data.DataTable asDataTableField;
        
        private System.Guid asGuidField;
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool Exists {
            get {
                return this.existsField;
            }
            set {
                this.existsField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string InnerTypeName {
            get {
                return this.innerTypeNameField;
            }
            set {
                this.innerTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNull {
            get {
                return this.isNullField;
            }
            set {
                this.isNullField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDBNull {
            get {
                return this.isDBNullField;
            }
            set {
                this.isDBNullField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEmpty {
            get {
                return this.isEmptyField;
            }
            set {
                this.isEmptyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsString {
            get {
                return this.isStringField;
            }
            set {
                this.isStringField = value;
            }
        }
        
        /// <remarks/>
        public bool IsInt16 {
            get {
                return this.isInt16Field;
            }
            set {
                this.isInt16Field = value;
            }
        }
        
        /// <remarks/>
        public bool IsInt32 {
            get {
                return this.isInt32Field;
            }
            set {
                this.isInt32Field = value;
            }
        }
        
        /// <remarks/>
        public bool IsInt64 {
            get {
                return this.isInt64Field;
            }
            set {
                this.isInt64Field = value;
            }
        }
        
        /// <remarks/>
        public bool IsDateTime {
            get {
                return this.isDateTimeField;
            }
            set {
                this.isDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsBoolean {
            get {
                return this.isBooleanField;
            }
            set {
                this.isBooleanField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDataSet {
            get {
                return this.isDataSetField;
            }
            set {
                this.isDataSetField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDataTable {
            get {
                return this.isDataTableField;
            }
            set {
                this.isDataTableField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDataView {
            get {
                return this.isDataViewField;
            }
            set {
                this.isDataViewField = value;
            }
        }
        
        /// <remarks/>
        public bool IsXmlData {
            get {
                return this.isXmlDataField;
            }
            set {
                this.isXmlDataField = value;
            }
        }
        
        /// <remarks/>
        public bool IsGuid {
            get {
                return this.isGuidField;
            }
            set {
                this.isGuidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyTypeName {
            get {
                return this.emptyTypeNameField;
            }
            set {
                this.emptyTypeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyString {
            get {
                return this.emptyStringField;
            }
            set {
                this.emptyStringField = value;
            }
        }
        
        /// <remarks/>
        public short EmptyInt16 {
            get {
                return this.emptyInt16Field;
            }
            set {
                this.emptyInt16Field = value;
            }
        }
        
        /// <remarks/>
        public int EmptyInt32 {
            get {
                return this.emptyInt32Field;
            }
            set {
                this.emptyInt32Field = value;
            }
        }
        
        /// <remarks/>
        public long EmptyInt64 {
            get {
                return this.emptyInt64Field;
            }
            set {
                this.emptyInt64Field = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EmptyDateTime {
            get {
                return this.emptyDateTimeField;
            }
            set {
                this.emptyDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public LPBoolean EmptyBoolean {
            get {
                return this.emptyBooleanField;
            }
            set {
                this.emptyBooleanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyXmlData {
            get {
                return this.emptyXmlDataField;
            }
            set {
                this.emptyXmlDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AsString {
            get {
                return this.asStringField;
            }
            set {
                this.asStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> AsInt16 {
            get {
                return this.asInt16Field;
            }
            set {
                this.asInt16Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> AsInt32 {
            get {
                return this.asInt32Field;
            }
            set {
                this.asInt32Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> AsInt64 {
            get {
                return this.asInt64Field;
            }
            set {
                this.asInt64Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> AsDateTime {
            get {
                return this.asDateTimeField;
            }
            set {
                this.asDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<LPBoolean> AsBoolean {
            get {
                return this.asBooleanField;
            }
            set {
                this.asBooleanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AsDataSet {
            get {
                return this.asDataSetField;
            }
            set {
                this.asDataSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataTable AsDataTable {
            get {
                return this.asDataTableField;
            }
            set {
                this.asDataTableField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid AsGuid {
            get {
                return this.asGuidField;
            }
            set {
                this.asGuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class TimeSpan {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class KeyData {
        
        private System.DateTime timeStampField;
        
        private string keyField;
        
        private System.Guid customerCodeField;
        
        private System.Guid productCodeField;
        
        private System.Guid privilegeCodeField;
        
        private System.DateTime activeFromField;
        
        private System.DateTime activeUntilField;
        
        private string machineCPUField;
        
        private string machineBASEField;
        
        private string machineMACField;
        
        private string machineBIOSField;
        
        private string machineDISKField;
        
        private string machineVIDEOField;
        
        /// <remarks/>
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid CustomerCode {
            get {
                return this.customerCodeField;
            }
            set {
                this.customerCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ProductCode {
            get {
                return this.productCodeField;
            }
            set {
                this.productCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid PrivilegeCode {
            get {
                return this.privilegeCodeField;
            }
            set {
                this.privilegeCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActiveFrom {
            get {
                return this.activeFromField;
            }
            set {
                this.activeFromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ActiveUntil {
            get {
                return this.activeUntilField;
            }
            set {
                this.activeUntilField = value;
            }
        }
        
        /// <remarks/>
        public string MachineCPU {
            get {
                return this.machineCPUField;
            }
            set {
                this.machineCPUField = value;
            }
        }
        
        /// <remarks/>
        public string MachineBASE {
            get {
                return this.machineBASEField;
            }
            set {
                this.machineBASEField = value;
            }
        }
        
        /// <remarks/>
        public string MachineMAC {
            get {
                return this.machineMACField;
            }
            set {
                this.machineMACField = value;
            }
        }
        
        /// <remarks/>
        public string MachineBIOS {
            get {
                return this.machineBIOSField;
            }
            set {
                this.machineBIOSField = value;
            }
        }
        
        /// <remarks/>
        public string MachineDISK {
            get {
                return this.machineDISKField;
            }
            set {
                this.machineDISKField = value;
            }
        }
        
        /// <remarks/>
        public string MachineVIDEO {
            get {
                return this.machineVIDEOField;
            }
            set {
                this.machineVIDEOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPCredential {
        
        private string idField;
        
        private System.DateTime timeStampField;
        
        private string versionField;
        
        private string loginField;
        
        private string passwordField;
        
        private string contextField;
        
        private string magicCodeField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Context {
            get {
                return this.contextField;
            }
            set {
                this.contextField = value;
            }
        }
        
        /// <remarks/>
        public string MagicCode {
            get {
                return this.magicCodeField;
            }
            set {
                this.magicCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public partial class LPError {
        
        private bool existsField;
        
        private string typeNameField;
        
        private string messageField;
        
        private string textField;
        
        private string sourceField;
        
        private string stackField;
        
        private string emptyStringField;
        
        /// <remarks/>
        public bool Exists {
            get {
                return this.existsField;
            }
            set {
                this.existsField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string Stack {
            get {
                return this.stackField;
            }
            set {
                this.stackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EmptyString {
            get {
                return this.emptyStringField;
            }
            set {
                this.emptyStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public enum LPBoolean {
        
        /// <remarks/>
        Unassigned,
        
        /// <remarks/>
        False,
        
        /// <remarks/>
        True,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:20141")]
    public enum ProductPrivilege {
        
        /// <remarks/>
        Nessuna,
        
        /// <remarks/>
        Amministrativa,
        
        /// <remarks/>
        Standard,
        
        /// <remarks/>
        Avanzata,
        
        /// <remarks/>
        Demo,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void _InitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void LoginXCompletedEventHandler(object sender, LoginXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataSetXCompletedEventHandler(object sender, getDataSetXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataSetXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataSetXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataSetTablesXCompletedEventHandler(object sender, getDataSetTablesXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataSetTablesXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataSetTablesXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void EntityTypesGetXCompletedEventHandler(object sender, EntityTypesGetXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EntityTypesGetXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EntityTypesGetXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void BuildAppDataXMLFileXCompletedEventHandler(object sender, BuildAppDataXMLFileXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuildAppDataXMLFileXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuildAppDataXMLFileXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataTableXCompletedEventHandler(object sender, getDataTableXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextTableNameXCompletedEventHandler(object sender, ContextTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextListXCompletedEventHandler(object sender, ContextListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetIDXCompletedEventHandler(object sender, ContextGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetCodeXCompletedEventHandler(object sender, ContextGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetUniqueNameXCompletedEventHandler(object sender, ContextGetUniqueNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetUniqueNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetUniqueNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextExistsXCompletedEventHandler(object sender, ContextExistsXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextExistsXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextExistsXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserTableNameXCompletedEventHandler(object sender, UserTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserListXCompletedEventHandler(object sender, UserListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetIDXCompletedEventHandler(object sender, UserGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetCodeXCompletedEventHandler(object sender, UserGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeTableNameXCompletedEventHandler(object sender, PrivilegeTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeListXCompletedEventHandler(object sender, PrivilegeListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetIDXCompletedEventHandler(object sender, PrivilegeGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetCodeXCompletedEventHandler(object sender, PrivilegeGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetUniqueNameXCompletedEventHandler(object sender, PrivilegeGetUniqueNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetUniqueNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetUniqueNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeExistsXCompletedEventHandler(object sender, PrivilegeExistsXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeExistsXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeExistsXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteTableNameXCompletedEventHandler(object sender, SuiteTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteListXCompletedEventHandler(object sender, SuiteListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetIDXCompletedEventHandler(object sender, SuiteGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetCodeXCompletedEventHandler(object sender, SuiteGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetUniqueNameXCompletedEventHandler(object sender, SuiteGetUniqueNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetUniqueNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetUniqueNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteExistsXCompletedEventHandler(object sender, SuiteExistsXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteExistsXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteExistsXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductTableNameXCompletedEventHandler(object sender, ProductTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductListXCompletedEventHandler(object sender, ProductListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetIDXCompletedEventHandler(object sender, ProductGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetCodeXCompletedEventHandler(object sender, ProductGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetUniqueNameXCompletedEventHandler(object sender, ProductGetUniqueNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetUniqueNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetUniqueNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductExistsXCompletedEventHandler(object sender, ProductExistsXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductExistsXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductExistsXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerTableNameXCompletedEventHandler(object sender, CustomerTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerListXCompletedEventHandler(object sender, CustomerListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetIDXCompletedEventHandler(object sender, CustomerGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCodeXCompletedEventHandler(object sender, CustomerGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetUniqueNameXCompletedEventHandler(object sender, CustomerGetUniqueNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetUniqueNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetUniqueNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsXCompletedEventHandler(object sender, CustomerExistsXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationTableNameXCompletedEventHandler(object sender, ActivationTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationListXCompletedEventHandler(object sender, ActivationListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetIDXCompletedEventHandler(object sender, ActivationGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetCodeXCompletedEventHandler(object sender, ActivationGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetUniqueNameXCompletedEventHandler(object sender, ActivationGetUniqueNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetUniqueNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetUniqueNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationExistsXCompletedEventHandler(object sender, ActivationExistsXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationExistsXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationExistsXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyTableNameXCompletedEventHandler(object sender, KeyTableNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyTableNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyTableNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyListXCompletedEventHandler(object sender, KeyListXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyListXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyListXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetIDXCompletedEventHandler(object sender, KeyGetIDXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetIDXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetIDXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetCodeXCompletedEventHandler(object sender, KeyGetCodeXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetCodeXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetCodeXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetUniqueNameXCompletedEventHandler(object sender, KeyGetUniqueNameXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetUniqueNameXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetUniqueNameXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyExistsXCompletedEventHandler(object sender, KeyExistsXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyExistsXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyExistsXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataExistsByTextXCompletedEventHandler(object sender, KeyDataExistsByTextXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataExistsByTextXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataExistsByTextXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getLocalMachineFingerPrintCompletedEventHandler(object sender, getLocalMachineFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLocalMachineFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLocalMachineFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getLocalMachineFingerPrintEncodedCompletedEventHandler(object sender, getLocalMachineFingerPrintEncodedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLocalMachineFingerPrintEncodedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLocalMachineFingerPrintEncodedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getSuiteFingerPrintCompletedEventHandler(object sender, getSuiteFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSuiteFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSuiteFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getProductFingerPrintCompletedEventHandler(object sender, getProductFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProductFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProductFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getCustomerFingerPrintCompletedEventHandler(object sender, getCustomerFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomerFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomerFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void WebSiteTableNameCompletedEventHandler(object sender, WebSiteTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSiteTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSiteTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void WebSiteListCompletedEventHandler(object sender, WebSiteListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSiteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSiteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void WebSiteGetIDCompletedEventHandler(object sender, WebSiteGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSiteGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSiteGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void WebSiteGetCodeCompletedEventHandler(object sender, WebSiteGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSiteGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSiteGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void WebSiteGetUniqueNameCompletedEventHandler(object sender, WebSiteGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSiteGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSiteGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void WebSiteExistsCompletedEventHandler(object sender, WebSiteExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSiteExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSiteExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataBuildCompletedEventHandler(object sender, KeyDataBuildCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataBuildCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataBuildCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataBuildITCompletedEventHandler(object sender, KeyDataBuildITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataBuildITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataBuildITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataExistsCompletedEventHandler(object sender, KeyDataExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataExistsByTextCompletedEventHandler(object sender, KeyDataExistsByTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataExistsByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataExistsByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataExistsByEncrypedTextCompletedEventHandler(object sender, KeyDataExistsByEncrypedTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataExistsByEncrypedTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataExistsByEncrypedTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataValidateCompletedEventHandler(object sender, KeyDataValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataValidateByTextCompletedEventHandler(object sender, KeyDataValidateByTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataValidateByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataValidateByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataValidateByEncrypedTextCompletedEventHandler(object sender, KeyDataValidateByEncrypedTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataValidateByEncrypedTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataValidateByEncrypedTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataAddCompletedEventHandler(object sender, KeyDataAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataAddByTextCompletedEventHandler(object sender, KeyDataAddByTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataAddByTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataAddByTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataAddByEncrypedTextCompletedEventHandler(object sender, KeyDataAddByEncrypedTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataAddByEncrypedTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataAddByEncrypedTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFingerPrintEncryptedCompletedEventHandler(object sender, GetFingerPrintEncryptedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFingerPrintEncryptedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFingerPrintEncryptedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFingerPrintDecryptedCompletedEventHandler(object sender, GetFingerPrintDecryptedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFingerPrintDecryptedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFingerPrintDecryptedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCode_GetMethodNameCompletedEventHandler(object sender, CustomerGetCode_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCode_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCode_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerGetCodeGetMethodNameCompletedEventHandler(object sender, GetCustomerGetCodeGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerGetCodeGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerGetCodeGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerGetCodeMethodNameCompletedEventHandler(object sender, GetCustomerGetCodeMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerGetCodeMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerGetCodeMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCode_GetMethodDescriptionCompletedEventHandler(object sender, CustomerGetCode_GetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCode_GetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCode_GetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerGetCodeGetMethodDescriptionCompletedEventHandler(object sender, GetCustomerGetCodeGetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerGetCodeGetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerGetCodeGetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerGetCodeMethodDescriptionCompletedEventHandler(object sender, GetCustomerGetCodeMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerGetCodeMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerGetCodeMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExists_GetMethodNameCompletedEventHandler(object sender, CustomerExists_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExists_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExists_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerExistsGetMethodNameCompletedEventHandler(object sender, GetCustomerExistsGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerExistsGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerExistsGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerExistsMethodNameCompletedEventHandler(object sender, GetCustomerExistsMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerExistsMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerExistsMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsByProduct_GetMethodDescriptionCompletedEventHandler(object sender, CustomerExistsByProduct_GetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsByProduct_GetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsByProduct_GetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerExistsByProductGetMethodDescriptionCompletedEventHandler(object sender, GetCustomerExistsByProductGetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerExistsByProductGetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerExistsByProductGetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerExistsByProductMethodDescriptionCompletedEventHandler(object sender, GetCustomerExistsByProductMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerExistsByProductMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerExistsByProductMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignupForDemo_GetMethodNameCompletedEventHandler(object sender, CustomerSignupForDemo_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignupForDemo_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignupForDemo_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemoMethodNameCompletedEventHandler(object sender, GetCustomerSignupForDemoMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemoMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemoMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemo_GetMethodNameCompletedEventHandler(object sender, GetCustomerSignupForDemo_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemo_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemo_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignupForDemo_GetMethodCaptionCompletedEventHandler(object sender, CustomerSignupForDemo_GetMethodCaptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignupForDemo_GetMethodCaptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignupForDemo_GetMethodCaptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemoMethodCaptionCompletedEventHandler(object sender, GetCustomerSignupForDemoMethodCaptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemoMethodCaptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemoMethodCaptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignupForDemoGetMethodCaptionCompletedEventHandler(object sender, CustomerSignupForDemoGetMethodCaptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignupForDemoGetMethodCaptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignupForDemoGetMethodCaptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignupForDemo_GetMethodDescriptionCompletedEventHandler(object sender, CustomerSignupForDemo_GetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignupForDemo_GetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignupForDemo_GetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemoMethodDescriptionCompletedEventHandler(object sender, GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemoMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSignupForDemoGetMethodDescriptionCompletedEventHandler(object sender, GetCustomerSignupForDemoGetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSignupForDemoGetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSignupForDemoGetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSuiteActivations_GetMethodNameCompletedEventHandler(object sender, CustomerSuiteActivations_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSuiteActivations_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSuiteActivations_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSuiteActivationsMethodNameCompletedEventHandler(object sender, GetCustomerSuiteActivationsMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSuiteActivationsMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSuiteActivationsMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSuiteActivationsGetMethodNameCompletedEventHandler(object sender, GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSuiteActivationsGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSuiteActivations_GetMethodDescriptionCompletedEventHandler(object sender, CustomerSuiteActivations_GetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSuiteActivations_GetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSuiteActivations_GetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSuiteActivationsMethodDescriptionCompletedEventHandler(object sender, GetCustomerSuiteActivationsMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSuiteActivationsMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSuiteActivationsMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerSuiteActivationsGetMethodDescriptionCompletedEventHandler(object sender, GetCustomerSuiteActivationsGetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSuiteActivationsGetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSuiteActivationsGetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerProductActivations_GetMethodNameCompletedEventHandler(object sender, CustomerProductActivations_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerProductActivations_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerProductActivations_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerProductActivationsMethodNameCompletedEventHandler(object sender, GetCustomerProductActivationsMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerProductActivationsMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerProductActivationsMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerProductActivationsGetMethodNameCompletedEventHandler(object sender, GetCustomerProductActivationsGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerProductActivationsGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerProductActivationsGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerProductActivations_GetMethodDescriptionCompletedEventHandler(object sender, CustomerProductActivations_GetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerProductActivations_GetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerProductActivations_GetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerProductActivationsMethodDescriptionCompletedEventHandler(object sender, GetCustomerProductActivationsMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerProductActivationsMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerProductActivationsMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCustomerProductActivationsGetMethodDescriptionCompletedEventHandler(object sender, GetCustomerProductActivationsGetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerProductActivationsGetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerProductActivationsGetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Privilege_GetMethodNameCompletedEventHandler(object sender, Privilege_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Privilege_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Privilege_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetPrivilegeMethodNameCompletedEventHandler(object sender, GetPrivilegeMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivilegeMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivilegeMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetPrivilegeGetMethodNameCompletedEventHandler(object sender, GetPrivilegeGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivilegeGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivilegeGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void Privilege_GetMethodDescriptionCompletedEventHandler(object sender, Privilege_GetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Privilege_GetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Privilege_GetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetPrivilegeMethodDescriptionCompletedEventHandler(object sender, GetPrivilegeMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivilegeMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivilegeMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetPrivilegeGetMethodDescriptionCompletedEventHandler(object sender, GetPrivilegeGetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrivilegeGetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrivilegeGetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataBuild_GetMethodNameCompletedEventHandler(object sender, KeyDataBuild_GetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataBuild_GetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataBuild_GetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyDataBuildMethodNameCompletedEventHandler(object sender, GetKeyDataBuildMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyDataBuildMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyDataBuildMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyDataBuildGetMethodNameCompletedEventHandler(object sender, GetKeyDataBuildGetMethodNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyDataBuildGetMethodNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyDataBuildGetMethodNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyDataBuild_GetMethodDescriptionCompletedEventHandler(object sender, KeyDataBuild_GetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyDataBuild_GetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyDataBuild_GetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyDataBuildMethodDescriptionCompletedEventHandler(object sender, GetKeyDataBuildMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyDataBuildMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyDataBuildMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyDataBuildGetMethodDescriptionCompletedEventHandler(object sender, GetKeyDataBuildGetMethodDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyDataBuildGetMethodDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyDataBuildGetMethodDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ExtendedProperty_GetDefaultValueKindNameCompletedEventHandler(object sender, ExtendedProperty_GetDefaultValueKindNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtendedProperty_GetDefaultValueKindNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExtendedProperty_GetDefaultValueKindNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyDefaultValueKindNameCompletedEventHandler(object sender, GetExtendedPropertyDefaultValueKindNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyDefaultValueKindNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyDefaultValueKindNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ExtendedProperty_GetPrimaryKeyIndexNameCompletedEventHandler(object sender, ExtendedProperty_GetPrimaryKeyIndexNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtendedProperty_GetPrimaryKeyIndexNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExtendedProperty_GetPrimaryKeyIndexNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyPrimaryKeyIndexNameCompletedEventHandler(object sender, GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyPrimaryKeyIndexNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ExtendedProperty_GetForeingKeyReferenceNameCompletedEventHandler(object sender, ExtendedProperty_GetForeingKeyReferenceNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtendedProperty_GetForeingKeyReferenceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExtendedProperty_GetForeingKeyReferenceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyForeingKeyReferenceNameCompletedEventHandler(object sender, GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyForeingKeyReferenceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompletedEventHandler(object sender, ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExtendedProperty_GetForeignKeyReferenceDisplayMemberNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventHandler(object sender, GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyForeignKeyReferenceDisplayMemberNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompletedEventHandler(object sender, ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExtendedProperty_GetForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventHandler(object sender, GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExtendedPropertyForeignKeyReferenceDisplayMemberSeparatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetOptionalParameterPrefixCompletedEventHandler(object sender, GetOptionalParameterPrefixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOptionalParameterPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOptionalParameterPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameIDCompletedEventHandler(object sender, GetFieldNameIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameCodeCompletedEventHandler(object sender, GetFieldNameCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationCodeCompletedEventHandler(object sender, GetFieldNameActivationCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationCustomerIDCompletedEventHandler(object sender, GetFieldNameActivationCustomerIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationCustomerIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationCustomerIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationProductIDCompletedEventHandler(object sender, GetFieldNameActivationProductIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationProductIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationProductIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationPrivilegeIDCompletedEventHandler(object sender, GetFieldNameActivationPrivilegeIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationPrivilegeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationPrivilegeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationActiveFromCompletedEventHandler(object sender, GetFieldNameActivationActiveFromCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationActiveFromCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationActiveFromCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationActiveUntilCompletedEventHandler(object sender, GetFieldNameActivationActiveUntilCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationActiveUntilCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationActiveUntilCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationNotesCompletedEventHandler(object sender, GetFieldNameActivationNotesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetFieldNameActivationKeyCompletedEventHandler(object sender, GetFieldNameActivationKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFieldNameActivationKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFieldNameActivationKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetStatusCompletedEventHandler(object sender, GetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetStatusTimeStampCompletedEventHandler(object sender, GetStatusTimeStampCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusTimeStampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusTimeStampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetCreateTimeStampCompletedEventHandler(object sender, GetCreateTimeStampCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreateTimeStampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreateTimeStampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetElaspedTimeStampCompletedEventHandler(object sender, GetElaspedTimeStampCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetElaspedTimeStampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetElaspedTimeStampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TimeSpan Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TimeSpan)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void DoLoginCompletedEventHandler(object sender, DoLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CredentialGetCompletedEventHandler(object sender, CredentialGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CredentialGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CredentialGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPCredential Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPCredential)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataSetCompletedEventHandler(object sender, getDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void setDataSetCompletedEventHandler(object sender, setDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataSetTablesCompletedEventHandler(object sender, getDataSetTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataSetTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataSetTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataTableCompletedEventHandler(object sender, getDataTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void setDataTableCompletedEventHandler(object sender, setDataTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataTableCountCompletedEventHandler(object sender, getDataTableCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void getDataTableValueCompletedEventHandler(object sender, getDataTableValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextTableNameCompletedEventHandler(object sender, ContextTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextListCompletedEventHandler(object sender, ContextListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetIDCompletedEventHandler(object sender, ContextGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetCodeCompletedEventHandler(object sender, ContextGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextGetUniqueNameCompletedEventHandler(object sender, ContextGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ContextExistsCompletedEventHandler(object sender, ContextExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContextExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContextExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserTableNameCompletedEventHandler(object sender, UserTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserListCompletedEventHandler(object sender, UserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetIDCompletedEventHandler(object sender, UserGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetCodeCompletedEventHandler(object sender, UserGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserGetUniqueNameCompletedEventHandler(object sender, UserGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void UserExistsCompletedEventHandler(object sender, UserExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeTableNameCompletedEventHandler(object sender, PrivilegeTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeListCompletedEventHandler(object sender, PrivilegeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetIDCompletedEventHandler(object sender, PrivilegeGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetCodeCompletedEventHandler(object sender, PrivilegeGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetUniqueNameCompletedEventHandler(object sender, PrivilegeGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeExistsCompletedEventHandler(object sender, PrivilegeExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetCompletedEventHandler(object sender, PrivilegeGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductPrivilege Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductPrivilege)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void PrivilegeGetByProductCompletedEventHandler(object sender, PrivilegeGetByProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrivilegeGetByProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrivilegeGetByProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductPrivilege Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductPrivilege)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteTableNameCompletedEventHandler(object sender, SuiteTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteListCompletedEventHandler(object sender, SuiteListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetIDCompletedEventHandler(object sender, SuiteGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetCodeCompletedEventHandler(object sender, SuiteGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteGetUniqueNameCompletedEventHandler(object sender, SuiteGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void SuiteExistsCompletedEventHandler(object sender, SuiteExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuiteExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuiteExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductTableNameCompletedEventHandler(object sender, ProductTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductListCompletedEventHandler(object sender, ProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetIDCompletedEventHandler(object sender, ProductGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetCodeCompletedEventHandler(object sender, ProductGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductGetUniqueNameCompletedEventHandler(object sender, ProductGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ProductExistsCompletedEventHandler(object sender, ProductExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerTableNameCompletedEventHandler(object sender, CustomerTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerListCompletedEventHandler(object sender, CustomerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetIDCompletedEventHandler(object sender, CustomerGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCodeCompletedEventHandler(object sender, CustomerGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCodeByProductCompletedEventHandler(object sender, CustomerGetCodeByProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCodeByProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCodeByProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetCodeByProductITCompletedEventHandler(object sender, CustomerGetCodeByProductITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetCodeByProductITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetCodeByProductITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerGetUniqueNameCompletedEventHandler(object sender, CustomerGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsCompletedEventHandler(object sender, CustomerExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsByProductCompletedEventHandler(object sender, CustomerExistsByProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsByProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsByProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerExistsByProductITCompletedEventHandler(object sender, CustomerExistsByProductITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerExistsByProductITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerExistsByProductITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerAddCompletedEventHandler(object sender, CustomerAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerRemoveCompletedEventHandler(object sender, CustomerRemoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignUpForDemoCompletedEventHandler(object sender, CustomerSignUpForDemoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignUpForDemoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignUpForDemoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSignUpForDemoITCompletedEventHandler(object sender, CustomerSignUpForDemoITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSignUpForDemoITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSignUpForDemoITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerActivateCompletedEventHandler(object sender, CustomerActivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerDeactivateCompletedEventHandler(object sender, CustomerDeactivateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerDeactivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerDeactivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerActivationsGetCompletedEventHandler(object sender, CustomerActivationsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerActivationsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerActivationsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSuiteActivationsGetCompletedEventHandler(object sender, CustomerSuiteActivationsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSuiteActivationsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSuiteActivationsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerSuiteActivationsGetITCompletedEventHandler(object sender, CustomerSuiteActivationsGetITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerSuiteActivationsGetITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerSuiteActivationsGetITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerProductActivationsGetCompletedEventHandler(object sender, CustomerProductActivationsGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerProductActivationsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerProductActivationsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CustomerProductActivationsGetITCompletedEventHandler(object sender, CustomerProductActivationsGetITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerProductActivationsGetITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerProductActivationsGetITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationTableNameCompletedEventHandler(object sender, ActivationTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationListCompletedEventHandler(object sender, ActivationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetIDCompletedEventHandler(object sender, ActivationGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetIDByCustomerProductCompletedEventHandler(object sender, ActivationGetIDByCustomerProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetIDByCustomerProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetIDByCustomerProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetCodeCompletedEventHandler(object sender, ActivationGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationGetUniqueNameCompletedEventHandler(object sender, ActivationGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationExistsCompletedEventHandler(object sender, ActivationExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void ActivationExistsByCustomerProductCompletedEventHandler(object sender, ActivationExistsByCustomerProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivationExistsByCustomerProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivationExistsByCustomerProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyTableNameCompletedEventHandler(object sender, KeyTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyListCompletedEventHandler(object sender, KeyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetIDCompletedEventHandler(object sender, KeyGetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetCodeCompletedEventHandler(object sender, KeyGetCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyGetUniqueNameCompletedEventHandler(object sender, KeyGetUniqueNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyGetUniqueNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyGetUniqueNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void KeyExistsCompletedEventHandler(object sender, KeyExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KeyExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LPMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LPMessage)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591